
rtos_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007814  08007814  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007814  08007814  00008814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800781c  0800781c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800781c  0800781c  0000881c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007820  08007820  00008820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007824  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009060  2**0
                  CONTENTS
 10 .bss          00004320  20000060  20000060  00009060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004380  20004380  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018249  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003350  00000000  00000000  000212d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  00024630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106e  00000000  00000000  00025b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c2a  00000000  00000000  00026b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184b8  00000000  00000000  0004b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3497  00000000  00000000  00063c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001470ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e60  00000000  00000000  00147144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0014cfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800742c 	.word	0x0800742c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800742c 	.word	0x0800742c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800029e:	f000 b9b5 	b.w	800060c <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <uart_debug_printf>:
extern UART_HandleTypeDef huart2;
static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,uint8_t len);
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,int32_t *fine_temp);
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,int32_t fine_temp);
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,int32_t fine_temp);
void uart_debug_printf(const char* fmt, ...) {
 8000610:	b40f      	push	{r0, r1, r2, r3}
 8000612:	b580      	push	{r7, lr}
 8000614:	b0a2      	sub	sp, #136	@ 0x88
 8000616:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, fmt);
 8000618:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800061c:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800061e:	f107 0008 	add.w	r0, r7, #8
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000628:	2180      	movs	r1, #128	@ 0x80
 800062a:	f006 fa1b 	bl	8006a64 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdcc 	bl	80001d0 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	f107 0108 	add.w	r1, r7, #8
 8000640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <uart_debug_printf+0x48>)
 8000646:	f004 fad7 	bl	8004bf8 <HAL_UART_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3788      	adds	r7, #136	@ 0x88
 800064e:	46bd      	mov	sp, r7
 8000650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr
 8000658:	200003b8 	.word	0x200003b8

0800065c <bmp280_init_default_params>:

void bmp280_init_default_params(bmp280_params_t *params) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    params->mode = BMP280_MODE_NORMAL;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2203      	movs	r2, #3
 8000668:	701a      	strb	r2, [r3, #0]
    params->filter = BMP280_FILTER_OFF;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	705a      	strb	r2, [r3, #1]
    params->oversampling_pressure = BMP280_STANDARD;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2203      	movs	r2, #3
 8000674:	709a      	strb	r2, [r3, #2]
    params->oversampling_temperature = BMP280_STANDARD;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2203      	movs	r2, #3
 800067a:	70da      	strb	r2, [r3, #3]
    params->oversampling_humidity = BMP280_STANDARD;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2203      	movs	r2, #3
 8000680:	711a      	strb	r2, [r3, #4]
    params->standby = BMP280_STANDBY_250;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2203      	movs	r2, #3
 8000686:	715a      	strb	r2, [r3, #5]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <read_register16>:

bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af04      	add	r7, sp, #16
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	460b      	mov	r3, r1
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	72fb      	strb	r3, [r7, #11]
    uint16_t tx_buff;
    uint8_t rx_buff[2];
    tx_buff = (dev->addr << 1);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]

    uart_debug_printf("Reading register 0x%02X\r\n", addr);
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4819      	ldr	r0, [pc, #100]	@ (8000714 <read_register16+0x80>)
 80006b0:	f7ff ffae 	bl	8000610 <uart_debug_printf>

    if (HAL_I2C_Mem_Read(&hi2c1, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK) {
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	8af9      	ldrh	r1, [r7, #22]
 80006ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2302      	movs	r3, #2
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	4812      	ldr	r0, [pc, #72]	@ (8000718 <read_register16+0x84>)
 80006ce:	f002 fcf1 	bl	80030b4 <HAL_I2C_Mem_Read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d113      	bne.n	8000700 <read_register16+0x6c>
        *value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80006d8:	7d7b      	ldrb	r3, [r7, #21]
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	b21a      	sxth	r2, r3
 80006de:	7d3b      	ldrb	r3, [r7, #20]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	801a      	strh	r2, [r3, #0]
        uart_debug_printf("Read 0x%04X from register 0x%02X\r\n", *value, addr);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <read_register16+0x88>)
 80006f8:	f7ff ff8a 	bl	8000610 <uart_debug_printf>
        return true;
 80006fc:	2301      	movs	r3, #1
 80006fe:	e005      	b.n	800070c <read_register16+0x78>
    } else {
        uart_debug_printf("Failed to read from register 0x%02X\r\n", addr);
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	4619      	mov	r1, r3
 8000704:	4806      	ldr	r0, [pc, #24]	@ (8000720 <read_register16+0x8c>)
 8000706:	f7ff ff83 	bl	8000610 <uart_debug_printf>
        return false;
 800070a:	2300      	movs	r3, #0
    }
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08007444 	.word	0x08007444
 8000718:	2000031c 	.word	0x2000031c
 800071c:	08007460 	.word	0x08007460
 8000720:	08007484 	.word	0x08007484

08000724 <read_calibration_data>:

bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    uart_debug_printf("Reading calibration data\n");
 800072c:	4843      	ldr	r0, [pc, #268]	@ (800083c <read_calibration_data+0x118>)
 800072e:	f7ff ff6f 	bl	8000610 <uart_debug_printf>

    if (read_register16(dev, 0x88, &dev->dig_T1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	461a      	mov	r2, r3
 8000736:	2188      	movs	r1, #136	@ 0x88
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ffab 	bl	8000694 <read_register16>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d072      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3302      	adds	r3, #2
 8000748:	461a      	mov	r2, r3
 800074a:	218a      	movs	r1, #138	@ 0x8a
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ffa1 	bl	8000694 <read_register16>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d068      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3304      	adds	r3, #4
 800075c:	461a      	mov	r2, r3
 800075e:	218c      	movs	r1, #140	@ 0x8c
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff97 	bl	8000694 <read_register16>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d05e      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x8e, &dev->dig_P1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3306      	adds	r3, #6
 8000770:	461a      	mov	r2, r3
 8000772:	218e      	movs	r1, #142	@ 0x8e
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff8d 	bl	8000694 <read_register16>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d054      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3308      	adds	r3, #8
 8000784:	461a      	mov	r2, r3
 8000786:	2190      	movs	r1, #144	@ 0x90
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff83 	bl	8000694 <read_register16>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d04a      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	330a      	adds	r3, #10
 8000798:	461a      	mov	r2, r3
 800079a:	2192      	movs	r1, #146	@ 0x92
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff79 	bl	8000694 <read_register16>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d040      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	330c      	adds	r3, #12
 80007ac:	461a      	mov	r2, r3
 80007ae:	2194      	movs	r1, #148	@ 0x94
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff6f 	bl	8000694 <read_register16>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d036      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	330e      	adds	r3, #14
 80007c0:	461a      	mov	r2, r3
 80007c2:	2196      	movs	r1, #150	@ 0x96
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ff65 	bl	8000694 <read_register16>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d02c      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3310      	adds	r3, #16
 80007d4:	461a      	mov	r2, r3
 80007d6:	2198      	movs	r1, #152	@ 0x98
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff5b 	bl	8000694 <read_register16>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d022      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3312      	adds	r3, #18
 80007e8:	461a      	mov	r2, r3
 80007ea:	219a      	movs	r1, #154	@ 0x9a
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff51 	bl	8000694 <read_register16>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d018      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3314      	adds	r3, #20
 80007fc:	461a      	mov	r2, r3
 80007fe:	219c      	movs	r1, #156	@ 0x9c
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff47 	bl	8000694 <read_register16>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00e      	beq.n	800082a <read_calibration_data+0x106>
        && read_register16(dev, 0x9e, (uint16_t *) &dev->dig_P9)) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3316      	adds	r3, #22
 8000810:	461a      	mov	r2, r3
 8000812:	219e      	movs	r1, #158	@ 0x9e
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff3d 	bl	8000694 <read_register16>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d004      	beq.n	800082a <read_calibration_data+0x106>
        uart_debug_printf("Successfully read calibration data\r\n");
 8000820:	4807      	ldr	r0, [pc, #28]	@ (8000840 <read_calibration_data+0x11c>)
 8000822:	f7ff fef5 	bl	8000610 <uart_debug_printf>
        return true;
 8000826:	2301      	movs	r3, #1
 8000828:	e003      	b.n	8000832 <read_calibration_data+0x10e>
    }

    uart_debug_printf("Failed to read calibration data\r\n");
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <read_calibration_data+0x120>)
 800082c:	f7ff fef0 	bl	8000610 <uart_debug_printf>
    return false;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	080074ac 	.word	0x080074ac
 8000840:	080074c8 	.word	0x080074c8
 8000844:	080074f0 	.word	0x080074f0

08000848 <read_hum_calibration_data>:

bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    uint16_t h4, h5;

    uart_debug_printf("Reading humidity calibration data\r\n");
 8000850:	4832      	ldr	r0, [pc, #200]	@ (800091c <read_hum_calibration_data+0xd4>)
 8000852:	f7ff fedd 	bl	8000610 <uart_debug_printf>

    if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f103 0218 	add.w	r2, r3, #24
 800085c:	2301      	movs	r3, #1
 800085e:	21a1      	movs	r1, #161	@ 0xa1
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 fa1f 	bl	8000ca4 <read_data>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d14e      	bne.n	800090a <read_hum_calibration_data+0xc2>
        && read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	331a      	adds	r3, #26
 8000870:	461a      	mov	r2, r3
 8000872:	21e1      	movs	r1, #225	@ 0xe1
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff0d 	bl	8000694 <read_register16>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d044      	beq.n	800090a <read_hum_calibration_data+0xc2>
        && !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f103 021c 	add.w	r2, r3, #28
 8000886:	2301      	movs	r3, #1
 8000888:	21e3      	movs	r1, #227	@ 0xe3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 fa0a 	bl	8000ca4 <read_data>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d139      	bne.n	800090a <read_hum_calibration_data+0xc2>
        && read_register16(dev, 0xe4, &h4)
 8000896:	f107 030e 	add.w	r3, r7, #14
 800089a:	461a      	mov	r2, r3
 800089c:	21e4      	movs	r1, #228	@ 0xe4
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fef8 	bl	8000694 <read_register16>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d02f      	beq.n	800090a <read_hum_calibration_data+0xc2>
        && read_register16(dev, 0xe5, &h5)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	461a      	mov	r2, r3
 80008b0:	21e5      	movs	r1, #229	@ 0xe5
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff feee 	bl	8000694 <read_register16>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d025      	beq.n	800090a <read_hum_calibration_data+0xc2>
        && !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80008c4:	2301      	movs	r3, #1
 80008c6:	21e7      	movs	r1, #231	@ 0xe7
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 f9eb 	bl	8000ca4 <read_data>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d11a      	bne.n	800090a <read_hum_calibration_data+0xc2>
        dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	b21b      	sxth	r3, r3
 80008da:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80008de:	b21a      	sxth	r2, r3
 80008e0:	89fb      	ldrh	r3, [r7, #14]
 80008e2:	121b      	asrs	r3, r3, #8
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	83da      	strh	r2, [r3, #30]
        dev->dig_H5 = h5 >> 4;
 80008f4:	89bb      	ldrh	r3, [r7, #12]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	841a      	strh	r2, [r3, #32]

        uart_debug_printf("Successfully read humidity calibration data\r\n");
 8000900:	4807      	ldr	r0, [pc, #28]	@ (8000920 <read_hum_calibration_data+0xd8>)
 8000902:	f7ff fe85 	bl	8000610 <uart_debug_printf>
        return true;
 8000906:	2301      	movs	r3, #1
 8000908:	e003      	b.n	8000912 <read_hum_calibration_data+0xca>
    }

    uart_debug_printf("Failed to read humidity calibration data\r\n");
 800090a:	4806      	ldr	r0, [pc, #24]	@ (8000924 <read_hum_calibration_data+0xdc>)
 800090c:	f7ff fe80 	bl	8000610 <uart_debug_printf>
    return false;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08007514 	.word	0x08007514
 8000920:	08007538 	.word	0x08007538
 8000924:	08007568 	.word	0x08007568

08000928 <write_register8>:

int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af04      	add	r7, sp, #16
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
 8000934:	4613      	mov	r3, r2
 8000936:	70bb      	strb	r3, [r7, #2]
    uint16_t tx_buff;
    tx_buff = (dev->addr << 1);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	81fb      	strh	r3, [r7, #14]

    uart_debug_printf("Writing 0x%02X to register 0x%02X\r\n", value, addr);
 8000940:	78bb      	ldrb	r3, [r7, #2]
 8000942:	4619      	mov	r1, r3
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	461a      	mov	r2, r3
 8000948:	4812      	ldr	r0, [pc, #72]	@ (8000994 <write_register8+0x6c>)
 800094a:	f7ff fe61 	bl	8000610 <uart_debug_printf>

    if (HAL_I2C_Mem_Write(&hi2c1, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) {
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	b29a      	uxth	r2, r3
 8000952:	89f9      	ldrh	r1, [r7, #14]
 8000954:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	2301      	movs	r3, #1
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	1cbb      	adds	r3, r7, #2
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2301      	movs	r3, #1
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <write_register8+0x70>)
 8000966:	f002 faab 	bl	8002ec0 <HAL_I2C_Mem_Write>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d106      	bne.n	800097e <write_register8+0x56>
        uart_debug_printf("Successfully wrote to register 0x%02X\r\n", addr);
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	4619      	mov	r1, r3
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <write_register8+0x74>)
 8000976:	f7ff fe4b 	bl	8000610 <uart_debug_printf>
        return false;
 800097a:	2300      	movs	r3, #0
 800097c:	e005      	b.n	800098a <write_register8+0x62>
    } else {
        uart_debug_printf("Failed to write to register 0x%02X\r\n", addr);
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	4619      	mov	r1, r3
 8000982:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <write_register8+0x78>)
 8000984:	f7ff fe44 	bl	8000610 <uart_debug_printf>
        return true;
 8000988:	2301      	movs	r3, #1
    }
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	08007594 	.word	0x08007594
 8000998:	2000031c 	.word	0x2000031c
 800099c:	080075b8 	.word	0x080075b8
 80009a0:	080075e0 	.word	0x080075e0

080009a4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
    uart_debug_printf("Initializing BMP280\r\n");
 80009ae:	4860      	ldr	r0, [pc, #384]	@ (8000b30 <bmp280_init+0x18c>)
 80009b0:	f7ff fe2e 	bl	8000610 <uart_debug_printf>

    if (dev->addr != BMP280_I2C_ADDRESS_0 && dev->addr != BMP280_I2C_ADDRESS_1) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80009b8:	2b76      	cmp	r3, #118	@ 0x76
 80009ba:	d008      	beq.n	80009ce <bmp280_init+0x2a>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80009c0:	2b77      	cmp	r3, #119	@ 0x77
 80009c2:	d004      	beq.n	80009ce <bmp280_init+0x2a>
        uart_debug_printf("Invalid BMP280 I2C address\r\n");
 80009c4:	485b      	ldr	r0, [pc, #364]	@ (8000b34 <bmp280_init+0x190>)
 80009c6:	f7ff fe23 	bl	8000610 <uart_debug_printf>
        return false;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e0ac      	b.n	8000b28 <bmp280_init+0x184>
    }

    if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80009d4:	2301      	movs	r3, #1
 80009d6:	21d0      	movs	r1, #208	@ 0xd0
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f963 	bl	8000ca4 <read_data>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <bmp280_init+0x4a>
        uart_debug_printf("Failed to read BMP280 ID\r\n");
 80009e4:	4854      	ldr	r0, [pc, #336]	@ (8000b38 <bmp280_init+0x194>)
 80009e6:	f7ff fe13 	bl	8000610 <uart_debug_printf>
        return false;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e09c      	b.n	8000b28 <bmp280_init+0x184>
    }

    uart_debug_printf("BMP280 ID: 0x%02X\n", dev->id);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80009f4:	4619      	mov	r1, r3
 80009f6:	4851      	ldr	r0, [pc, #324]	@ (8000b3c <bmp280_init+0x198>)
 80009f8:	f7ff fe0a 	bl	8000610 <uart_debug_printf>

    if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000a02:	2b58      	cmp	r3, #88	@ 0x58
 8000a04:	d009      	beq.n	8000a1a <bmp280_init+0x76>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000a0c:	2b60      	cmp	r3, #96	@ 0x60
 8000a0e:	d004      	beq.n	8000a1a <bmp280_init+0x76>
        uart_debug_printf("Invalid BMP280 ID\r\n");
 8000a10:	484b      	ldr	r0, [pc, #300]	@ (8000b40 <bmp280_init+0x19c>)
 8000a12:	f7ff fdfd 	bl	8000610 <uart_debug_printf>
        return false;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e086      	b.n	8000b28 <bmp280_init+0x184>
    }

    // Soft reset.
    if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000a1a:	22b6      	movs	r2, #182	@ 0xb6
 8000a1c:	21e0      	movs	r1, #224	@ 0xe0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ff82 	bl	8000928 <write_register8>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d004      	beq.n	8000a34 <bmp280_init+0x90>
        uart_debug_printf("Failed to reset BMP280\r\n");
 8000a2a:	4846      	ldr	r0, [pc, #280]	@ (8000b44 <bmp280_init+0x1a0>)
 8000a2c:	f7ff fdf0 	bl	8000610 <uart_debug_printf>
        return false;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e079      	b.n	8000b28 <bmp280_init+0x184>
    }

    // Wait until finished copying over the NVP data.
    while (1) {
        uint8_t status;
        if (!read_data(dev, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0)
 8000a34:	f107 020c 	add.w	r2, r7, #12
 8000a38:	2301      	movs	r3, #1
 8000a3a:	21f3      	movs	r1, #243	@ 0xf3
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f931 	bl	8000ca4 <read_data>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f5      	bne.n	8000a34 <bmp280_init+0x90>
 8000a48:	7b3b      	ldrb	r3, [r7, #12]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1f0      	bne.n	8000a34 <bmp280_init+0x90>
            break;
    }

    if (!read_calibration_data(dev)) {
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fe66 	bl	8000724 <read_calibration_data>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f083 0301 	eor.w	r3, r3, #1
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d100      	bne.n	8000a66 <bmp280_init+0xc2>
 8000a64:	e001      	b.n	8000a6a <bmp280_init+0xc6>
        return false;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e05e      	b.n	8000b28 <bmp280_init+0x184>
    }

    if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000a70:	2b60      	cmp	r3, #96	@ 0x60
 8000a72:	d10a      	bne.n	8000a8a <bmp280_init+0xe6>
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff fee7 	bl	8000848 <read_hum_calibration_data>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f083 0301 	eor.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <bmp280_init+0xe6>
        return false;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e04e      	b.n	8000b28 <bmp280_init+0x184>
    }

    uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	795b      	ldrb	r3, [r3, #5]
 8000a8e:	015b      	lsls	r3, r3, #5
 8000a90:	b25a      	sxtb	r2, r3
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	73fb      	strb	r3, [r7, #15]
    if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	21f5      	movs	r1, #245	@ 0xf5
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ff3e 	bl	8000928 <write_register8>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <bmp280_init+0x112>
        return false;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e038      	b.n	8000b28 <bmp280_init+0x184>
    }

    if (params->mode == BMP280_MODE_FORCED) {
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d102      	bne.n	8000ac4 <bmp280_init+0x120>
        params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
    }

    uint8_t ctrl = (params->oversampling_temperature << 5)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	78db      	ldrb	r3, [r3, #3]
 8000ac8:	015b      	lsls	r3, r3, #5
            | (params->oversampling_pressure << 2) | (params->mode);
 8000aca:	b25a      	sxtb	r2, r3
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	789b      	ldrb	r3, [r3, #2]
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b25b      	sxtb	r3, r3
    uint8_t ctrl = (params->oversampling_temperature << 5)
 8000ae2:	73bb      	strb	r3, [r7, #14]

    if (dev->id == BME280_CHIP_ID) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000aea:	2b60      	cmp	r3, #96	@ 0x60
 8000aec:	d10d      	bne.n	8000b0a <bmp280_init+0x166>
        // Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
        uint8_t ctrl_hum = params->oversampling_humidity;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	791b      	ldrb	r3, [r3, #4]
 8000af2:	737b      	strb	r3, [r7, #13]
        if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	461a      	mov	r2, r3
 8000af8:	21f2      	movs	r1, #242	@ 0xf2
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff14 	bl	8000928 <write_register8>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <bmp280_init+0x166>
            return false;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e00e      	b.n	8000b28 <bmp280_init+0x184>
        }
    }

    if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	21f4      	movs	r1, #244	@ 0xf4
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff09 	bl	8000928 <write_register8>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <bmp280_init+0x17c>
        return false;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e003      	b.n	8000b28 <bmp280_init+0x184>
    }

    uart_debug_printf("BMP280 initialized successfully\n");
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <bmp280_init+0x1a4>)
 8000b22:	f7ff fd75 	bl	8000610 <uart_debug_printf>
    return true;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08007608 	.word	0x08007608
 8000b34:	08007620 	.word	0x08007620
 8000b38:	08007640 	.word	0x08007640
 8000b3c:	0800765c 	.word	0x0800765c
 8000b40:	08007670 	.word	0x08007670
 8000b44:	08007684 	.word	0x08007684
 8000b48:	080076a0 	.word	0x080076a0

08000b4c <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    uint8_t ctrl;
    if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 8000b54:	f107 020f 	add.w	r2, r7, #15
 8000b58:	2301      	movs	r3, #1
 8000b5a:	21f4      	movs	r1, #244	@ 0xf4
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f8a1 	bl	8000ca4 <read_data>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <bmp280_force_measurement+0x20>
        return false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e015      	b.n	8000b98 <bmp280_force_measurement+0x4c>
    ctrl &= ~0b11;  // clear two lower bits
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	f023 0303 	bic.w	r3, r3, #3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	73fb      	strb	r3, [r7, #15]
    ctrl |= BMP280_MODE_FORCED;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	73fb      	strb	r3, [r7, #15]
    if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	461a      	mov	r2, r3
 8000b84:	21f4      	movs	r1, #244	@ 0xf4
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fece 	bl	8000928 <write_register8>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <bmp280_force_measurement+0x4a>
        return false;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <bmp280_force_measurement+0x4c>
    }
    return true;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    uint8_t status;
    if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8000ba8:	f107 020f 	add.w	r2, r7, #15
 8000bac:	2301      	movs	r3, #1
 8000bae:	21f3      	movs	r1, #243	@ 0xf3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 f877 	bl	8000ca4 <read_data>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <bmp280_is_measuring+0x20>
        return false;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e007      	b.n	8000bd0 <bmp280_is_measuring+0x30>
    if (status & (1 << 3)) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <bmp280_is_measuring+0x2e>
        return true;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <bmp280_is_measuring+0x30>
    }
    return false;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
        uint32_t *humidity) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
    int32_t adc_pressure;
    int32_t adc_temp;
    uint8_t data[8];

    // Only the BME280 supports reading the humidity.
    if (dev->id != BME280_CHIP_ID) {
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000bec:	2b60      	cmp	r3, #96	@ 0x60
 8000bee:	d007      	beq.n	8000c00 <bmp280_read_fixed+0x28>
        if (humidity)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <bmp280_read_fixed+0x24>
            *humidity = 0;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
        humidity = NULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	603b      	str	r3, [r7, #0]
    }

    // Need to read in one sequence to ensure they match.
    size_t size = humidity ? 8 : 6;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <bmp280_read_fixed+0x32>
 8000c06:	2308      	movs	r3, #8
 8000c08:	e000      	b.n	8000c0c <bmp280_read_fixed+0x34>
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (read_data(dev, 0xf7, data, size)) {
 8000c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f107 0218 	add.w	r2, r7, #24
 8000c16:	21f7      	movs	r1, #247	@ 0xf7
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f843 	bl	8000ca4 <read_data>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <bmp280_read_fixed+0x50>
        return false;
 8000c24:	2300      	movs	r3, #0
 8000c26:	e038      	b.n	8000c9a <bmp280_read_fixed+0xc2>
    }

    adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000c28:	7e3b      	ldrb	r3, [r7, #24]
 8000c2a:	031a      	lsls	r2, r3, #12
 8000c2c:	7e7b      	ldrb	r3, [r7, #25]
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	4313      	orrs	r3, r2
 8000c32:	7eba      	ldrb	r2, [r7, #26]
 8000c34:	0912      	lsrs	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8000c3c:	7efb      	ldrb	r3, [r7, #27]
 8000c3e:	031a      	lsls	r2, r3, #12
 8000c40:	7f3b      	ldrb	r3, [r7, #28]
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4313      	orrs	r3, r2
 8000c46:	7f7a      	ldrb	r2, [r7, #29]
 8000c48:	0912      	lsrs	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24

    int32_t fine_temp;
    *temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	461a      	mov	r2, r3
 8000c56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f84d 	bl	8000cf8 <compensate_temperature>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	601a      	str	r2, [r3, #0]
    *pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	461a      	mov	r2, r3
 8000c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f000 f87d 	bl	8000d6a <compensate_pressure>
 8000c70:	4602      	mov	r2, r0
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]

    if (humidity) {
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00d      	beq.n	8000c98 <bmp280_read_fixed+0xc0>
        int32_t adc_humidity = data[6] << 8 | data[7];
 8000c7c:	7fbb      	ldrb	r3, [r7, #30]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	7ffa      	ldrb	r2, [r7, #31]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	623b      	str	r3, [r7, #32]
        *humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	6a39      	ldr	r1, [r7, #32]
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	f000 fb2a 	bl	80012e6 <compensate_humidity>
 8000c92:	4602      	mov	r2, r0
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	601a      	str	r2, [r3, #0]
    }

    return true;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3730      	adds	r7, #48	@ 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <read_data>:
        return true;
    }

    return false;
}
static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,uint8_t len) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af04      	add	r7, sp, #16
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	72fb      	strb	r3, [r7, #11]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(&hi2c1, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	7abb      	ldrb	r3, [r7, #10]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	8af9      	ldrh	r1, [r7, #22]
 8000cca:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cce:	9002      	str	r0, [sp, #8]
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <read_data+0x50>)
 8000cda:	f002 f9eb 	bl	80030b4 <HAL_I2C_Mem_Read>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d101      	bne.n	8000ce8 <read_data+0x44>
		return 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e000      	b.n	8000cea <read_data+0x46>
	else
		return 1;
 8000ce8:	2301      	movs	r3, #1

}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000031c 	.word	0x2000031c

08000cf8 <compensate_temperature>:

 static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b087      	sub	sp, #28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	10da      	asrs	r2, r3, #3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000d1a:	12db      	asrs	r3, r3, #11
 8000d1c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	111b      	asrs	r3, r3, #4
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	8812      	ldrh	r2, [r2, #0]
 8000d26:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	1112      	asrs	r2, r2, #4
 8000d2c:	68f9      	ldr	r1, [r7, #12]
 8000d2e:	8809      	ldrh	r1, [r1, #0]
 8000d30:	1a52      	subs	r2, r2, r1
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000d42:	139b      	asrs	r3, r3, #14
 8000d44:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	3380      	adds	r3, #128	@ 0x80
 8000d5c:	121b      	asrs	r3, r3, #8
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <compensate_pressure>:
 static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000d6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d6e:	b0cc      	sub	sp, #304	@ 0x130
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000d76:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000d7a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000d82:	17da      	asrs	r2, r3, #31
 8000d84:	461c      	mov	r4, r3
 8000d86:	4615      	mov	r5, r2
 8000d88:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000d8c:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000d90:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000d94:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d9c:	fb03 f102 	mul.w	r1, r3, r2
 8000da0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000da4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000da8:	fb02 f303 	mul.w	r3, r2, r3
 8000dac:	18ca      	adds	r2, r1, r3
 8000dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000db2:	fba3 8903 	umull	r8, r9, r3, r3
 8000db6:	eb02 0309 	add.w	r3, r2, r9
 8000dba:	4699      	mov	r9, r3
 8000dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dc0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	17da      	asrs	r2, r3, #31
 8000dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000dd0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	fb03 f209 	mul.w	r2, r3, r9
 8000dda:	460b      	mov	r3, r1
 8000ddc:	fb08 f303 	mul.w	r3, r8, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	4602      	mov	r2, r0
 8000de4:	fba8 1202 	umull	r1, r2, r8, r2
 8000de8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000dec:	460a      	mov	r2, r1
 8000dee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000df6:	4413      	add	r3, r2
 8000df8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000dfc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000e00:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000e04:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	17da      	asrs	r2, r3, #31
 8000e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000e18:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e20:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000e24:	462a      	mov	r2, r5
 8000e26:	fb02 f203 	mul.w	r2, r2, r3
 8000e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e2e:	4621      	mov	r1, r4
 8000e30:	fb01 f303 	mul.w	r3, r1, r3
 8000e34:	441a      	add	r2, r3
 8000e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	fba3 1301 	umull	r1, r3, r3, r1
 8000e40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000e44:	460b      	mov	r3, r1
 8000e46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e4e:	18d3      	adds	r3, r2, r3
 8000e50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000e54:	f04f 0000 	mov.w	r0, #0
 8000e58:	f04f 0100 	mov.w	r1, #0
 8000e5c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000e60:	462b      	mov	r3, r5
 8000e62:	0459      	lsls	r1, r3, #17
 8000e64:	4623      	mov	r3, r4
 8000e66:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000e6a:	4623      	mov	r3, r4
 8000e6c:	0458      	lsls	r0, r3, #17
 8000e6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e72:	1814      	adds	r4, r2, r0
 8000e74:	643c      	str	r4, [r7, #64]	@ 0x40
 8000e76:	414b      	adcs	r3, r1
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e7a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000e7e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	17da      	asrs	r2, r3, #31
 8000e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e92:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000e96:	f04f 0000 	mov.w	r0, #0
 8000e9a:	f04f 0100 	mov.w	r1, #0
 8000e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ea2:	00d9      	lsls	r1, r3, #3
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000eaa:	1814      	adds	r4, r2, r0
 8000eac:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000eae:	414b      	adcs	r3, r1
 8000eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000eb2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000eb6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000eba:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ec2:	fb03 f102 	mul.w	r1, r3, r2
 8000ec6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	18ca      	adds	r2, r1, r3
 8000ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ed8:	fba3 1303 	umull	r1, r3, r3, r3
 8000edc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000eea:	18d3      	adds	r3, r2, r3
 8000eec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ef4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	17da      	asrs	r2, r3, #31
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000f00:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000f04:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000f08:	462b      	mov	r3, r5
 8000f0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000f0e:	4642      	mov	r2, r8
 8000f10:	fb02 f203 	mul.w	r2, r2, r3
 8000f14:	464b      	mov	r3, r9
 8000f16:	4621      	mov	r1, r4
 8000f18:	fb01 f303 	mul.w	r3, r1, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4622      	mov	r2, r4
 8000f20:	4641      	mov	r1, r8
 8000f22:	fba2 1201 	umull	r1, r2, r2, r1
 8000f26:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000f2a:	460a      	mov	r2, r1
 8000f2c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000f30:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f34:	4413      	add	r3, r2
 8000f36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	f04f 0100 	mov.w	r1, #0
 8000f42:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000f46:	4623      	mov	r3, r4
 8000f48:	0a18      	lsrs	r0, r3, #8
 8000f4a:	462b      	mov	r3, r5
 8000f4c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f50:	462b      	mov	r3, r5
 8000f52:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	17da      	asrs	r2, r3, #31
 8000f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f6c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000f70:	464a      	mov	r2, r9
 8000f72:	fb02 f203 	mul.w	r2, r2, r3
 8000f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f7a:	4644      	mov	r4, r8
 8000f7c:	fb04 f303 	mul.w	r3, r4, r3
 8000f80:	441a      	add	r2, r3
 8000f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f86:	4644      	mov	r4, r8
 8000f88:	fba3 4304 	umull	r4, r3, r3, r4
 8000f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000f90:	4623      	mov	r3, r4
 8000f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000f9a:	18d3      	adds	r3, r2, r3
 8000f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000fac:	464c      	mov	r4, r9
 8000fae:	0323      	lsls	r3, r4, #12
 8000fb0:	4644      	mov	r4, r8
 8000fb2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000fb6:	4644      	mov	r4, r8
 8000fb8:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000fba:	1884      	adds	r4, r0, r2
 8000fbc:	633c      	str	r4, [r7, #48]	@ 0x30
 8000fbe:	eb41 0303 	adc.w	r3, r1, r3
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fc4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000fc8:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000fcc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000fd0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000fd4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000fd8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000fe0:	88db      	ldrh	r3, [r3, #6]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000fea:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000ff2:	462b      	mov	r3, r5
 8000ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000ff8:	4642      	mov	r2, r8
 8000ffa:	fb02 f203 	mul.w	r2, r2, r3
 8000ffe:	464b      	mov	r3, r9
 8001000:	4621      	mov	r1, r4
 8001002:	fb01 f303 	mul.w	r3, r1, r3
 8001006:	4413      	add	r3, r2
 8001008:	4622      	mov	r2, r4
 800100a:	4641      	mov	r1, r8
 800100c:	fba2 1201 	umull	r1, r2, r2, r1
 8001010:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001014:	460a      	mov	r2, r1
 8001016:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800101a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800101e:	4413      	add	r3, r2
 8001020:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001030:	4629      	mov	r1, r5
 8001032:	104a      	asrs	r2, r1, #1
 8001034:	4629      	mov	r1, r5
 8001036:	17cb      	asrs	r3, r1, #31
 8001038:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800103c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001040:	4313      	orrs	r3, r2
 8001042:	d101      	bne.n	8001048 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001044:	2300      	movs	r3, #0
 8001046:	e148      	b.n	80012da <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001048:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800104c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001050:	17da      	asrs	r2, r3, #31
 8001052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001056:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800105a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800105e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001062:	105b      	asrs	r3, r3, #1
 8001064:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001068:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800106c:	07db      	lsls	r3, r3, #31
 800106e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001072:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001076:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800107a:	4621      	mov	r1, r4
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001080:	4629      	mov	r1, r5
 8001082:	eb61 0303 	sbc.w	r3, r1, r3
 8001086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001088:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800108c:	4622      	mov	r2, r4
 800108e:	462b      	mov	r3, r5
 8001090:	1891      	adds	r1, r2, r2
 8001092:	6239      	str	r1, [r7, #32]
 8001094:	415b      	adcs	r3, r3
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
 8001098:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800109c:	4621      	mov	r1, r4
 800109e:	1851      	adds	r1, r2, r1
 80010a0:	61b9      	str	r1, [r7, #24]
 80010a2:	4629      	mov	r1, r5
 80010a4:	414b      	adcs	r3, r1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80010b4:	4649      	mov	r1, r9
 80010b6:	018b      	lsls	r3, r1, #6
 80010b8:	4641      	mov	r1, r8
 80010ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80010be:	4641      	mov	r1, r8
 80010c0:	018a      	lsls	r2, r1, #6
 80010c2:	4641      	mov	r1, r8
 80010c4:	1889      	adds	r1, r1, r2
 80010c6:	6139      	str	r1, [r7, #16]
 80010c8:	4649      	mov	r1, r9
 80010ca:	eb43 0101 	adc.w	r1, r3, r1
 80010ce:	6179      	str	r1, [r7, #20]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80010dc:	4649      	mov	r1, r9
 80010de:	008b      	lsls	r3, r1, #2
 80010e0:	4641      	mov	r1, r8
 80010e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80010e6:	4641      	mov	r1, r8
 80010e8:	008a      	lsls	r2, r1, #2
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	4603      	mov	r3, r0
 80010f0:	4622      	mov	r2, r4
 80010f2:	189b      	adds	r3, r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	460b      	mov	r3, r1
 80010f8:	462a      	mov	r2, r5
 80010fa:	eb42 0303 	adc.w	r3, r2, r3
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800110c:	4649      	mov	r1, r9
 800110e:	008b      	lsls	r3, r1, #2
 8001110:	4641      	mov	r1, r8
 8001112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001116:	4641      	mov	r1, r8
 8001118:	008a      	lsls	r2, r1, #2
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	4603      	mov	r3, r0
 8001120:	4622      	mov	r2, r4
 8001122:	189b      	adds	r3, r3, r2
 8001124:	673b      	str	r3, [r7, #112]	@ 0x70
 8001126:	462b      	mov	r3, r5
 8001128:	460a      	mov	r2, r1
 800112a:	eb42 0303 	adc.w	r3, r2, r3
 800112e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001130:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001134:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001138:	f7ff f8a2 	bl	8000280 <__aeabi_ldivmod>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001148:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800114c:	b21b      	sxth	r3, r3
 800114e:	17da      	asrs	r2, r3, #31
 8001150:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001152:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001154:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001158:	f04f 0000 	mov.w	r0, #0
 800115c:	f04f 0100 	mov.w	r1, #0
 8001160:	0b50      	lsrs	r0, r2, #13
 8001162:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001166:	1359      	asrs	r1, r3, #13
 8001168:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800116c:	462b      	mov	r3, r5
 800116e:	fb00 f203 	mul.w	r2, r0, r3
 8001172:	4623      	mov	r3, r4
 8001174:	fb03 f301 	mul.w	r3, r3, r1
 8001178:	4413      	add	r3, r2
 800117a:	4622      	mov	r2, r4
 800117c:	fba2 1200 	umull	r1, r2, r2, r0
 8001180:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001184:	460a      	mov	r2, r1
 8001186:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800118a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800118e:	4413      	add	r3, r2
 8001190:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001194:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001198:	f04f 0000 	mov.w	r0, #0
 800119c:	f04f 0100 	mov.w	r1, #0
 80011a0:	0b50      	lsrs	r0, r2, #13
 80011a2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80011a6:	1359      	asrs	r1, r3, #13
 80011a8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80011ac:	462b      	mov	r3, r5
 80011ae:	fb00 f203 	mul.w	r2, r0, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	fb03 f301 	mul.w	r3, r3, r1
 80011b8:	4413      	add	r3, r2
 80011ba:	4622      	mov	r2, r4
 80011bc:	fba2 1200 	umull	r1, r2, r2, r0
 80011c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80011c4:	460a      	mov	r2, r1
 80011c6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80011ca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80011ce:	4413      	add	r3, r2
 80011d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80011e0:	4621      	mov	r1, r4
 80011e2:	0e4a      	lsrs	r2, r1, #25
 80011e4:	4629      	mov	r1, r5
 80011e6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80011ea:	4629      	mov	r1, r5
 80011ec:	164b      	asrs	r3, r1, #25
 80011ee:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80011f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	17da      	asrs	r2, r3, #31
 80011fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001200:	667a      	str	r2, [r7, #100]	@ 0x64
 8001202:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001206:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800120a:	462a      	mov	r2, r5
 800120c:	fb02 f203 	mul.w	r2, r2, r3
 8001210:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001214:	4621      	mov	r1, r4
 8001216:	fb01 f303 	mul.w	r3, r1, r3
 800121a:	4413      	add	r3, r2
 800121c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001220:	4621      	mov	r1, r4
 8001222:	fba2 1201 	umull	r1, r2, r2, r1
 8001226:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800122a:	460a      	mov	r2, r1
 800122c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001230:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001234:	4413      	add	r3, r2
 8001236:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001246:	4621      	mov	r1, r4
 8001248:	0cca      	lsrs	r2, r1, #19
 800124a:	4629      	mov	r1, r5
 800124c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001250:	4629      	mov	r1, r5
 8001252:	14cb      	asrs	r3, r1, #19
 8001254:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001258:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800125c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001260:	1884      	adds	r4, r0, r2
 8001262:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001264:	eb41 0303 	adc.w	r3, r1, r3
 8001268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800126a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800126e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001272:	4621      	mov	r1, r4
 8001274:	1889      	adds	r1, r1, r2
 8001276:	6539      	str	r1, [r7, #80]	@ 0x50
 8001278:	4629      	mov	r1, r5
 800127a:	eb43 0101 	adc.w	r1, r3, r1
 800127e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001280:	f04f 0000 	mov.w	r0, #0
 8001284:	f04f 0100 	mov.w	r1, #0
 8001288:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800128c:	4623      	mov	r3, r4
 800128e:	0a18      	lsrs	r0, r3, #8
 8001290:	462b      	mov	r3, r5
 8001292:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001296:	462b      	mov	r3, r5
 8001298:	1219      	asrs	r1, r3, #8
 800129a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800129e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	17da      	asrs	r2, r3, #31
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80012a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80012b6:	464c      	mov	r4, r9
 80012b8:	0123      	lsls	r3, r4, #4
 80012ba:	4644      	mov	r4, r8
 80012bc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80012c0:	4644      	mov	r4, r8
 80012c2:	0122      	lsls	r2, r4, #4
 80012c4:	1884      	adds	r4, r0, r2
 80012c6:	603c      	str	r4, [r7, #0]
 80012c8:	eb41 0303 	adc.w	r3, r1, r3
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80012d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80012da:	4618      	mov	r0, r3
 80012dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80012e0:	46bd      	mov	sp, r7
 80012e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012e6 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80012e6:	b480      	push	{r7}
 80012e8:	b087      	sub	sp, #28
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80012f8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	039a      	lsls	r2, r3, #14
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001304:	051b      	lsls	r3, r3, #20
 8001306:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800130e:	4619      	mov	r1, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800131c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001324:	4611      	mov	r1, r2
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	fb01 f202 	mul.w	r2, r1, r2
 800132c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	7f09      	ldrb	r1, [r1, #28]
 8001332:	4608      	mov	r0, r1
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	fb00 f101 	mul.w	r1, r0, r1
 800133a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800133c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001340:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001344:	1292      	asrs	r2, r2, #10
 8001346:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001350:	fb01 f202 	mul.w	r2, r1, r2
 8001354:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001358:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	13db      	asrs	r3, r3, #15
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	13d2      	asrs	r2, r2, #15
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	7e12      	ldrb	r2, [r2, #24]
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001384:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800138c:	bfa8      	it	ge
 800138e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001392:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	131b      	asrs	r3, r3, #12
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80013b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <vApplicationGetIdleTaskMemory+0x30>)
 80013ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2280      	movs	r2, #128	@ 0x80
 80013c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	2000007c 	.word	0x2000007c
 80013d4:	2000011c 	.word	0x2000011c

080013d8 <send_uart>:

int _write(int file, char *data, int len) {
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
    return len;
}
void send_uart(const char *message) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7fe fef5 	bl	80001d0 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <send_uart+0x28>)
 80013f2:	f003 fc01 	bl	8004bf8 <HAL_UART_Transmit>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003b8 	.word	0x200003b8

08001404 <vUARTSendingTask>:
//    }
//    vTaskDelete(NULL);
//}

void vUARTSendingTask(void *pvParam)
{
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	b08f      	sub	sp, #60	@ 0x3c
 8001408:	af08      	add	r7, sp, #32
 800140a:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(1000);  /* 1 second period */
 800140c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001410:	617b      	str	r3, [r7, #20]
    xLastWakeTime = xTaskGetTickCount();
 8001412:	f004 fc5b 	bl	8005ccc <xTaskGetTickCount>
 8001416:	4603      	mov	r3, r0
 8001418:	60fb      	str	r3, [r7, #12]
	char *pcMessage = (char *)pvParam;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	613b      	str	r3, [r7, #16]

	while(1)
	{
		portENTER_CRITICAL();
 800141e:	f004 fff3 	bl	8006408 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001422:	6938      	ldr	r0, [r7, #16]
 8001424:	f7fe fed4 	bl	80001d0 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001430:	6939      	ldr	r1, [r7, #16]
 8001432:	4828      	ldr	r0, [pc, #160]	@ (80014d4 <vUARTSendingTask+0xd0>)
 8001434:	f003 fbe0 	bl	8004bf8 <HAL_UART_Transmit>
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu\r\n",
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 8001438:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <vUARTSendingTask+0xd4>)
 800143a:	681b      	ldr	r3, [r3, #0]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu\r\n",
 800143c:	4a27      	ldr	r2, [pc, #156]	@ (80014dc <vUARTSendingTask+0xd8>)
 800143e:	fb82 1203 	smull	r1, r2, r2, r3
 8001442:	1152      	asrs	r2, r2, #5
 8001444:	17db      	asrs	r3, r3, #31
 8001446:	eba2 0c03 	sub.w	ip, r2, r3
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <vUARTSendingTask+0xd4>)
 800144c:	681a      	ldr	r2, [r3, #0]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu\r\n",
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <vUARTSendingTask+0xd8>)
 8001450:	fb83 1302 	smull	r1, r3, r3, r2
 8001454:	1159      	asrs	r1, r3, #5
 8001456:	17d3      	asrs	r3, r2, #31
 8001458:	1acb      	subs	r3, r1, r3
 800145a:	2164      	movs	r1, #100	@ 0x64
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	1ad3      	subs	r3, r2, r3
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 8001462:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <vUARTSendingTask+0xd4>)
 8001464:	6852      	ldr	r2, [r2, #4]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu\r\n",
 8001466:	0a12      	lsrs	r2, r2, #8
 8001468:	603a      	str	r2, [r7, #0]
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 800146a:	491b      	ldr	r1, [pc, #108]	@ (80014d8 <vUARTSendingTask+0xd4>)
 800146c:	6849      	ldr	r1, [r1, #4]
 800146e:	b2c9      	uxtb	r1, r1
 8001470:	2064      	movs	r0, #100	@ 0x64
 8001472:	fb00 f101 	mul.w	r1, r0, r1
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu\r\n",
 8001476:	0a09      	lsrs	r1, r1, #8
				   s.humd / 1024, (s.humd % 1024) * 100 / 1024,s.mq135,s.mq2,s.d);
 8001478:	4817      	ldr	r0, [pc, #92]	@ (80014d8 <vUARTSendingTask+0xd4>)
 800147a:	6880      	ldr	r0, [r0, #8]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu\r\n",
 800147c:	0a80      	lsrs	r0, r0, #10
				   s.humd / 1024, (s.humd % 1024) * 100 / 1024,s.mq135,s.mq2,s.d);
 800147e:	4c16      	ldr	r4, [pc, #88]	@ (80014d8 <vUARTSendingTask+0xd4>)
 8001480:	68a4      	ldr	r4, [r4, #8]
 8001482:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8001486:	2564      	movs	r5, #100	@ 0x64
 8001488:	fb05 f404 	mul.w	r4, r5, r4
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu\r\n",
 800148c:	0aa4      	lsrs	r4, r4, #10
 800148e:	4d12      	ldr	r5, [pc, #72]	@ (80014d8 <vUARTSendingTask+0xd4>)
 8001490:	68ed      	ldr	r5, [r5, #12]
 8001492:	4e11      	ldr	r6, [pc, #68]	@ (80014d8 <vUARTSendingTask+0xd4>)
 8001494:	6936      	ldr	r6, [r6, #16]
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <vUARTSendingTask+0xd4>)
 8001498:	6952      	ldr	r2, [r2, #20]
 800149a:	9207      	str	r2, [sp, #28]
 800149c:	9606      	str	r6, [sp, #24]
 800149e:	9505      	str	r5, [sp, #20]
 80014a0:	9404      	str	r4, [sp, #16]
 80014a2:	9003      	str	r0, [sp, #12]
 80014a4:	9102      	str	r1, [sp, #8]
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4663      	mov	r3, ip
 80014ae:	4a0c      	ldr	r2, [pc, #48]	@ (80014e0 <vUARTSendingTask+0xdc>)
 80014b0:	2178      	movs	r1, #120	@ 0x78
 80014b2:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <vUARTSendingTask+0xe0>)
 80014b4:	f005 fa76 	bl	80069a4 <sniprintf>
        send_uart(buffer);
 80014b8:	480a      	ldr	r0, [pc, #40]	@ (80014e4 <vUARTSendingTask+0xe0>)
 80014ba:	f7ff ff8d 	bl	80013d8 <send_uart>
		portEXIT_CRITICAL();
 80014be:	f004 ffd5 	bl	800646c <vPortExitCritical>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	6979      	ldr	r1, [r7, #20]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fa33 	bl	8005934 <vTaskDelayUntil>
		portENTER_CRITICAL();
 80014ce:	bf00      	nop
 80014d0:	e7a5      	b.n	800141e <vUARTSendingTask+0x1a>
 80014d2:	bf00      	nop
 80014d4:	200003b8 	.word	0x200003b8
 80014d8:	20000404 	.word	0x20000404
 80014dc:	51eb851f 	.word	0x51eb851f
 80014e0:	080076c4 	.word	0x080076c4
 80014e4:	2000041c 	.word	0x2000041c

080014e8 <vBMP280Task>:
	}
	vTaskDelete(NULL);
}

void vBMP280Task(void*pvParam)
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b096      	sub	sp, #88	@ 0x58
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(5000);  /* 1 second period */
 80014f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014f4:	657b      	str	r3, [r7, #84]	@ 0x54
    xLastWakeTime = xTaskGetTickCount();
 80014f6:	f004 fbe9 	bl	8005ccc <xTaskGetTickCount>
 80014fa:	4603      	mov	r3, r0
 80014fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char *pcMessage = (char *)pvParam;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	653b      	str	r3, [r7, #80]	@ 0x50
    bmp280_params_t params;
    bmp280_init_default_params(&params);
 8001502:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f8a8 	bl	800065c <bmp280_init_default_params>

    BMP280_HandleTypedef bmp280;
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 800150c:	2376      	movs	r3, #118	@ 0x76
 800150e:	873b      	strh	r3, [r7, #56]	@ 0x38
    if (!bmp280_init(&bmp280, &params)) {
 8001510:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fa42 	bl	80009a4 <bmp280_init>
 8001520:	4603      	mov	r3, r0
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01e      	beq.n	800156a <vBMP280Task+0x82>
        strcpy(pcMessage,"\r\nBMP280 initialization failed");
 800152c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800152e:	4a32      	ldr	r2, [pc, #200]	@ (80015f8 <vBMP280Task+0x110>)
 8001530:	461d      	mov	r5, r3
 8001532:	4614      	mov	r4, r2
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	6028      	str	r0, [r5, #0]
 8001538:	6069      	str	r1, [r5, #4]
 800153a:	60aa      	str	r2, [r5, #8]
 800153c:	60eb      	str	r3, [r5, #12]
 800153e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001540:	6128      	str	r0, [r5, #16]
 8001542:	6169      	str	r1, [r5, #20]
 8001544:	61aa      	str	r2, [r5, #24]
 8001546:	8823      	ldrh	r3, [r4, #0]
 8001548:	78a2      	ldrb	r2, [r4, #2]
 800154a:	83ab      	strh	r3, [r5, #28]
 800154c:	4613      	mov	r3, r2
 800154e:	77ab      	strb	r3, [r5, #30]
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001550:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001552:	f7fe fe3d 	bl	80001d0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001560:	4826      	ldr	r0, [pc, #152]	@ (80015fc <vBMP280Task+0x114>)
 8001562:	f003 fb49 	bl	8004bf8 <HAL_UART_Transmit>

        while (1);
 8001566:	bf00      	nop
 8001568:	e7fd      	b.n	8001566 <vBMP280Task+0x7e>
    int32_t temperature;
    uint32_t pressure, humidity;

   while(1)
   {
	   bmp280_force_measurement(&bmp280);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff faec 	bl	8000b4c <bmp280_force_measurement>
	   portENTER_CRITICAL();
 8001574:	f004 ff48 	bl	8006408 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001578:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800157a:	f7fe fe29 	bl	80001d0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001586:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001588:	481c      	ldr	r0, [pc, #112]	@ (80015fc <vBMP280Task+0x114>)
 800158a:	f003 fb35 	bl	8004bf8 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(100));
 800158e:	2064      	movs	r0, #100	@ 0x64
 8001590:	f004 fa50 	bl	8005a34 <vTaskDelay>
		   if (!bmp280_is_measuring(&bmp280)) {
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fb01 	bl	8000ba0 <bmp280_is_measuring>
 800159e:	4603      	mov	r3, r0
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d019      	beq.n	80015de <vBMP280Task+0xf6>
			   if (bmp280_read_fixed(&bmp280, &temperature, &pressure, &humidity)) {
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	f107 020c 	add.w	r2, r7, #12
 80015b2:	f107 0110 	add.w	r1, r7, #16
 80015b6:	f107 0014 	add.w	r0, r7, #20
 80015ba:	f7ff fb0d 	bl	8000bd8 <bmp280_read_fixed>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <vBMP280Task+0xf0>
						s.temp = temperature;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <vBMP280Task+0x118>)
 80015c8:	6013      	str	r3, [r2, #0]
						s.pres = pressure;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001600 <vBMP280Task+0x118>)
 80015ce:	6053      	str	r3, [r2, #4]
						s.humd = humidity;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <vBMP280Task+0x118>)
 80015d4:	6093      	str	r3, [r2, #8]
 80015d6:	e002      	b.n	80015de <vBMP280Task+0xf6>
			   } else {
				   send_uart("Failed to read values\r\n");
 80015d8:	480a      	ldr	r0, [pc, #40]	@ (8001604 <vBMP280Task+0x11c>)
 80015da:	f7ff fefd 	bl	80013d8 <send_uart>
			   }
		   }
		   vTaskDelay(pdMS_TO_TICKS(1000));
 80015de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015e2:	f004 fa27 	bl	8005a34 <vTaskDelay>
       portEXIT_CRITICAL();
 80015e6:	f004 ff41 	bl	800646c <vPortExitCritical>
	   vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80015ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 f99f 	bl	8005934 <vTaskDelayUntil>
	   bmp280_force_measurement(&bmp280);
 80015f6:	e7b8      	b.n	800156a <vBMP280Task+0x82>
 80015f8:	08007704 	.word	0x08007704
 80015fc:	200003b8 	.word	0x200003b8
 8001600:	20000404 	.word	0x20000404
 8001604:	08007724 	.word	0x08007724

08001608 <vADCTask>:
   }
}
/* USER CODE END 0 */
void vADCTask(void *pvParam)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    char *pcMessage = (char *)pvParam;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(5000);  /* 5 second period */
 8001614:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001618:	623b      	str	r3, [r7, #32]
    xLastWakeTime = xTaskGetTickCount();
 800161a:	f004 fb57 	bl	8005ccc <xTaskGetTickCount>
 800161e:	4603      	mov	r3, r0
 8001620:	61fb      	str	r3, [r7, #28]

    ADC_ChannelConfTypeDef sConfig = {0};
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]

    while (1)
    {
        portENTER_CRITICAL();
 8001630:	f004 feea 	bl	8006408 <vPortEnterCritical>
        HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001634:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001636:	f7fe fdcb 	bl	80001d0 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	b29a      	uxth	r2, r3
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001644:	4827      	ldr	r0, [pc, #156]	@ (80016e4 <vADCTask+0xdc>)
 8001646:	f003 fad7 	bl	8004bf8 <HAL_UART_Transmit>

        // Configure ADC to read from channel 0
        sConfig.Channel = ADC_CHANNEL_0;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
        sConfig.Rank = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	613b      	str	r3, [r7, #16]
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4619      	mov	r1, r3
 800165c:	4822      	ldr	r0, [pc, #136]	@ (80016e8 <vADCTask+0xe0>)
 800165e:	f000 fe4f 	bl	8002300 <HAL_ADC_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <vADCTask+0x64>
        {
            Error_Handler();
 8001668:	f000 fa14 	bl	8001a94 <Error_Handler>
        }

        // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 800166c:	481e      	ldr	r0, [pc, #120]	@ (80016e8 <vADCTask+0xe0>)
 800166e:	f000 fca9 	bl	8001fc4 <HAL_ADC_Start>
        // Poll ADC1 Peripheral & TimeOut = 10mSec
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001672:	210a      	movs	r1, #10
 8001674:	481c      	ldr	r0, [pc, #112]	@ (80016e8 <vADCTask+0xe0>)
 8001676:	f000 fdaa 	bl	80021ce <HAL_ADC_PollForConversion>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <vADCTask+0x84>
        {
            // Read the ADC converted values
            s.mq135 = HAL_ADC_GetValue(&hadc1);
 8001680:	4819      	ldr	r0, [pc, #100]	@ (80016e8 <vADCTask+0xe0>)
 8001682:	f000 fe2f 	bl	80022e4 <HAL_ADC_GetValue>
 8001686:	4603      	mov	r3, r0
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <vADCTask+0xe4>)
 800168a:	60d3      	str	r3, [r2, #12]
        }
        HAL_ADC_Stop(&hadc1);
 800168c:	4816      	ldr	r0, [pc, #88]	@ (80016e8 <vADCTask+0xe0>)
 800168e:	f000 fd6b 	bl	8002168 <HAL_ADC_Stop>

        // Configure ADC to read from channel 1
        sConfig.Channel = ADC_CHANNEL_1;
 8001692:	2301      	movs	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4619      	mov	r1, r3
 800169c:	4812      	ldr	r0, [pc, #72]	@ (80016e8 <vADCTask+0xe0>)
 800169e:	f000 fe2f 	bl	8002300 <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <vADCTask+0xa4>
        {
            Error_Handler();
 80016a8:	f000 f9f4 	bl	8001a94 <Error_Handler>
        }

        // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 80016ac:	480e      	ldr	r0, [pc, #56]	@ (80016e8 <vADCTask+0xe0>)
 80016ae:	f000 fc89 	bl	8001fc4 <HAL_ADC_Start>
        // Poll ADC1 Peripheral & TimeOut = 10mSec
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80016b2:	210a      	movs	r1, #10
 80016b4:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <vADCTask+0xe0>)
 80016b6:	f000 fd8a 	bl	80021ce <HAL_ADC_PollForConversion>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <vADCTask+0xc4>
        {
            // Read the ADC converted values
            s.mq2 = HAL_ADC_GetValue(&hadc1);
 80016c0:	4809      	ldr	r0, [pc, #36]	@ (80016e8 <vADCTask+0xe0>)
 80016c2:	f000 fe0f 	bl	80022e4 <HAL_ADC_GetValue>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <vADCTask+0xe4>)
 80016ca:	6113      	str	r3, [r2, #16]
        }
        HAL_ADC_Stop(&hadc1);
 80016cc:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <vADCTask+0xe0>)
 80016ce:	f000 fd4b 	bl	8002168 <HAL_ADC_Stop>

        portEXIT_CRITICAL();
 80016d2:	f004 fecb 	bl	800646c <vPortExitCritical>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	6a39      	ldr	r1, [r7, #32]
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 f929 	bl	8005934 <vTaskDelayUntil>
        portENTER_CRITICAL();
 80016e2:	e7a5      	b.n	8001630 <vADCTask+0x28>
 80016e4:	200003b8 	.word	0x200003b8
 80016e8:	20000370 	.word	0x20000370
 80016ec:	20000404 	.word	0x20000404

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b08c      	sub	sp, #48	@ 0x30
 80016f4:	af02      	add	r7, sp, #8
	  /* USER CODE BEGIN 1 */
		BaseType_t xRet;
		char * pcMessage = "This is UART Demo\r\n";
 80016f6:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <main+0xc4>)
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 80016fa:	f000 fbdd 	bl	8001eb8 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config();
 80016fe:	f000 f873 	bl	80017e8 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8001702:	f000 f985 	bl	8001a10 <MX_GPIO_Init>
	  MX_ADC1_Init();
 8001706:	f000 f931 	bl	800196c <MX_ADC1_Init>
	  MX_USART2_UART_Init();
 800170a:	f000 f905 	bl	8001918 <MX_USART2_UART_Init>
	  MX_I2C1_Init();
 800170e:	f000 f8d5 	bl	80018bc <MX_I2C1_Init>
	  /* USER CODE BEGIN 2 */
	  HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001712:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001714:	f7fe fd5c 	bl	80001d0 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001720:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001722:	4825      	ldr	r0, [pc, #148]	@ (80017b8 <main+0xc8>)
 8001724:	f003 fa68 	bl	8004bf8 <HAL_UART_Transmit>
	  /* add queues, ... */
	  /* USER CODE END RTOS_QUEUES */

	  /* Create the thread(s) */
	  /* definition and creation of defaultTask */
	  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <main+0xcc>)
 800172a:	1d3c      	adds	r4, r7, #4
 800172c:	461d      	mov	r5, r3
 800172e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fe35 	bl	80053ae <osThreadCreate>
 8001744:	4603      	mov	r3, r0
 8001746:	4a1e      	ldr	r2, [pc, #120]	@ (80017c0 <main+0xd0>)
 8001748:	6013      	str	r3, [r2, #0]

	  /* USER CODE BEGIN RTOS_THREADS */
	  /* add threads, ... */


	  xRet = xTaskCreate(vUARTSendingTask, "UART1 Task", configMINIMAL_STACK_SIZE, "UART Task1\r\n", 2, NULL);
 800174a:	2300      	movs	r3, #0
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2302      	movs	r3, #2
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <main+0xd4>)
 8001754:	2280      	movs	r2, #128	@ 0x80
 8001756:	491c      	ldr	r1, [pc, #112]	@ (80017c8 <main+0xd8>)
 8001758:	481c      	ldr	r0, [pc, #112]	@ (80017cc <main+0xdc>)
 800175a:	f003 ff9c 	bl	8005696 <xTaskCreate>
 800175e:	6238      	str	r0, [r7, #32]
	    if(xRet != pdTRUE)
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <main+0x7a>
	  	  Error_Handler();
 8001766:	f000 f995 	bl	8001a94 <Error_Handler>

	    xRet = xTaskCreate(vBMP280Task, "bmp280 Task", 1024, "bmp280\r\n", 4, NULL);
 800176a:	2300      	movs	r3, #0
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	2304      	movs	r3, #4
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <main+0xe0>)
 8001774:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001778:	4916      	ldr	r1, [pc, #88]	@ (80017d4 <main+0xe4>)
 800177a:	4817      	ldr	r0, [pc, #92]	@ (80017d8 <main+0xe8>)
 800177c:	f003 ff8b 	bl	8005696 <xTaskCreate>
 8001780:	6238      	str	r0, [r7, #32]
	       if(xRet != pdTRUE)
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d001      	beq.n	800178c <main+0x9c>
	     	  Error_Handler();
 8001788:	f000 f984 	bl	8001a94 <Error_Handler>
	       xRet = xTaskCreate(vADCTask, "adc_task", 128, "adc\r\n", 3, NULL);
 800178c:	2300      	movs	r3, #0
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2303      	movs	r3, #3
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <main+0xec>)
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	4911      	ldr	r1, [pc, #68]	@ (80017e0 <main+0xf0>)
 800179a:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <main+0xf4>)
 800179c:	f003 ff7b 	bl	8005696 <xTaskCreate>
 80017a0:	6238      	str	r0, [r7, #32]
	       if(xRet != pdTRUE)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d001      	beq.n	80017ac <main+0xbc>
	       	  Error_Handler();
 80017a8:	f000 f974 	bl	8001a94 <Error_Handler>
//	       if(xRet != pdTRUE)
//	       	  Error_Handler();
	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	  osKernelStart();
 80017ac:	f003 fdf8 	bl	80053a0 <osKernelStart>

	  /* We should never get here as control is now taken by the scheduler */
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <main+0xc0>
 80017b4:	0800773c 	.word	0x0800773c
 80017b8:	200003b8 	.word	0x200003b8
 80017bc:	080077a4 	.word	0x080077a4
 80017c0:	20000400 	.word	0x20000400
 80017c4:	08007750 	.word	0x08007750
 80017c8:	08007760 	.word	0x08007760
 80017cc:	08001405 	.word	0x08001405
 80017d0:	0800776c 	.word	0x0800776c
 80017d4:	08007778 	.word	0x08007778
 80017d8:	080014e9 	.word	0x080014e9
 80017dc:	08007784 	.word	0x08007784
 80017e0:	0800778c 	.word	0x0800778c
 80017e4:	08001609 	.word	0x08001609

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	@ 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	@ 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 f942 	bl	8006a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a27      	ldr	r2, [pc, #156]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <SystemClock_Config+0xcc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <SystemClock_Config+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <SystemClock_Config+0xd0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001858:	2308      	movs	r3, #8
 800185a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800185c:	2332      	movs	r3, #50	@ 0x32
 800185e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001860:	2302      	movs	r3, #2
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001864:	2307      	movs	r3, #7
 8001866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fa07 	bl	8003c80 <HAL_RCC_OscConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001878:	f000 f90c 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187c:	230f      	movs	r3, #15
 800187e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001880:	2302      	movs	r3, #2
 8001882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001888:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800188c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fc68 	bl	8004170 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018a6:	f000 f8f5 	bl	8001a94 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	@ 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_I2C1_Init+0x50>)
 80018c2:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <MX_I2C1_Init+0x54>)
 80018c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_I2C1_Init+0x50>)
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <MX_I2C1_Init+0x58>)
 80018ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_I2C1_Init+0x50>)
 80018da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_I2C1_Init+0x50>)
 80018fa:	f001 f99d 	bl	8002c38 <HAL_I2C_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001904:	f000 f8c6 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000031c 	.word	0x2000031c
 8001910:	40005400 	.word	0x40005400
 8001914:	000186a0 	.word	0x000186a0

08001918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <MX_USART2_UART_Init+0x50>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001924:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_USART2_UART_Init+0x4c>)
 8001950:	f003 f902 	bl	8004b58 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195a:	f000 f89b 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200003b8 	.word	0x200003b8
 8001968:	40004400 	.word	0x40004400

0800196c <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800197e:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <MX_ADC1_Init+0x98>)
 8001980:	4a21      	ldr	r2, [pc, #132]	@ (8001a08 <MX_ADC1_Init+0x9c>)
 8001982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001984:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <MX_ADC1_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800198a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a04 <MX_ADC1_Init+0x98>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001990:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <MX_ADC1_Init+0x98>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001996:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <MX_ADC1_Init+0x98>)
 8001998:	2201      	movs	r2, #1
 800199a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <MX_ADC1_Init+0x98>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019a4:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019aa:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019ac:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <MX_ADC1_Init+0xa0>)
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ca:	480e      	ldr	r0, [pc, #56]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019cc:	f000 fab6 	bl	8001f3c <HAL_ADC_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019d6:	f000 f85d 	bl	8001a94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <MX_ADC1_Init+0x98>)
 80019ec:	f000 fc88 	bl	8002300 <HAL_ADC_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019f6:	f000 f84d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000370 	.word	0x20000370
 8001a08:	40012000 	.word	0x40012000
 8001a0c:	0f000001 	.word	0x0f000001

08001a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <MX_GPIO_Init+0x4c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <MX_GPIO_Init+0x4c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <MX_GPIO_Init+0x4c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_GPIO_Init+0x4c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <MX_GPIO_Init+0x4c>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <MX_GPIO_Init+0x4c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f003 fcec 	bl	8005446 <osDelay>
 8001a6e:	e7fb      	b.n	8001a68 <StartDefaultTask+0x8>

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a82:	f000 fa3b 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <Error_Handler+0x8>

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_MspInit+0x54>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	4a11      	ldr	r2, [pc, #68]	@ (8001af4 <HAL_MspInit+0x54>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_MspInit+0x54>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_MspInit+0x54>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <HAL_MspInit+0x54>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <HAL_MspInit+0x54>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	f06f 0001 	mvn.w	r0, #1
 8001ae6:	f000 fee1 	bl	80028ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a17      	ldr	r2, [pc, #92]	@ (8001b74 <HAL_ADC_MspInit+0x7c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d127      	bne.n	8001b6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_ADC_MspInit+0x80>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a15      	ldr	r2, [pc, #84]	@ (8001b78 <HAL_ADC_MspInit+0x80>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_ADC_MspInit+0x80>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_ADC_MspInit+0x80>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <HAL_ADC_MspInit+0x80>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_ADC_MspInit+0x80>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b52:	2303      	movs	r3, #3
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <HAL_ADC_MspInit+0x84>)
 8001b66:	f000 fecb 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40012000 	.word	0x40012000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_I2C_MspInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12b      	bne.n	8001bfa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc2:	2312      	movs	r3, #18
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <HAL_I2C_MspInit+0x8c>)
 8001bda:	f000 fe91 	bl	8002900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_I2C_MspInit+0x88>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	@ 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40005400 	.word	0x40005400
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020400 	.word	0x40020400

08001c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <HAL_UART_MspInit+0x84>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d12b      	bne.n	8001c8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a17      	ldr	r2, [pc, #92]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_UART_MspInit+0x88>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <HAL_UART_MspInit+0x8c>)
 8001c86:	f000 fe3b 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40004400 	.word	0x40004400
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d74 <HAL_InitTick+0xd4>)
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d74 <HAL_InitTick+0xd4>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <HAL_InitTick+0xd4>)
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ccc:	f107 020c 	add.w	r2, r7, #12
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 fc6a 	bl	80045b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001cdc:	f002 fc54 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	4a23      	ldr	r2, [pc, #140]	@ (8001d78 <HAL_InitTick+0xd8>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0c9b      	lsrs	r3, r3, #18
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cf4:	4b21      	ldr	r3, [pc, #132]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001cf6:	4a22      	ldr	r2, [pc, #136]	@ (8001d80 <HAL_InitTick+0xe0>)
 8001cf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001cfc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d02:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d08:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d1a:	4818      	ldr	r0, [pc, #96]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001d1c:	f002 fc7a 	bl	8004614 <HAL_TIM_Base_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d11b      	bne.n	8001d66 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d2e:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <HAL_InitTick+0xdc>)
 8001d30:	f002 fcca 	bl	80046c8 <HAL_TIM_Base_Start_IT>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d111      	bne.n	8001d66 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d42:	2019      	movs	r0, #25
 8001d44:	f000 fdce 	bl	80028e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	d808      	bhi.n	8001d60 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	2019      	movs	r0, #25
 8001d54:	f000 fdaa 	bl	80028ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d58:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <HAL_InitTick+0xe4>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e002      	b.n	8001d66 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3730      	adds	r7, #48	@ 0x30
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	20000494 	.word	0x20000494
 8001d80:	40010000 	.word	0x40010000
 8001d84:	20000004 	.word	0x20000004

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <NMI_Handler+0x4>

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <MemManage_Handler+0x4>

08001da0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <UsageFault_Handler+0x4>

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dc6:	f002 fcef 	bl	80047a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000494 	.word	0x20000494

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f004 fe9a 	bl	8006b3c <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	@ (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	200004dc 	.word	0x200004dc
 8001e3c:	20004380 	.word	0x20004380

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e68:	f7ff ffea 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6e:	490d      	ldr	r1, [pc, #52]	@ (8001ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e84:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e92:	f004 fe59 	bl	8006b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff fc2b 	bl	80016f0 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ea8:	08007824 	.word	0x08007824
  ldr r2, =_sbss
 8001eac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001eb0:	20004380 	.word	0x20004380

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 fcd8 	bl	8002896 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	200f      	movs	r0, #15
 8001ee8:	f7ff feda 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fdd8 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	200004e0 	.word	0x200004e0

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200004e0 	.word	0x200004e0

08001f3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e033      	b.n	8001fba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fdcc 	bl	8001af8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f82:	f023 0302 	bic.w	r3, r3, #2
 8001f86:	f043 0202 	orr.w	r2, r3, #2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fad8 	bl	8002544 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001faa:	e001      	b.n	8001fb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start+0x1a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0b2      	b.n	8002144 <HAL_ADC_Start+0x180>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d018      	beq.n	8002026 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002004:	4b52      	ldr	r3, [pc, #328]	@ (8002150 <HAL_ADC_Start+0x18c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_ADC_Start+0x190>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9a      	lsrs	r2, r3, #18
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002018:	e002      	b.n	8002020 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3b01      	subs	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d17a      	bne.n	800212a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800205e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002072:	d106      	bne.n	8002082 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	f023 0206 	bic.w	r2, r3, #6
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002080:	e002      	b.n	8002088 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002090:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <HAL_ADC_Start+0x194>)
 8002092:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800209c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d12a      	bne.n	8002100 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a2b      	ldr	r2, [pc, #172]	@ (800215c <HAL_ADC_Start+0x198>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d015      	beq.n	80020e0 <HAL_ADC_Start+0x11c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a29      	ldr	r2, [pc, #164]	@ (8002160 <HAL_ADC_Start+0x19c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_Start+0x106>
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <HAL_ADC_Start+0x194>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a25      	ldr	r2, [pc, #148]	@ (8002164 <HAL_ADC_Start+0x1a0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d136      	bne.n	8002142 <HAL_ADC_Start+0x17e>
 80020d4:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <HAL_ADC_Start+0x194>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d130      	bne.n	8002142 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d129      	bne.n	8002142 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	e020      	b.n	8002142 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a15      	ldr	r2, [pc, #84]	@ (800215c <HAL_ADC_Start+0x198>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d11b      	bne.n	8002142 <HAL_ADC_Start+0x17e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d114      	bne.n	8002142 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e00b      	b.n	8002142 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	20000000 	.word	0x20000000
 8002154:	431bde83 	.word	0x431bde83
 8002158:	40012300 	.word	0x40012300
 800215c:	40012000 	.word	0x40012000
 8002160:	40012100 	.word	0x40012100
 8002164:	40012200 	.word	0x40012200

08002168 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_ADC_Stop+0x16>
 800217a:	2302      	movs	r3, #2
 800217c:	e021      	b.n	80021c2 <HAL_ADC_Stop+0x5a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ea:	d113      	bne.n	8002214 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e063      	b.n	80022dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002214:	f7ff fe86 	bl	8001f24 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800221a:	e021      	b.n	8002260 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002222:	d01d      	beq.n	8002260 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_ADC_PollForConversion+0x6c>
 800222a:	f7ff fe7b 	bl	8001f24 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d212      	bcs.n	8002260 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d00b      	beq.n	8002260 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e03d      	b.n	80022dc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d1d6      	bne.n	800221c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0212 	mvn.w	r2, #18
 8002276:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d123      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11f      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d111      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1c>
 8002318:	2302      	movs	r3, #2
 800231a:	e105      	b.n	8002528 <HAL_ADC_ConfigChannel+0x228>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b09      	cmp	r3, #9
 800232a:	d925      	bls.n	8002378 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	3b1e      	subs	r3, #30
 8002342:	2207      	movs	r2, #7
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68d9      	ldr	r1, [r3, #12]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4618      	mov	r0, r3
 8002364:	4603      	mov	r3, r0
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4403      	add	r3, r0
 800236a:	3b1e      	subs	r3, #30
 800236c:	409a      	lsls	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	e022      	b.n	80023be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	2207      	movs	r2, #7
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6919      	ldr	r1, [r3, #16]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4618      	mov	r0, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4403      	add	r3, r0
 80023b4:	409a      	lsls	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d824      	bhi.n	8002410 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b05      	subs	r3, #5
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b05      	subs	r3, #5
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	635a      	str	r2, [r3, #52]	@ 0x34
 800240e:	e04c      	b.n	80024aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d824      	bhi.n	8002462 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	3b23      	subs	r3, #35	@ 0x23
 800242a:	221f      	movs	r2, #31
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43da      	mvns	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	400a      	ands	r2, r1
 8002438:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3b23      	subs	r3, #35	@ 0x23
 8002454:	fa00 f203 	lsl.w	r2, r0, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002460:	e023      	b.n	80024aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	3b41      	subs	r3, #65	@ 0x41
 8002474:	221f      	movs	r2, #31
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	400a      	ands	r2, r1
 8002482:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3b41      	subs	r3, #65	@ 0x41
 800249e:	fa00 f203 	lsl.w	r2, r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024aa:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_ADC_ConfigChannel+0x234>)
 80024ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a21      	ldr	r2, [pc, #132]	@ (8002538 <HAL_ADC_ConfigChannel+0x238>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d109      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1cc>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d105      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	@ (8002538 <HAL_ADC_ConfigChannel+0x238>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d123      	bne.n	800251e <HAL_ADC_ConfigChannel+0x21e>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d003      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x1e6>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b11      	cmp	r3, #17
 80024e4:	d11b      	bne.n	800251e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d111      	bne.n	800251e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024fa:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_ADC_ConfigChannel+0x23c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a10      	ldr	r2, [pc, #64]	@ (8002540 <HAL_ADC_ConfigChannel+0x240>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	0c9a      	lsrs	r2, r3, #18
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002510:	e002      	b.n	8002518 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40012300 	.word	0x40012300
 8002538:	40012000 	.word	0x40012000
 800253c:	20000000 	.word	0x20000000
 8002540:	431bde83 	.word	0x431bde83

08002544 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800254c:	4b79      	ldr	r3, [pc, #484]	@ (8002734 <ADC_Init+0x1f0>)
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	431a      	orrs	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	021a      	lsls	r2, r3, #8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800259c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	4a58      	ldr	r2, [pc, #352]	@ (8002738 <ADC_Init+0x1f4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d022      	beq.n	8002622 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800260c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6899      	ldr	r1, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e00f      	b.n	8002642 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002640:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0202 	bic.w	r2, r2, #2
 8002650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7e1b      	ldrb	r3, [r3, #24]
 800265c:	005a      	lsls	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800268e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	3b01      	subs	r3, #1
 800269c:	035a      	lsls	r2, r3, #13
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	e007      	b.n	80026b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	051a      	lsls	r2, r3, #20
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6899      	ldr	r1, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026fa:	025a      	lsls	r2, r3, #9
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6899      	ldr	r1, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	029a      	lsls	r2, r3, #10
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40012300 	.word	0x40012300
 8002738:	0f000001 	.word	0x0f000001

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	@ (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <__NVIC_GetPriorityGrouping+0x18>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 0307 	and.w	r3, r3, #7
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db0b      	blt.n	80027ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4907      	ldr	r1, [pc, #28]	@ (80027d8 <__NVIC_EnableIRQ+0x38>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2001      	movs	r0, #1
 80027c2:	fa00 f202 	lsl.w	r2, r0, r2
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e100 	.word	0xe000e100

080027dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db0a      	blt.n	8002806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	490c      	ldr	r1, [pc, #48]	@ (8002828 <__NVIC_SetPriority+0x4c>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002804:	e00a      	b.n	800281c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4908      	ldr	r1, [pc, #32]	@ (800282c <__NVIC_SetPriority+0x50>)
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3b04      	subs	r3, #4
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	440b      	add	r3, r1
 800281a:	761a      	strb	r2, [r3, #24]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f1c3 0307 	rsb	r3, r3, #7
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf28      	it	cs
 800284e:	2304      	movcs	r3, #4
 8002850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <NVIC_EncodePriority+0x30>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3b03      	subs	r3, #3
 800285e:	e000      	b.n	8002862 <NVIC_EncodePriority+0x32>
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002878:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43d9      	mvns	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	4313      	orrs	r3, r2
         );
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	@ 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff4c 	bl	800273c <__NVIC_SetPriorityGrouping>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028be:	f7ff ff61 	bl	8002784 <__NVIC_GetPriorityGrouping>
 80028c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	6978      	ldr	r0, [r7, #20]
 80028ca:	f7ff ffb1 	bl	8002830 <NVIC_EncodePriority>
 80028ce:	4602      	mov	r2, r0
 80028d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff80 	bl	80027dc <__NVIC_SetPriority>
}
 80028dc:	bf00      	nop
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff54 	bl	80027a0 <__NVIC_EnableIRQ>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	@ 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e16b      	b.n	8002bf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 815a 	bne.w	8002bee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d005      	beq.n	8002952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294e:	2b02      	cmp	r3, #2
 8002950:	d130      	bne.n	80029b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002988:	2201      	movs	r2, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 0201 	and.w	r2, r3, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d017      	beq.n	80029f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80b4 	beq.w	8002bee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b60      	ldr	r3, [pc, #384]	@ (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a96:	4b5d      	ldr	r3, [pc, #372]	@ (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c10 <HAL_GPIO_Init+0x310>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	@ (8002c14 <HAL_GPIO_Init+0x314>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02b      	beq.n	8002b26 <HAL_GPIO_Init+0x226>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	@ (8002c18 <HAL_GPIO_Init+0x318>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d025      	beq.n	8002b22 <HAL_GPIO_Init+0x222>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a50      	ldr	r2, [pc, #320]	@ (8002c1c <HAL_GPIO_Init+0x31c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <HAL_GPIO_Init+0x21e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c20 <HAL_GPIO_Init+0x320>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d019      	beq.n	8002b1a <HAL_GPIO_Init+0x21a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4e      	ldr	r2, [pc, #312]	@ (8002c24 <HAL_GPIO_Init+0x324>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0x216>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4d      	ldr	r2, [pc, #308]	@ (8002c28 <HAL_GPIO_Init+0x328>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00d      	beq.n	8002b12 <HAL_GPIO_Init+0x212>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4c      	ldr	r2, [pc, #304]	@ (8002c2c <HAL_GPIO_Init+0x32c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x20e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	@ (8002c30 <HAL_GPIO_Init+0x330>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x20a>
 8002b06:	2307      	movs	r3, #7
 8002b08:	e00e      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	@ (8002c10 <HAL_GPIO_Init+0x310>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a32      	ldr	r2, [pc, #200]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b30      	ldr	r3, [pc, #192]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a27      	ldr	r2, [pc, #156]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9a:	4b26      	ldr	r3, [pc, #152]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be8:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <HAL_GPIO_Init+0x334>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae90 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12b      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe ff8e 	bl	8001b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f001 fc60 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a81      	ldr	r2, [pc, #516]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <HAL_I2C_Init+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a80      	ldr	r2, [pc, #512]	@ (8002eb0 <HAL_I2C_Init+0x278>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e006      	b.n	8002cca <HAL_I2C_Init+0x92>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8002eb4 <HAL_I2C_Init+0x27c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0e7      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a78      	ldr	r2, [pc, #480]	@ (8002eb8 <HAL_I2C_Init+0x280>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <HAL_I2C_Init+0xd4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e009      	b.n	8002d20 <HAL_I2C_Init+0xe8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a69      	ldr	r2, [pc, #420]	@ (8002ebc <HAL_I2C_Init+0x284>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	495c      	ldr	r1, [pc, #368]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d819      	bhi.n	8002d74 <HAL_I2C_Init+0x13c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e59      	subs	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d54:	400b      	ands	r3, r1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_I2C_Init+0x138>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1e59      	subs	r1, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	e051      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x168>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	813b      	strh	r3, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eda:	f7ff f823 	bl	8001f24 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	f040 80d9 	bne.w	80030a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2319      	movs	r3, #25
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	496d      	ldr	r1, [pc, #436]	@ (80030ac <HAL_I2C_Mem_Write+0x1ec>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fc8b 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Mem_Write+0x56>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e0c5      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d007      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2221      	movs	r2, #33	@ 0x21
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a3a      	ldr	r2, [r7, #32]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a4d      	ldr	r2, [pc, #308]	@ (80030b0 <HAL_I2C_Mem_Write+0x1f0>)
 8002f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f7e:	88f8      	ldrh	r0, [r7, #6]
 8002f80:	893a      	ldrh	r2, [r7, #8]
 8002f82:	8979      	ldrh	r1, [r7, #10]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fac2 	bl	8003518 <I2C_RequestMemoryWrite>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d052      	beq.n	8003040 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e081      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fd50 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Mem_Write+0x180>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1aa      	bne.n	8002f9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fd43 	bl	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e016      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	@ 0x30
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	817b      	strh	r3, [r7, #10]
 80030c6:	460b      	mov	r3, r1
 80030c8:	813b      	strh	r3, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ce:	f7fe ff29 	bl	8001f24 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	f040 8214 	bne.w	800350a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	2319      	movs	r3, #25
 80030e8:	2201      	movs	r2, #1
 80030ea:	497b      	ldr	r1, [pc, #492]	@ (80032d8 <HAL_I2C_Mem_Read+0x224>)
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fb91 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	e207      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2C_Mem_Read+0x56>
 8003106:	2302      	movs	r3, #2
 8003108:	e200      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d007      	beq.n	8003130 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2222      	movs	r2, #34	@ 0x22
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2240      	movs	r2, #64	@ 0x40
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a5b      	ldr	r2, [pc, #364]	@ (80032dc <HAL_I2C_Mem_Read+0x228>)
 8003170:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003172:	88f8      	ldrh	r0, [r7, #6]
 8003174:	893a      	ldrh	r2, [r7, #8]
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	4603      	mov	r3, r0
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa5e 	bl	8003644 <I2C_RequestMemoryRead>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1bc      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	623b      	str	r3, [r7, #32]
 80031ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e190      	b.n	80034e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d11b      	bne.n	8003202 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e170      	b.n	80034e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	2b02      	cmp	r3, #2
 8003208:	d11b      	bne.n	8003242 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003218:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	e150      	b.n	80034e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003258:	e144      	b.n	80034e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	2b03      	cmp	r3, #3
 8003260:	f200 80f1 	bhi.w	8003446 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	2b01      	cmp	r3, #1
 800326a:	d123      	bne.n	80032b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fc79 	bl	8003b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e145      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032b2:	e117      	b.n	80034e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d14e      	bne.n	800335a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c2:	2200      	movs	r2, #0
 80032c4:	4906      	ldr	r1, [pc, #24]	@ (80032e0 <HAL_I2C_Mem_Read+0x22c>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 faa4 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e11a      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
 80032d6:	bf00      	nop
 80032d8:	00100002 	.word	0x00100002
 80032dc:	ffff0000 	.word	0xffff0000
 80032e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003358:	e0c4      	b.n	80034e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003360:	2200      	movs	r2, #0
 8003362:	496c      	ldr	r1, [pc, #432]	@ (8003514 <HAL_I2C_Mem_Read+0x460>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa55 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0cb      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033bc:	2200      	movs	r2, #0
 80033be:	4955      	ldr	r1, [pc, #340]	@ (8003514 <HAL_I2C_Mem_Read+0x460>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fa27 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e09d      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003444:	e04e      	b.n	80034e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003448:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fb8c 	bl	8003b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e058      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d124      	bne.n	80034e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d107      	bne.n	80034b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f47f aeb6 	bne.w	800325a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3728      	adds	r7, #40	@ 0x28
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	00010004 	.word	0x00010004

08003518 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2200      	movs	r2, #0
 800354a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f960 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003568:	d103      	bne.n	8003572 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e05f      	b.n	8003636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	492d      	ldr	r1, [pc, #180]	@ (8003640 <I2C_RequestMemoryWrite+0x128>)
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f9bb 	bl	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e04c      	b.n	8003636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b4:	6a39      	ldr	r1, [r7, #32]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa46 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d107      	bne.n	80035da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e02b      	b.n	8003636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	611a      	str	r2, [r3, #16]
 80035ee:	e021      	b.n	8003634 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003600:	6a39      	ldr	r1, [r7, #32]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa20 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	2b04      	cmp	r3, #4
 8003614:	d107      	bne.n	8003626 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e005      	b.n	8003636 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800362a:	893b      	ldrh	r3, [r7, #8]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	00010002 	.word	0x00010002

08003644 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	817b      	strh	r3, [r7, #10]
 8003656:	460b      	mov	r3, r1
 8003658:	813b      	strh	r3, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800366c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800367c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	2200      	movs	r2, #0
 8003686:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f8c2 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a4:	d103      	bne.n	80036ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0aa      	b.n	8003808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	6a3a      	ldr	r2, [r7, #32]
 80036c6:	4952      	ldr	r1, [pc, #328]	@ (8003810 <I2C_RequestMemoryRead+0x1cc>)
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f91d 	bl	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e097      	b.n	8003808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f0:	6a39      	ldr	r1, [r7, #32]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f9a8 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	2b04      	cmp	r3, #4
 8003704:	d107      	bne.n	8003716 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003714:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e076      	b.n	8003808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003720:	893b      	ldrh	r3, [r7, #8]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]
 800372a:	e021      	b.n	8003770 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	b29b      	uxth	r3, r3
 8003732:	b2da      	uxtb	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800373a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800373c:	6a39      	ldr	r1, [r7, #32]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f982 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b04      	cmp	r3, #4
 8003750:	d107      	bne.n	8003762 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003760:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e050      	b.n	8003808 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003766:	893b      	ldrh	r3, [r7, #8]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003772:	6a39      	ldr	r1, [r7, #32]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f967 	bl	8003a48 <I2C_WaitOnTXEFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	2b04      	cmp	r3, #4
 8003786:	d107      	bne.n	8003798 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003796:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e035      	b.n	8003808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f82b 	bl	8003814 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d2:	d103      	bne.n	80037dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e013      	b.n	8003808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037e0:	897b      	ldrh	r3, [r7, #10]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	4906      	ldr	r1, [pc, #24]	@ (8003810 <I2C_RequestMemoryRead+0x1cc>)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f886 	bl	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	00010002 	.word	0x00010002

08003814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003824:	e048      	b.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800382c:	d044      	beq.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fe fb79 	bl	8001f24 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d139      	bne.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	0c1b      	lsrs	r3, r3, #16
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d10d      	bne.n	800386a <I2C_WaitOnFlagUntilTimeout+0x56>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	43da      	mvns	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	e00c      	b.n	8003884 <I2C_WaitOnFlagUntilTimeout+0x70>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	43da      	mvns	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	429a      	cmp	r2, r3
 8003888:	d116      	bne.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e023      	b.n	8003900 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d10d      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0xca>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	e00c      	b.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d093      	beq.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003916:	e071      	b.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003926:	d123      	bne.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003936:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f043 0204 	orr.w	r2, r3, #4
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e067      	b.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003976:	d041      	beq.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003978:	f7fe fad4 	bl	8001f24 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d302      	bcc.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d136      	bne.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10c      	bne.n	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e00b      	b.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e021      	b.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10c      	bne.n	8003a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4013      	ands	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e00b      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f af6d 	bne.w	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a54:	e034      	b.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f8e3 	bl	8003c22 <I2C_IsAcknowledgeFailed>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e034      	b.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a6c:	d028      	beq.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe fa59 	bl	8001f24 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11d      	bne.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8e:	2b80      	cmp	r3, #128	@ 0x80
 8003a90:	d016      	beq.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d1c3      	bne.n	8003a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ae4:	e034      	b.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f89b 	bl	8003c22 <I2C_IsAcknowledgeFailed>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e034      	b.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003afc:	d028      	beq.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fa11 	bl	8001f24 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11d      	bne.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d016      	beq.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e007      	b.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d1c3      	bne.n	8003ae6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b74:	e049      	b.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d119      	bne.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0210 	mvn.w	r2, #16
 8003b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e030      	b.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7fe f9b4 	bl	8001f24 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11d      	bne.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b40      	cmp	r3, #64	@ 0x40
 8003bda:	d016      	beq.n	8003c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e007      	b.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c14:	2b40      	cmp	r3, #64	@ 0x40
 8003c16:	d1ae      	bne.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c38:	d11b      	bne.n	8003c72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f043 0204 	orr.w	r2, r3, #4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e267      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d075      	beq.n	8003d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c9e:	4b88      	ldr	r3, [pc, #544]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003caa:	4b85      	ldr	r3, [pc, #532]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d112      	bne.n	8003cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb6:	4b82      	ldr	r3, [pc, #520]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc2:	d10b      	bne.n	8003cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d05b      	beq.n	8003d88 <HAL_RCC_OscConfig+0x108>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d157      	bne.n	8003d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e242      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce4:	d106      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x74>
 8003ce6:	4b76      	ldr	r3, [pc, #472]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a75      	ldr	r2, [pc, #468]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e01d      	b.n	8003d30 <HAL_RCC_OscConfig+0xb0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x98>
 8003cfe:	4b70      	ldr	r3, [pc, #448]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e00b      	b.n	8003d30 <HAL_RCC_OscConfig+0xb0>
 8003d18:	4b69      	ldr	r3, [pc, #420]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a68      	ldr	r2, [pc, #416]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b66      	ldr	r3, [pc, #408]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a65      	ldr	r2, [pc, #404]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d013      	beq.n	8003d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe f8f4 	bl	8001f24 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fe f8f0 	bl	8001f24 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	@ 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e207      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0xc0>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe f8e0 	bl	8001f24 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fe f8dc 	bl	8001f24 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	@ 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e1f3      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	4b51      	ldr	r3, [pc, #324]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0xe8>
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d063      	beq.n	8003e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d96:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d11c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dae:	4b44      	ldr	r3, [pc, #272]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d116      	bne.n	8003de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	4b41      	ldr	r3, [pc, #260]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x152>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e1c7      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4937      	ldr	r1, [pc, #220]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de6:	e03a      	b.n	8003e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d020      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df0:	4b34      	ldr	r3, [pc, #208]	@ (8003ec4 <HAL_RCC_OscConfig+0x244>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fe f895 	bl	8001f24 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfe:	f7fe f891 	bl	8001f24 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e1a8      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e10:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4b28      	ldr	r3, [pc, #160]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4925      	ldr	r1, [pc, #148]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]
 8003e30:	e015      	b.n	8003e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e32:	4b24      	ldr	r3, [pc, #144]	@ (8003ec4 <HAL_RCC_OscConfig+0x244>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fe f874 	bl	8001f24 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e40:	f7fe f870 	bl	8001f24 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e187      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d036      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d016      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e72:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <HAL_RCC_OscConfig+0x248>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e78:	f7fe f854 	bl	8001f24 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e80:	f7fe f850 	bl	8001f24 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e167      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_OscConfig+0x240>)
 8003e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x200>
 8003e9e:	e01b      	b.n	8003ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea0:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <HAL_RCC_OscConfig+0x248>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe f83d 	bl	8001f24 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eac:	e00e      	b.n	8003ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fe f839 	bl	8001f24 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d907      	bls.n	8003ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e150      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	42470000 	.word	0x42470000
 8003ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	4b88      	ldr	r3, [pc, #544]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ea      	bne.n	8003eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8097 	beq.w	8004014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eea:	4b81      	ldr	r3, [pc, #516]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10f      	bne.n	8003f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	4b7d      	ldr	r3, [pc, #500]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	4a7c      	ldr	r2, [pc, #496]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f06:	4b7a      	ldr	r3, [pc, #488]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b77      	ldr	r3, [pc, #476]	@ (80040f4 <HAL_RCC_OscConfig+0x474>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d118      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f22:	4b74      	ldr	r3, [pc, #464]	@ (80040f4 <HAL_RCC_OscConfig+0x474>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a73      	ldr	r2, [pc, #460]	@ (80040f4 <HAL_RCC_OscConfig+0x474>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fff9 	bl	8001f24 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fd fff5 	bl	8001f24 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e10c      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b6a      	ldr	r3, [pc, #424]	@ (80040f4 <HAL_RCC_OscConfig+0x474>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x2ea>
 8003f5c:	4b64      	ldr	r3, [pc, #400]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	4a63      	ldr	r2, [pc, #396]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f68:	e01c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x324>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x30c>
 8003f72:	4b5f      	ldr	r3, [pc, #380]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a5e      	ldr	r2, [pc, #376]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f82:	4a5b      	ldr	r2, [pc, #364]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x324>
 8003f8c:	4b58      	ldr	r3, [pc, #352]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4a57      	ldr	r2, [pc, #348]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f98:	4b55      	ldr	r3, [pc, #340]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9c:	4a54      	ldr	r2, [pc, #336]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	f023 0304 	bic.w	r3, r3, #4
 8003fa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d015      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fd ffba 	bl	8001f24 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fd ffb6 	bl	8001f24 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e0cb      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fca:	4b49      	ldr	r3, [pc, #292]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ee      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x334>
 8003fd6:	e014      	b.n	8004002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7fd ffa4 	bl	8001f24 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fd ffa0 	bl	8001f24 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e0b5      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1ee      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004008:	4b39      	ldr	r3, [pc, #228]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	4a38      	ldr	r2, [pc, #224]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 800400e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004012:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a1 	beq.w	8004160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800401e:	4b34      	ldr	r3, [pc, #208]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	d05c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d141      	bne.n	80040b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <HAL_RCC_OscConfig+0x478>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fd ff74 	bl	8001f24 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004040:	f7fd ff70 	bl	8001f24 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e087      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	4b27      	ldr	r3, [pc, #156]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	3b01      	subs	r3, #1
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	491b      	ldr	r1, [pc, #108]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004088:	4b1b      	ldr	r3, [pc, #108]	@ (80040f8 <HAL_RCC_OscConfig+0x478>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fd ff49 	bl	8001f24 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004096:	f7fd ff45 	bl	8001f24 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e05c      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x416>
 80040b4:	e054      	b.n	8004160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <HAL_RCC_OscConfig+0x478>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fd ff32 	bl	8001f24 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd ff2e 	bl	8001f24 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e045      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x444>
 80040e2:	e03d      	b.n	8004160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e038      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40007000 	.word	0x40007000
 80040f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040fc:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <HAL_RCC_OscConfig+0x4ec>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d028      	beq.n	800415c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d121      	bne.n	800415c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d11a      	bne.n	800415c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800412c:	4013      	ands	r3, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004134:	4293      	cmp	r3, r2
 8004136:	d111      	bne.n	800415c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004142:	085b      	lsrs	r3, r3, #1
 8004144:	3b01      	subs	r3, #1
 8004146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d107      	bne.n	800415c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800

08004170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0cc      	b.n	800431e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b68      	ldr	r3, [pc, #416]	@ (8004328 <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d90c      	bls.n	80041ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b65      	ldr	r3, [pc, #404]	@ (8004328 <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b63      	ldr	r3, [pc, #396]	@ (8004328 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0b8      	b.n	800431e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c4:	4b59      	ldr	r3, [pc, #356]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4a58      	ldr	r2, [pc, #352]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041dc:	4b53      	ldr	r3, [pc, #332]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4a52      	ldr	r2, [pc, #328]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b50      	ldr	r3, [pc, #320]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	494d      	ldr	r1, [pc, #308]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d044      	beq.n	8004290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b47      	ldr	r3, [pc, #284]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d119      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e07f      	b.n	800431e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d003      	beq.n	800422e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422a:	2b03      	cmp	r3, #3
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	4b3f      	ldr	r3, [pc, #252]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e06f      	b.n	800431e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	4b3b      	ldr	r3, [pc, #236]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e067      	b.n	800431e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424e:	4b37      	ldr	r3, [pc, #220]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f023 0203 	bic.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4934      	ldr	r1, [pc, #208]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004260:	f7fd fe60 	bl	8001f24 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	e00a      	b.n	800427e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004268:	f7fd fe5c 	bl	8001f24 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e04f      	b.n	800431e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	4b2b      	ldr	r3, [pc, #172]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 020c 	and.w	r2, r3, #12
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	429a      	cmp	r2, r3
 800428e:	d1eb      	bne.n	8004268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004290:	4b25      	ldr	r3, [pc, #148]	@ (8004328 <HAL_RCC_ClockConfig+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d20c      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b22      	ldr	r3, [pc, #136]	@ (8004328 <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b20      	ldr	r3, [pc, #128]	@ (8004328 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e032      	b.n	800431e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4916      	ldr	r1, [pc, #88]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	490e      	ldr	r1, [pc, #56]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042f6:	f000 f821 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	490a      	ldr	r1, [pc, #40]	@ (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004308:	5ccb      	ldrb	r3, [r1, r3]
 800430a:	fa22 f303 	lsr.w	r3, r2, r3
 800430e:	4a09      	ldr	r2, [pc, #36]	@ (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004312:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <HAL_RCC_ClockConfig+0x1c8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fcc2 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40023c00 	.word	0x40023c00
 800432c:	40023800 	.word	0x40023800
 8004330:	080077c8 	.word	0x080077c8
 8004334:	20000000 	.word	0x20000000
 8004338:	20000004 	.word	0x20000004

0800433c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b094      	sub	sp, #80	@ 0x50
 8004342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	647b      	str	r3, [r7, #68]	@ 0x44
 8004348:	2300      	movs	r3, #0
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434c:	2300      	movs	r3, #0
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004354:	4b79      	ldr	r3, [pc, #484]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b08      	cmp	r3, #8
 800435e:	d00d      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x40>
 8004360:	2b08      	cmp	r3, #8
 8004362:	f200 80e1 	bhi.w	8004528 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x34>
 800436a:	2b04      	cmp	r3, #4
 800436c:	d003      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0x3a>
 800436e:	e0db      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x204>)
 8004372:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004374:	e0db      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004376:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x208>)
 8004378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800437a:	e0d8      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800437c:	4b6f      	ldr	r3, [pc, #444]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004384:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004386:	4b6d      	ldr	r3, [pc, #436]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d063      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004392:	4b6a      	ldr	r3, [pc, #424]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	2200      	movs	r2, #0
 800439a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800439c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a6:	2300      	movs	r3, #0
 80043a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	0159      	lsls	r1, r3, #5
 80043bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c0:	0150      	lsls	r0, r2, #5
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4621      	mov	r1, r4
 80043c8:	1a51      	subs	r1, r2, r1
 80043ca:	6139      	str	r1, [r7, #16]
 80043cc:	4629      	mov	r1, r5
 80043ce:	eb63 0301 	sbc.w	r3, r3, r1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e0:	4659      	mov	r1, fp
 80043e2:	018b      	lsls	r3, r1, #6
 80043e4:	4651      	mov	r1, sl
 80043e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ea:	4651      	mov	r1, sl
 80043ec:	018a      	lsls	r2, r1, #6
 80043ee:	4651      	mov	r1, sl
 80043f0:	ebb2 0801 	subs.w	r8, r2, r1
 80043f4:	4659      	mov	r1, fp
 80043f6:	eb63 0901 	sbc.w	r9, r3, r1
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800440a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800440e:	4690      	mov	r8, r2
 8004410:	4699      	mov	r9, r3
 8004412:	4623      	mov	r3, r4
 8004414:	eb18 0303 	adds.w	r3, r8, r3
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	462b      	mov	r3, r5
 800441c:	eb49 0303 	adc.w	r3, r9, r3
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800442e:	4629      	mov	r1, r5
 8004430:	024b      	lsls	r3, r1, #9
 8004432:	4621      	mov	r1, r4
 8004434:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004438:	4621      	mov	r1, r4
 800443a:	024a      	lsls	r2, r1, #9
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004442:	2200      	movs	r2, #0
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800444c:	f7fb ff68 	bl	8000320 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004458:	e058      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445a:	4b38      	ldr	r3, [pc, #224]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	2200      	movs	r2, #0
 8004462:	4618      	mov	r0, r3
 8004464:	4611      	mov	r1, r2
 8004466:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004470:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	f04f 0000 	mov.w	r0, #0
 800447c:	f04f 0100 	mov.w	r1, #0
 8004480:	0159      	lsls	r1, r3, #5
 8004482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004486:	0150      	lsls	r0, r2, #5
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4641      	mov	r1, r8
 800448e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004492:	4649      	mov	r1, r9
 8004494:	eb63 0b01 	sbc.w	fp, r3, r1
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044ac:	ebb2 040a 	subs.w	r4, r2, sl
 80044b0:	eb63 050b 	sbc.w	r5, r3, fp
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	00eb      	lsls	r3, r5, #3
 80044be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c2:	00e2      	lsls	r2, r4, #3
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	18e3      	adds	r3, r4, r3
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	464b      	mov	r3, r9
 80044d0:	eb45 0303 	adc.w	r3, r5, r3
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044e2:	4629      	mov	r1, r5
 80044e4:	028b      	lsls	r3, r1, #10
 80044e6:	4621      	mov	r1, r4
 80044e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044ec:	4621      	mov	r1, r4
 80044ee:	028a      	lsls	r2, r1, #10
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f6:	2200      	movs	r2, #0
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	61fa      	str	r2, [r7, #28]
 80044fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004500:	f7fb ff0e 	bl	8000320 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4613      	mov	r3, r2
 800450a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	3301      	adds	r3, #1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800451c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800451e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004526:	e002      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x204>)
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800452c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004530:	4618      	mov	r0, r3
 8004532:	3750      	adds	r7, #80	@ 0x50
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	00f42400 	.word	0x00f42400
 8004544:	007a1200 	.word	0x007a1200

08004548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCC_GetHCLKFreq+0x14>)
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000000 	.word	0x20000000

08004560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004564:	f7ff fff0 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	0a9b      	lsrs	r3, r3, #10
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	4903      	ldr	r1, [pc, #12]	@ (8004584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40023800 	.word	0x40023800
 8004584:	080077d8 	.word	0x080077d8

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800458c:	f7ff ffdc 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0b5b      	lsrs	r3, r3, #13
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4903      	ldr	r1, [pc, #12]	@ (80045ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	080077d8 	.word	0x080077d8

080045b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	220f      	movs	r2, #15
 80045be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045c0:	4b12      	ldr	r3, [pc, #72]	@ (800460c <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0203 	and.w	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045cc:	4b0f      	ldr	r3, [pc, #60]	@ (800460c <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045d8:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045e4:	4b09      	ldr	r3, [pc, #36]	@ (800460c <HAL_RCC_GetClockConfig+0x5c>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	08db      	lsrs	r3, r3, #3
 80045ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <HAL_RCC_GetClockConfig+0x60>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0207 	and.w	r2, r3, #7
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	601a      	str	r2, [r3, #0]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800
 8004610:	40023c00 	.word	0x40023c00

08004614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e041      	b.n	80046aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f839 	bl	80046b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 f9c0 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d001      	beq.n	80046e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e04e      	b.n	800477e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a23      	ldr	r2, [pc, #140]	@ (800478c <HAL_TIM_Base_Start_IT+0xc4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d022      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x80>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470a:	d01d      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x80>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1f      	ldr	r2, [pc, #124]	@ (8004790 <HAL_TIM_Base_Start_IT+0xc8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d018      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x80>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1e      	ldr	r2, [pc, #120]	@ (8004794 <HAL_TIM_Base_Start_IT+0xcc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d013      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x80>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <HAL_TIM_Base_Start_IT+0xd0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00e      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x80>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <HAL_TIM_Base_Start_IT+0xd4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d009      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x80>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d004      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x80>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d111      	bne.n	800476c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b06      	cmp	r3, #6
 8004758:	d010      	beq.n	800477c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476a:	e007      	b.n	800477c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40010000 	.word	0x40010000
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800
 8004798:	40000c00 	.word	0x40000c00
 800479c:	40010400 	.word	0x40010400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40001800 	.word	0x40001800

080047a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d020      	beq.n	800480c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0202 	mvn.w	r2, #2
 80047dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8d2 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8c4 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8d5 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0204 	mvn.w	r2, #4
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8ac 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f89e 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f8af 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0208 	mvn.w	r2, #8
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2204      	movs	r2, #4
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f886 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f878 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f889 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0210 	mvn.w	r2, #16
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2208      	movs	r2, #8
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f860 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f852 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f863 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0201 	mvn.w	r2, #1
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd f8ae 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f906 	bl	8004b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f834 	bl	80049c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0220 	mvn.w	r2, #32
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8d8 	bl	8004b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a46      	ldr	r2, [pc, #280]	@ (8004b04 <TIM_Base_SetConfig+0x12c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f6:	d00f      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a43      	ldr	r2, [pc, #268]	@ (8004b08 <TIM_Base_SetConfig+0x130>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a42      	ldr	r2, [pc, #264]	@ (8004b0c <TIM_Base_SetConfig+0x134>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a41      	ldr	r2, [pc, #260]	@ (8004b10 <TIM_Base_SetConfig+0x138>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a40      	ldr	r2, [pc, #256]	@ (8004b14 <TIM_Base_SetConfig+0x13c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d108      	bne.n	8004a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <TIM_Base_SetConfig+0x12c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d02b      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d027      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a32      	ldr	r2, [pc, #200]	@ (8004b08 <TIM_Base_SetConfig+0x130>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d023      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a31      	ldr	r2, [pc, #196]	@ (8004b0c <TIM_Base_SetConfig+0x134>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d01f      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a30      	ldr	r2, [pc, #192]	@ (8004b10 <TIM_Base_SetConfig+0x138>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01b      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a2f      	ldr	r2, [pc, #188]	@ (8004b14 <TIM_Base_SetConfig+0x13c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d017      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b18 <TIM_Base_SetConfig+0x140>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2d      	ldr	r2, [pc, #180]	@ (8004b1c <TIM_Base_SetConfig+0x144>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00f      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b20 <TIM_Base_SetConfig+0x148>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2b      	ldr	r2, [pc, #172]	@ (8004b24 <TIM_Base_SetConfig+0x14c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b28 <TIM_Base_SetConfig+0x150>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a29      	ldr	r2, [pc, #164]	@ (8004b2c <TIM_Base_SetConfig+0x154>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a10      	ldr	r2, [pc, #64]	@ (8004b04 <TIM_Base_SetConfig+0x12c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_Base_SetConfig+0xf8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a12      	ldr	r2, [pc, #72]	@ (8004b14 <TIM_Base_SetConfig+0x13c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d103      	bne.n	8004ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d105      	bne.n	8004af6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	611a      	str	r2, [r3, #16]
  }
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00
 8004b14:	40010400 	.word	0x40010400
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40014400 	.word	0x40014400
 8004b20:	40014800 	.word	0x40014800
 8004b24:	40001800 	.word	0x40001800
 8004b28:	40001c00 	.word	0x40001c00
 8004b2c:	40002000 	.word	0x40002000

08004b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e042      	b.n	8004bf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fd f846 	bl	8001c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	@ 0x24
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f973 	bl	8004e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	@ 0x28
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d175      	bne.n	8004d04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <HAL_UART_Transmit+0x2c>
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e06e      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2221      	movs	r2, #33	@ 0x21
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c36:	f7fd f975 	bl	8001f24 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c50:	d108      	bne.n	8004c64 <HAL_UART_Transmit+0x6c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e003      	b.n	8004c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c6c:	e02e      	b.n	8004ccc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	@ 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f848 	bl	8004d0e <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e03a      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e007      	b.n	8004cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1cb      	bne.n	8004c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2140      	movs	r1, #64	@ 0x40
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f814 	bl	8004d0e <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e006      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e000      	b.n	8004d06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d04:	2302      	movs	r3, #2
  }
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1e:	e03b      	b.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d26:	d037      	beq.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d28:	f7fd f8fc 	bl	8001f24 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e03a      	b.n	8004db8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d023      	beq.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b80      	cmp	r3, #128	@ 0x80
 8004d54:	d020      	beq.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b40      	cmp	r3, #64	@ 0x40
 8004d5a:	d01d      	beq.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d116      	bne.n	8004d98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f81d 	bl	8004dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e00f      	b.n	8004db8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4013      	ands	r3, r2
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d0b4      	beq.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b095      	sub	sp, #84	@ 0x54
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004de8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f023 0301 	bic.w	r3, r3, #1
 8004e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e5      	bne.n	8004dfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d119      	bne.n	8004e6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e58:	61ba      	str	r2, [r7, #24]
 8004e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6979      	ldr	r1, [r7, #20]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	613b      	str	r3, [r7, #16]
   return(result);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e7a:	bf00      	nop
 8004e7c:	3754      	adds	r7, #84	@ 0x54
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e8c:	b0c0      	sub	sp, #256	@ 0x100
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	ea40 0301 	orr.w	r3, r0, r1
 8004eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ee0:	f021 010c 	bic.w	r1, r1, #12
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f02:	6999      	ldr	r1, [r3, #24]
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	ea40 0301 	orr.w	r3, r0, r1
 8004f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b8f      	ldr	r3, [pc, #572]	@ (8005154 <UART_SetConfig+0x2cc>)
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d005      	beq.n	8004f28 <UART_SetConfig+0xa0>
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b8d      	ldr	r3, [pc, #564]	@ (8005158 <UART_SetConfig+0x2d0>)
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d104      	bne.n	8004f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7ff fb2e 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f30:	e003      	b.n	8004f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f32:	f7ff fb15 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8004f36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f44:	f040 810c 	bne.w	8005160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	1891      	adds	r1, r2, r2
 8004f60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f62:	415b      	adcs	r3, r3
 8004f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	eb12 0801 	adds.w	r8, r2, r1
 8004f70:	4629      	mov	r1, r5
 8004f72:	eb43 0901 	adc.w	r9, r3, r1
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f8a:	4690      	mov	r8, r2
 8004f8c:	4699      	mov	r9, r3
 8004f8e:	4623      	mov	r3, r4
 8004f90:	eb18 0303 	adds.w	r3, r8, r3
 8004f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f98:	462b      	mov	r3, r5
 8004f9a:	eb49 0303 	adc.w	r3, r9, r3
 8004f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	18db      	adds	r3, r3, r3
 8004fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	eb42 0303 	adc.w	r3, r2, r3
 8004fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fcc:	f7fb f9a8 	bl	8000320 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b61      	ldr	r3, [pc, #388]	@ (800515c <UART_SetConfig+0x2d4>)
 8004fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	011c      	lsls	r4, r3, #4
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005000:	4641      	mov	r1, r8
 8005002:	eb12 0a01 	adds.w	sl, r2, r1
 8005006:	4649      	mov	r1, r9
 8005008:	eb43 0b01 	adc.w	fp, r3, r1
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800501c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005020:	4692      	mov	sl, r2
 8005022:	469b      	mov	fp, r3
 8005024:	4643      	mov	r3, r8
 8005026:	eb1a 0303 	adds.w	r3, sl, r3
 800502a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800502e:	464b      	mov	r3, r9
 8005030:	eb4b 0303 	adc.w	r3, fp, r3
 8005034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800504c:	460b      	mov	r3, r1
 800504e:	18db      	adds	r3, r3, r3
 8005050:	643b      	str	r3, [r7, #64]	@ 0x40
 8005052:	4613      	mov	r3, r2
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	647b      	str	r3, [r7, #68]	@ 0x44
 800505a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800505e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005062:	f7fb f95d 	bl	8000320 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4611      	mov	r1, r2
 800506c:	4b3b      	ldr	r3, [pc, #236]	@ (800515c <UART_SetConfig+0x2d4>)
 800506e:	fba3 2301 	umull	r2, r3, r3, r1
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2264      	movs	r2, #100	@ 0x64
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	1acb      	subs	r3, r1, r3
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005082:	4b36      	ldr	r3, [pc, #216]	@ (800515c <UART_SetConfig+0x2d4>)
 8005084:	fba3 2302 	umull	r2, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005090:	441c      	add	r4, r3
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800509c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050ac:	415b      	adcs	r3, r3
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050e8:	464b      	mov	r3, r9
 80050ea:	460a      	mov	r2, r1
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005108:	460b      	mov	r3, r1
 800510a:	18db      	adds	r3, r3, r3
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800510e:	4613      	mov	r3, r2
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800511a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800511e:	f7fb f8ff 	bl	8000320 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <UART_SetConfig+0x2d4>)
 8005128:	fba3 1302 	umull	r1, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2164      	movs	r1, #100	@ 0x64
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	3332      	adds	r3, #50	@ 0x32
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <UART_SetConfig+0x2d4>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	f003 0207 	and.w	r2, r3, #7
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4422      	add	r2, r4
 800514e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005150:	e106      	b.n	8005360 <UART_SetConfig+0x4d8>
 8005152:	bf00      	nop
 8005154:	40011000 	.word	0x40011000
 8005158:	40011400 	.word	0x40011400
 800515c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005164:	2200      	movs	r2, #0
 8005166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800516a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800516e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005172:	4642      	mov	r2, r8
 8005174:	464b      	mov	r3, r9
 8005176:	1891      	adds	r1, r2, r2
 8005178:	6239      	str	r1, [r7, #32]
 800517a:	415b      	adcs	r3, r3
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
 800517e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005182:	4641      	mov	r1, r8
 8005184:	1854      	adds	r4, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb43 0501 	adc.w	r5, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	00eb      	lsls	r3, r5, #3
 8005196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519a:	00e2      	lsls	r2, r4, #3
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	18e3      	adds	r3, r4, r3
 80051a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051a8:	464b      	mov	r3, r9
 80051aa:	eb45 0303 	adc.w	r3, r5, r3
 80051ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051ce:	4629      	mov	r1, r5
 80051d0:	008b      	lsls	r3, r1, #2
 80051d2:	4621      	mov	r1, r4
 80051d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d8:	4621      	mov	r1, r4
 80051da:	008a      	lsls	r2, r1, #2
 80051dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051e0:	f7fb f89e 	bl	8000320 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4b60      	ldr	r3, [pc, #384]	@ (800536c <UART_SetConfig+0x4e4>)
 80051ea:	fba3 2302 	umull	r2, r3, r3, r2
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	011c      	lsls	r4, r3, #4
 80051f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	1891      	adds	r1, r2, r2
 800520a:	61b9      	str	r1, [r7, #24]
 800520c:	415b      	adcs	r3, r3
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005214:	4641      	mov	r1, r8
 8005216:	1851      	adds	r1, r2, r1
 8005218:	6139      	str	r1, [r7, #16]
 800521a:	4649      	mov	r1, r9
 800521c:	414b      	adcs	r3, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800522c:	4659      	mov	r1, fp
 800522e:	00cb      	lsls	r3, r1, #3
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005236:	4651      	mov	r1, sl
 8005238:	00ca      	lsls	r2, r1, #3
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	4603      	mov	r3, r0
 8005240:	4642      	mov	r2, r8
 8005242:	189b      	adds	r3, r3, r2
 8005244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005248:	464b      	mov	r3, r9
 800524a:	460a      	mov	r2, r1
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800525e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800526c:	4649      	mov	r1, r9
 800526e:	008b      	lsls	r3, r1, #2
 8005270:	4641      	mov	r1, r8
 8005272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005276:	4641      	mov	r1, r8
 8005278:	008a      	lsls	r2, r1, #2
 800527a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800527e:	f7fb f84f 	bl	8000320 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4611      	mov	r1, r2
 8005288:	4b38      	ldr	r3, [pc, #224]	@ (800536c <UART_SetConfig+0x4e4>)
 800528a:	fba3 2301 	umull	r2, r3, r3, r1
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	2264      	movs	r2, #100	@ 0x64
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	1acb      	subs	r3, r1, r3
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	3332      	adds	r3, #50	@ 0x32
 800529c:	4a33      	ldr	r2, [pc, #204]	@ (800536c <UART_SetConfig+0x4e4>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a8:	441c      	add	r4, r3
 80052aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ae:	2200      	movs	r2, #0
 80052b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80052b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80052b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052fa:	464b      	mov	r3, r9
 80052fc:	460a      	mov	r2, r1
 80052fe:	eb42 0303 	adc.w	r3, r2, r3
 8005302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	663b      	str	r3, [r7, #96]	@ 0x60
 800530e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800531c:	4649      	mov	r1, r9
 800531e:	008b      	lsls	r3, r1, #2
 8005320:	4641      	mov	r1, r8
 8005322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005326:	4641      	mov	r1, r8
 8005328:	008a      	lsls	r2, r1, #2
 800532a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800532e:	f7fa fff7 	bl	8000320 <__aeabi_uldivmod>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <UART_SetConfig+0x4e4>)
 8005338:	fba3 1302 	umull	r1, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	2164      	movs	r1, #100	@ 0x64
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	3332      	adds	r3, #50	@ 0x32
 800534a:	4a08      	ldr	r2, [pc, #32]	@ (800536c <UART_SetConfig+0x4e4>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4422      	add	r2, r4
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005366:	46bd      	mov	sp, r7
 8005368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536c:	51eb851f 	.word	0x51eb851f

08005370 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800537e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005382:	2b84      	cmp	r3, #132	@ 0x84
 8005384:	d005      	beq.n	8005392 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005386:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	3303      	adds	r3, #3
 8005390:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005392:	68fb      	ldr	r3, [r7, #12]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80053a4:	f000 fb7c 	bl	8005aa0 <vTaskStartScheduler>
  
  return osOK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	bd80      	pop	{r7, pc}

080053ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b0:	b089      	sub	sp, #36	@ 0x24
 80053b2:	af04      	add	r7, sp, #16
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <osThreadCreate+0x54>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01c      	beq.n	8005402 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685c      	ldr	r4, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691e      	ldr	r6, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff ffc8 	bl	8005370 <makeFreeRtosPriority>
 80053e0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053ea:	9202      	str	r2, [sp, #8]
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	9100      	str	r1, [sp, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4632      	mov	r2, r6
 80053f4:	4629      	mov	r1, r5
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 f8ed 	bl	80055d6 <xTaskCreateStatic>
 80053fc:	4603      	mov	r3, r0
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e01c      	b.n	800543c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685c      	ldr	r4, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800540e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ffaa 	bl	8005370 <makeFreeRtosPriority>
 800541c:	4602      	mov	r2, r0
 800541e:	f107 030c 	add.w	r3, r7, #12
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	9200      	str	r2, [sp, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	4632      	mov	r2, r6
 800542a:	4629      	mov	r1, r5
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f932 	bl	8005696 <xTaskCreate>
 8005432:	4603      	mov	r3, r0
 8005434:	2b01      	cmp	r3, #1
 8005436:	d001      	beq.n	800543c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005446 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <osDelay+0x16>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	e000      	b.n	800545e <osDelay+0x18>
 800545c:	2301      	movs	r3, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fae8 	bl	8005a34 <vTaskDelay>
  
  return osOK;
 8005464:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f103 0208 	add.w	r2, r3, #8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005486:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f103 0208 	add.w	r2, r3, #8
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005526:	d103      	bne.n	8005530 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e00c      	b.n	800554a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3308      	adds	r3, #8
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e002      	b.n	800553e <vListInsert+0x2e>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d2f6      	bcs.n	8005538 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6892      	ldr	r2, [r2, #8]
 8005598:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6852      	ldr	r2, [r2, #4]
 80055a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d103      	bne.n	80055b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1e5a      	subs	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08e      	sub	sp, #56	@ 0x38
 80055da:	af04      	add	r7, sp, #16
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	e7fd      	b.n	80055fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	61fb      	str	r3, [r7, #28]
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005620:	23a0      	movs	r3, #160	@ 0xa0
 8005622:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2ba0      	cmp	r3, #160	@ 0xa0
 8005628:	d00b      	beq.n	8005642 <xTaskCreateStatic+0x6c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	61bb      	str	r3, [r7, #24]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005642:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005646:	2b00      	cmp	r3, #0
 8005648:	d01e      	beq.n	8005688 <xTaskCreateStatic+0xb2>
 800564a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005658:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	2202      	movs	r2, #2
 800565e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005662:	2300      	movs	r3, #0
 8005664:	9303      	str	r3, [sp, #12]
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	f107 0314 	add.w	r3, r7, #20
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f850 	bl	8005720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005680:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005682:	f000 f8ed 	bl	8005860 <prvAddNewTaskToReadyList>
 8005686:	e001      	b.n	800568c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800568c:	697b      	ldr	r3, [r7, #20]
	}
 800568e:	4618      	mov	r0, r3
 8005690:	3728      	adds	r7, #40	@ 0x28
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005696:	b580      	push	{r7, lr}
 8005698:	b08c      	sub	sp, #48	@ 0x30
 800569a:	af04      	add	r7, sp, #16
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 ff8c 	bl	80065c8 <pvPortMalloc>
 80056b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056b8:	20a0      	movs	r0, #160	@ 0xa0
 80056ba:	f000 ff85 	bl	80065c8 <pvPortMalloc>
 80056be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80056cc:	e005      	b.n	80056da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	f001 f848 	bl	8006764 <vPortFree>
 80056d4:	e001      	b.n	80056da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d017      	beq.n	8005710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9303      	str	r3, [sp, #12]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	9302      	str	r3, [sp, #8]
 80056f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f80e 	bl	8005720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005704:	69f8      	ldr	r0, [r7, #28]
 8005706:	f000 f8ab 	bl	8005860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800570a:	2301      	movs	r3, #1
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e002      	b.n	8005716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005716:	69bb      	ldr	r3, [r7, #24]
	}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005738:	3b01      	subs	r3, #1
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f023 0307 	bic.w	r3, r3, #7
 8005746:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	617b      	str	r3, [r7, #20]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01f      	beq.n	80057b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e012      	b.n	800579c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	7819      	ldrb	r1, [r3, #0]
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	3334      	adds	r3, #52	@ 0x34
 8005786:	460a      	mov	r2, r1
 8005788:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3301      	adds	r3, #1
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d9e9      	bls.n	8005776 <prvInitialiseNewTask+0x56>
 80057a2:	e000      	b.n	80057a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80057a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057ae:	e003      	b.n	80057b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d901      	bls.n	80057c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057be:	2306      	movs	r3, #6
 80057c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	2200      	movs	r2, #0
 80057d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	3304      	adds	r3, #4
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fe68 	bl	80054ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	3318      	adds	r3, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fe63 	bl	80054ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	f1c3 0207 	rsb	r2, r3, #7
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005800:	2200      	movs	r2, #0
 8005802:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	2200      	movs	r2, #0
 800580a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	334c      	adds	r3, #76	@ 0x4c
 8005812:	224c      	movs	r2, #76	@ 0x4c
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f932 	bl	8006a80 <memset>
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <prvInitialiseNewTask+0x134>)
 8005820:	651a      	str	r2, [r3, #80]	@ 0x50
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	4a0c      	ldr	r2, [pc, #48]	@ (8005858 <prvInitialiseNewTask+0x138>)
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	4a0c      	ldr	r2, [pc, #48]	@ (800585c <prvInitialiseNewTask+0x13c>)
 800582c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	68f9      	ldr	r1, [r7, #12]
 8005832:	69b8      	ldr	r0, [r7, #24]
 8005834:	f000 fcba 	bl	80061ac <pxPortInitialiseStack>
 8005838:	4602      	mov	r2, r0
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800583e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800584a:	bf00      	nop
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20004238 	.word	0x20004238
 8005858:	200042a0 	.word	0x200042a0
 800585c:	20004308 	.word	0x20004308

08005860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005868:	f000 fdce 	bl	8006408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800586c:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <prvAddNewTaskToReadyList+0xb8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	4a29      	ldr	r2, [pc, #164]	@ (8005918 <prvAddNewTaskToReadyList+0xb8>)
 8005874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005876:	4b29      	ldr	r3, [pc, #164]	@ (800591c <prvAddNewTaskToReadyList+0xbc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d109      	bne.n	8005892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800587e:	4a27      	ldr	r2, [pc, #156]	@ (800591c <prvAddNewTaskToReadyList+0xbc>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005884:	4b24      	ldr	r3, [pc, #144]	@ (8005918 <prvAddNewTaskToReadyList+0xb8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d110      	bne.n	80058ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800588c:	f000 fb64 	bl	8005f58 <prvInitialiseTaskLists>
 8005890:	e00d      	b.n	80058ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005892:	4b23      	ldr	r3, [pc, #140]	@ (8005920 <prvAddNewTaskToReadyList+0xc0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800589a:	4b20      	ldr	r3, [pc, #128]	@ (800591c <prvAddNewTaskToReadyList+0xbc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d802      	bhi.n	80058ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058a8:	4a1c      	ldr	r2, [pc, #112]	@ (800591c <prvAddNewTaskToReadyList+0xbc>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005924 <prvAddNewTaskToReadyList+0xc4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005924 <prvAddNewTaskToReadyList+0xc4>)
 80058b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	4b19      	ldr	r3, [pc, #100]	@ (8005928 <prvAddNewTaskToReadyList+0xc8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	4a18      	ldr	r2, [pc, #96]	@ (8005928 <prvAddNewTaskToReadyList+0xc8>)
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4a15      	ldr	r2, [pc, #84]	@ (800592c <prvAddNewTaskToReadyList+0xcc>)
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f7ff fdf1 	bl	80054c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058e6:	f000 fdc1 	bl	800646c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <prvAddNewTaskToReadyList+0xc0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00e      	beq.n	8005910 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058f2:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <prvAddNewTaskToReadyList+0xbc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d207      	bcs.n	8005910 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <prvAddNewTaskToReadyList+0xd0>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	200005e4 	.word	0x200005e4
 800591c:	200004e4 	.word	0x200004e4
 8005920:	200005f0 	.word	0x200005f0
 8005924:	20000600 	.word	0x20000600
 8005928:	200005ec 	.word	0x200005ec
 800592c:	200004e8 	.word	0x200004e8
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	@ 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <vTaskDelayUntil+0x2c>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	617b      	str	r3, [r7, #20]
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <vTaskDelayUntil+0x4a>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	613b      	str	r3, [r7, #16]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800597e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a28 <vTaskDelayUntil+0xf4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <vTaskDelayUntil+0x6a>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800599e:	f000 f8e9 	bl	8005b74 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80059a2:	4b22      	ldr	r3, [pc, #136]	@ (8005a2c <vTaskDelayUntil+0xf8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	4413      	add	r3, r2
 80059b0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a3a      	ldr	r2, [r7, #32]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d20b      	bcs.n	80059d4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d211      	bcs.n	80059ea <vTaskDelayUntil+0xb6>
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d90d      	bls.n	80059ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d2:	e00a      	b.n	80059ea <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d303      	bcc.n	80059e6 <vTaskDelayUntil+0xb2>
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d901      	bls.n	80059ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80059e6:	2301      	movs	r3, #1
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2100      	movs	r1, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fb6e 	bl	80060e0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005a04:	f000 f8c4 	bl	8005b90 <xTaskResumeAll>
 8005a08:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8005a10:	4b07      	ldr	r3, [pc, #28]	@ (8005a30 <vTaskDelayUntil+0xfc>)
 8005a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a20:	bf00      	nop
 8005a22:	3728      	adds	r7, #40	@ 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	2000060c 	.word	0x2000060c
 8005a2c:	200005e8 	.word	0x200005e8
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d018      	beq.n	8005a78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a46:	4b14      	ldr	r3, [pc, #80]	@ (8005a98 <vTaskDelay+0x64>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <vTaskDelay+0x32>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	60bb      	str	r3, [r7, #8]
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	e7fd      	b.n	8005a62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a66:	f000 f885 	bl	8005b74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fb37 	bl	80060e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a72:	f000 f88d 	bl	8005b90 <xTaskResumeAll>
 8005a76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a7e:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <vTaskDelay+0x68>)
 8005a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000060c 	.word	0x2000060c
 8005a9c:	e000ed04 	.word	0xe000ed04

08005aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	@ 0x28
 8005aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aae:	463a      	mov	r2, r7
 8005ab0:	1d39      	adds	r1, r7, #4
 8005ab2:	f107 0308 	add.w	r3, r7, #8
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fb fc74 	bl	80013a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	9202      	str	r2, [sp, #8]
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2300      	movs	r3, #0
 8005acc:	460a      	mov	r2, r1
 8005ace:	4921      	ldr	r1, [pc, #132]	@ (8005b54 <vTaskStartScheduler+0xb4>)
 8005ad0:	4821      	ldr	r0, [pc, #132]	@ (8005b58 <vTaskStartScheduler+0xb8>)
 8005ad2:	f7ff fd80 	bl	80055d6 <xTaskCreateStatic>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4a20      	ldr	r2, [pc, #128]	@ (8005b5c <vTaskStartScheduler+0xbc>)
 8005ada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005adc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b5c <vTaskStartScheduler+0xbc>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e001      	b.n	8005aee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d11b      	bne.n	8005b2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	613b      	str	r3, [r7, #16]
}
 8005b06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b08:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <vTaskStartScheduler+0xc0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	334c      	adds	r3, #76	@ 0x4c
 8005b0e:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <vTaskStartScheduler+0xc4>)
 8005b10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b12:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <vTaskStartScheduler+0xc8>)
 8005b14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b1a:	4b14      	ldr	r3, [pc, #80]	@ (8005b6c <vTaskStartScheduler+0xcc>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b20:	4b13      	ldr	r3, [pc, #76]	@ (8005b70 <vTaskStartScheduler+0xd0>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b26:	f000 fbcb 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b2a:	e00f      	b.n	8005b4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b32:	d10b      	bne.n	8005b4c <vTaskStartScheduler+0xac>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <vTaskStartScheduler+0xa8>
}
 8005b4c:	bf00      	nop
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	080077c0 	.word	0x080077c0
 8005b58:	08005f29 	.word	0x08005f29
 8005b5c:	20000608 	.word	0x20000608
 8005b60:	200004e4 	.word	0x200004e4
 8005b64:	20000010 	.word	0x20000010
 8005b68:	20000604 	.word	0x20000604
 8005b6c:	200005f0 	.word	0x200005f0
 8005b70:	200005e8 	.word	0x200005e8

08005b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b78:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <vTaskSuspendAll+0x18>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	4a03      	ldr	r2, [pc, #12]	@ (8005b8c <vTaskSuspendAll+0x18>)
 8005b80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	2000060c 	.word	0x2000060c

08005b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b9e:	4b42      	ldr	r3, [pc, #264]	@ (8005ca8 <xTaskResumeAll+0x118>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <xTaskResumeAll+0x2e>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	603b      	str	r3, [r7, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	e7fd      	b.n	8005bba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bbe:	f000 fc23 	bl	8006408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bc2:	4b39      	ldr	r3, [pc, #228]	@ (8005ca8 <xTaskResumeAll+0x118>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	4a37      	ldr	r2, [pc, #220]	@ (8005ca8 <xTaskResumeAll+0x118>)
 8005bca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bcc:	4b36      	ldr	r3, [pc, #216]	@ (8005ca8 <xTaskResumeAll+0x118>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d161      	bne.n	8005c98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bd4:	4b35      	ldr	r3, [pc, #212]	@ (8005cac <xTaskResumeAll+0x11c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d05d      	beq.n	8005c98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bdc:	e02e      	b.n	8005c3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bde:	4b34      	ldr	r3, [pc, #208]	@ (8005cb0 <xTaskResumeAll+0x120>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3318      	adds	r3, #24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fcc9 	bl	8005582 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fcc4 	bl	8005582 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	2201      	movs	r2, #1
 8005c00:	409a      	lsls	r2, r3
 8005c02:	4b2c      	ldr	r3, [pc, #176]	@ (8005cb4 <xTaskResumeAll+0x124>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	4a2a      	ldr	r2, [pc, #168]	@ (8005cb4 <xTaskResumeAll+0x124>)
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4a27      	ldr	r2, [pc, #156]	@ (8005cb8 <xTaskResumeAll+0x128>)
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7ff fc50 	bl	80054c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2c:	4b23      	ldr	r3, [pc, #140]	@ (8005cbc <xTaskResumeAll+0x12c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c36:	4b22      	ldr	r3, [pc, #136]	@ (8005cc0 <xTaskResumeAll+0x130>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb0 <xTaskResumeAll+0x120>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1cc      	bne.n	8005bde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c4a:	f000 fa29 	bl	80060a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <xTaskResumeAll+0x134>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d010      	beq.n	8005c7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c5a:	f000 f847 	bl	8005cec <xTaskIncrementTick>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c64:	4b16      	ldr	r3, [pc, #88]	@ (8005cc0 <xTaskResumeAll+0x130>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f1      	bne.n	8005c5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c76:	4b13      	ldr	r3, [pc, #76]	@ (8005cc4 <xTaskResumeAll+0x134>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c7c:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <xTaskResumeAll+0x130>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c88:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc8 <xTaskResumeAll+0x138>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c98:	f000 fbe8 	bl	800646c <vPortExitCritical>

	return xAlreadyYielded;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2000060c 	.word	0x2000060c
 8005cac:	200005e4 	.word	0x200005e4
 8005cb0:	200005a4 	.word	0x200005a4
 8005cb4:	200005ec 	.word	0x200005ec
 8005cb8:	200004e8 	.word	0x200004e8
 8005cbc:	200004e4 	.word	0x200004e4
 8005cc0:	200005f8 	.word	0x200005f8
 8005cc4:	200005f4 	.word	0x200005f4
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cd2:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <xTaskGetTickCount+0x1c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cd8:	687b      	ldr	r3, [r7, #4]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	200005e8 	.word	0x200005e8

08005cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8005e34 <xTaskIncrementTick+0x148>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 808f 	bne.w	8005e1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d00:	4b4d      	ldr	r3, [pc, #308]	@ (8005e38 <xTaskIncrementTick+0x14c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d08:	4a4b      	ldr	r2, [pc, #300]	@ (8005e38 <xTaskIncrementTick+0x14c>)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d121      	bne.n	8005d58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d14:	4b49      	ldr	r3, [pc, #292]	@ (8005e3c <xTaskIncrementTick+0x150>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <xTaskIncrementTick+0x46>
 8005d36:	4b41      	ldr	r3, [pc, #260]	@ (8005e3c <xTaskIncrementTick+0x150>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	4b40      	ldr	r3, [pc, #256]	@ (8005e40 <xTaskIncrementTick+0x154>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a3e      	ldr	r2, [pc, #248]	@ (8005e3c <xTaskIncrementTick+0x150>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	4a3e      	ldr	r2, [pc, #248]	@ (8005e40 <xTaskIncrementTick+0x154>)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e44 <xTaskIncrementTick+0x158>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	4a3c      	ldr	r2, [pc, #240]	@ (8005e44 <xTaskIncrementTick+0x158>)
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	f000 f9a4 	bl	80060a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d58:	4b3b      	ldr	r3, [pc, #236]	@ (8005e48 <xTaskIncrementTick+0x15c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d348      	bcc.n	8005df4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d62:	4b36      	ldr	r3, [pc, #216]	@ (8005e3c <xTaskIncrementTick+0x150>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6c:	4b36      	ldr	r3, [pc, #216]	@ (8005e48 <xTaskIncrementTick+0x15c>)
 8005d6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d72:	601a      	str	r2, [r3, #0]
					break;
 8005d74:	e03e      	b.n	8005df4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d76:	4b31      	ldr	r3, [pc, #196]	@ (8005e3c <xTaskIncrementTick+0x150>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d203      	bcs.n	8005d96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e48 <xTaskIncrementTick+0x15c>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d94:	e02e      	b.n	8005df4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fbf1 	bl	8005582 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3318      	adds	r3, #24
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fbe8 	bl	8005582 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	2201      	movs	r2, #1
 8005db8:	409a      	lsls	r2, r3
 8005dba:	4b24      	ldr	r3, [pc, #144]	@ (8005e4c <xTaskIncrementTick+0x160>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	4a22      	ldr	r2, [pc, #136]	@ (8005e4c <xTaskIncrementTick+0x160>)
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <xTaskIncrementTick+0x164>)
 8005dd2:	441a      	add	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f7ff fb74 	bl	80054c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e54 <xTaskIncrementTick+0x168>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3b9      	bcc.n	8005d62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005dee:	2301      	movs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005df2:	e7b6      	b.n	8005d62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005df4:	4b17      	ldr	r3, [pc, #92]	@ (8005e54 <xTaskIncrementTick+0x168>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dfa:	4915      	ldr	r1, [pc, #84]	@ (8005e50 <xTaskIncrementTick+0x164>)
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d901      	bls.n	8005e10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e10:	4b11      	ldr	r3, [pc, #68]	@ (8005e58 <xTaskIncrementTick+0x16c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e004      	b.n	8005e28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e5c <xTaskIncrementTick+0x170>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	4a0d      	ldr	r2, [pc, #52]	@ (8005e5c <xTaskIncrementTick+0x170>)
 8005e26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e28:	697b      	ldr	r3, [r7, #20]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	2000060c 	.word	0x2000060c
 8005e38:	200005e8 	.word	0x200005e8
 8005e3c:	2000059c 	.word	0x2000059c
 8005e40:	200005a0 	.word	0x200005a0
 8005e44:	200005fc 	.word	0x200005fc
 8005e48:	20000604 	.word	0x20000604
 8005e4c:	200005ec 	.word	0x200005ec
 8005e50:	200004e8 	.word	0x200004e8
 8005e54:	200004e4 	.word	0x200004e4
 8005e58:	200005f8 	.word	0x200005f8
 8005e5c:	200005f4 	.word	0x200005f4

08005e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e66:	4b2a      	ldr	r3, [pc, #168]	@ (8005f10 <vTaskSwitchContext+0xb0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e6e:	4b29      	ldr	r3, [pc, #164]	@ (8005f14 <vTaskSwitchContext+0xb4>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e74:	e045      	b.n	8005f02 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005e76:	4b27      	ldr	r3, [pc, #156]	@ (8005f14 <vTaskSwitchContext+0xb4>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7c:	4b26      	ldr	r3, [pc, #152]	@ (8005f18 <vTaskSwitchContext+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	fab3 f383 	clz	r3, r3
 8005e88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	f1c3 031f 	rsb	r3, r3, #31
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	4922      	ldr	r1, [pc, #136]	@ (8005f1c <vTaskSwitchContext+0xbc>)
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <vTaskSwitchContext+0x5e>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	607b      	str	r3, [r7, #4]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <vTaskSwitchContext+0x5a>
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4a14      	ldr	r2, [pc, #80]	@ (8005f1c <vTaskSwitchContext+0xbc>)
 8005eca:	4413      	add	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d104      	bne.n	8005eee <vTaskSwitchContext+0x8e>
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f20 <vTaskSwitchContext+0xc0>)
 8005ef6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ef8:	4b09      	ldr	r3, [pc, #36]	@ (8005f20 <vTaskSwitchContext+0xc0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	334c      	adds	r3, #76	@ 0x4c
 8005efe:	4a09      	ldr	r2, [pc, #36]	@ (8005f24 <vTaskSwitchContext+0xc4>)
 8005f00:	6013      	str	r3, [r2, #0]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	2000060c 	.word	0x2000060c
 8005f14:	200005f8 	.word	0x200005f8
 8005f18:	200005ec 	.word	0x200005ec
 8005f1c:	200004e8 	.word	0x200004e8
 8005f20:	200004e4 	.word	0x200004e4
 8005f24:	20000010 	.word	0x20000010

08005f28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f30:	f000 f852 	bl	8005fd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f34:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <prvIdleTask+0x28>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d9f9      	bls.n	8005f30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f3c:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <prvIdleTask+0x2c>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f4c:	e7f0      	b.n	8005f30 <prvIdleTask+0x8>
 8005f4e:	bf00      	nop
 8005f50:	200004e8 	.word	0x200004e8
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f5e:	2300      	movs	r3, #0
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	e00c      	b.n	8005f7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4a12      	ldr	r2, [pc, #72]	@ (8005fb8 <prvInitialiseTaskLists+0x60>)
 8005f70:	4413      	add	r3, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fa7b 	bl	800546e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b06      	cmp	r3, #6
 8005f82:	d9ef      	bls.n	8005f64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f84:	480d      	ldr	r0, [pc, #52]	@ (8005fbc <prvInitialiseTaskLists+0x64>)
 8005f86:	f7ff fa72 	bl	800546e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f8a:	480d      	ldr	r0, [pc, #52]	@ (8005fc0 <prvInitialiseTaskLists+0x68>)
 8005f8c:	f7ff fa6f 	bl	800546e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f90:	480c      	ldr	r0, [pc, #48]	@ (8005fc4 <prvInitialiseTaskLists+0x6c>)
 8005f92:	f7ff fa6c 	bl	800546e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f96:	480c      	ldr	r0, [pc, #48]	@ (8005fc8 <prvInitialiseTaskLists+0x70>)
 8005f98:	f7ff fa69 	bl	800546e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f9c:	480b      	ldr	r0, [pc, #44]	@ (8005fcc <prvInitialiseTaskLists+0x74>)
 8005f9e:	f7ff fa66 	bl	800546e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd0 <prvInitialiseTaskLists+0x78>)
 8005fa4:	4a05      	ldr	r2, [pc, #20]	@ (8005fbc <prvInitialiseTaskLists+0x64>)
 8005fa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd4 <prvInitialiseTaskLists+0x7c>)
 8005faa:	4a05      	ldr	r2, [pc, #20]	@ (8005fc0 <prvInitialiseTaskLists+0x68>)
 8005fac:	601a      	str	r2, [r3, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200004e8 	.word	0x200004e8
 8005fbc:	20000574 	.word	0x20000574
 8005fc0:	20000588 	.word	0x20000588
 8005fc4:	200005a4 	.word	0x200005a4
 8005fc8:	200005b8 	.word	0x200005b8
 8005fcc:	200005d0 	.word	0x200005d0
 8005fd0:	2000059c 	.word	0x2000059c
 8005fd4:	200005a0 	.word	0x200005a0

08005fd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fde:	e019      	b.n	8006014 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fe0:	f000 fa12 	bl	8006408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe4:	4b10      	ldr	r3, [pc, #64]	@ (8006028 <prvCheckTasksWaitingTermination+0x50>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fac6 	bl	8005582 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <prvCheckTasksWaitingTermination+0x54>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800602c <prvCheckTasksWaitingTermination+0x54>)
 8005ffe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006000:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	4a0a      	ldr	r2, [pc, #40]	@ (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006008:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800600a:	f000 fa2f 	bl	800646c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f810 	bl	8006034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006014:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <prvCheckTasksWaitingTermination+0x58>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e1      	bne.n	8005fe0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200005b8 	.word	0x200005b8
 800602c:	200005e4 	.word	0x200005e4
 8006030:	200005cc 	.word	0x200005cc

08006034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	334c      	adds	r3, #76	@ 0x4c
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fd25 	bl	8006a90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800604c:	2b00      	cmp	r3, #0
 800604e:	d108      	bne.n	8006062 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fb85 	bl	8006764 <vPortFree>
				vPortFree( pxTCB );
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fb82 	bl	8006764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006060:	e019      	b.n	8006096 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006068:	2b01      	cmp	r3, #1
 800606a:	d103      	bne.n	8006074 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb79 	bl	8006764 <vPortFree>
	}
 8006072:	e010      	b.n	8006096 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800607a:	2b02      	cmp	r3, #2
 800607c:	d00b      	beq.n	8006096 <prvDeleteTCB+0x62>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	e7fd      	b.n	8006092 <prvDeleteTCB+0x5e>
	}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a6:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <prvResetNextTaskUnblockTime+0x38>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <prvResetNextTaskUnblockTime+0x3c>)
 80060b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060b8:	e008      	b.n	80060cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ba:	4b07      	ldr	r3, [pc, #28]	@ (80060d8 <prvResetNextTaskUnblockTime+0x38>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	4a04      	ldr	r2, [pc, #16]	@ (80060dc <prvResetNextTaskUnblockTime+0x3c>)
 80060ca:	6013      	str	r3, [r2, #0]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	2000059c 	.word	0x2000059c
 80060dc:	20000604 	.word	0x20000604

080060e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ea:	4b29      	ldr	r3, [pc, #164]	@ (8006190 <prvAddCurrentTaskToDelayedList+0xb0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f0:	4b28      	ldr	r3, [pc, #160]	@ (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fa43 	bl	8005582 <uxListRemove>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10b      	bne.n	800611a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006102:	4b24      	ldr	r3, [pc, #144]	@ (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	2201      	movs	r2, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43da      	mvns	r2, r3
 8006110:	4b21      	ldr	r3, [pc, #132]	@ (8006198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4013      	ands	r3, r2
 8006116:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006118:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006120:	d10a      	bne.n	8006138 <prvAddCurrentTaskToDelayedList+0x58>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006128:	4b1a      	ldr	r3, [pc, #104]	@ (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	481a      	ldr	r0, [pc, #104]	@ (800619c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006132:	f7ff f9c9 	bl	80054c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006136:	e026      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006140:	4b14      	ldr	r3, [pc, #80]	@ (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	429a      	cmp	r2, r3
 800614e:	d209      	bcs.n	8006164 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006150:	4b13      	ldr	r3, [pc, #76]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b0f      	ldr	r3, [pc, #60]	@ (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7ff f9d7 	bl	8005510 <vListInsert>
}
 8006162:	e010      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006164:	4b0f      	ldr	r3, [pc, #60]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b0a      	ldr	r3, [pc, #40]	@ (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7ff f9cd 	bl	8005510 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006176:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d202      	bcs.n	8006186 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006180:	4a09      	ldr	r2, [pc, #36]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6013      	str	r3, [r2, #0]
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200005e8 	.word	0x200005e8
 8006194:	200004e4 	.word	0x200004e4
 8006198:	200005ec 	.word	0x200005ec
 800619c:	200005d0 	.word	0x200005d0
 80061a0:	200005a0 	.word	0x200005a0
 80061a4:	2000059c 	.word	0x2000059c
 80061a8:	20000604 	.word	0x20000604

080061ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3b04      	subs	r3, #4
 80061bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3b04      	subs	r3, #4
 80061da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006210 <pxPortInitialiseStack+0x64>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3b14      	subs	r3, #20
 80061e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f06f 0202 	mvn.w	r2, #2
 80061fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3b20      	subs	r3, #32
 8006200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	08006215 	.word	0x08006215

08006214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800621e:	4b13      	ldr	r3, [pc, #76]	@ (800626c <prvTaskExitError+0x58>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006226:	d00b      	beq.n	8006240 <prvTaskExitError+0x2c>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <prvTaskExitError+0x28>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60bb      	str	r3, [r7, #8]
}
 8006252:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006254:	bf00      	nop
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0fc      	beq.n	8006256 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	2000000c 	.word	0x2000000c

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	200004e4 	.word	0x200004e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	@ (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b47      	ldr	r3, [pc, #284]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a47      	ldr	r2, [pc, #284]	@ (80063e8 <xPortStartScheduler+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10b      	bne.n	80062e8 <xPortStartScheduler+0x28>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e8:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3f      	ldr	r2, [pc, #252]	@ (80063ec <xPortStartScheduler+0x12c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d10b      	bne.n	800630a <xPortStartScheduler+0x4a>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800630a:	4b39      	ldr	r3, [pc, #228]	@ (80063f0 <xPortStartScheduler+0x130>)
 800630c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	22ff      	movs	r2, #255	@ 0xff
 800631a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4b31      	ldr	r3, [pc, #196]	@ (80063f4 <xPortStartScheduler+0x134>)
 8006330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006332:	4b31      	ldr	r3, [pc, #196]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006334:	2207      	movs	r2, #7
 8006336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006338:	e009      	b.n	800634e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800633a:	4b2f      	ldr	r3, [pc, #188]	@ (80063f8 <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a2d      	ldr	r2, [pc, #180]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d0ef      	beq.n	800633a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800635a:	4b27      	ldr	r3, [pc, #156]	@ (80063f8 <xPortStartScheduler+0x138>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1c3 0307 	rsb	r3, r3, #7
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00b      	beq.n	800637e <xPortStartScheduler+0xbe>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60bb      	str	r3, [r7, #8]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800637e:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006388:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <xPortStartScheduler+0x138>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006390:	4a19      	ldr	r2, [pc, #100]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800639c:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <xPortStartScheduler+0x13c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063a8:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a13      	ldr	r2, [pc, #76]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063b4:	f000 f8da 	bl	800656c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063b8:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <xPortStartScheduler+0x140>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063be:	f000 f8f9 	bl	80065b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063c2:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ce:	f7ff ff63 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063d2:	f7ff fd45 	bl	8005e60 <vTaskSwitchContext>
	prvTaskExitError();
 80063d6:	f7ff ff1d 	bl	8006214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	e000ed00 	.word	0xe000ed00
 80063e8:	410fc271 	.word	0x410fc271
 80063ec:	410fc270 	.word	0x410fc270
 80063f0:	e000e400 	.word	0xe000e400
 80063f4:	20000610 	.word	0x20000610
 80063f8:	20000614 	.word	0x20000614
 80063fc:	e000ed20 	.word	0xe000ed20
 8006400:	2000000c 	.word	0x2000000c
 8006404:	e000ef34 	.word	0xe000ef34

08006408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006422:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <vPortEnterCritical+0x5c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	4a0e      	ldr	r2, [pc, #56]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800642c:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d110      	bne.n	8006456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006434:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <vPortEnterCritical+0x60>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <vPortEnterCritical+0x4e>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <vPortEnterCritical+0x4a>
	}
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	2000000c 	.word	0x2000000c
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <vPortExitCritical+0x26>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	607b      	str	r3, [r7, #4]
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	e7fd      	b.n	800648e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006492:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	4a08      	ldr	r2, [pc, #32]	@ (80064bc <vPortExitCritical+0x50>)
 800649a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800649c:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <vPortExitCritical+0x50>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <vPortExitCritical+0x44>
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	2000000c 	.word	0x2000000c

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b15      	ldr	r3, [pc, #84]	@ (8006520 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f01e 0f10 	tst.w	lr, #16
 80064d0:	bf08      	it	eq
 80064d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064e4:	f380 8811 	msr	BASEPRI, r0
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f7ff fcb6 	bl	8005e60 <vTaskSwitchContext>
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f380 8811 	msr	BASEPRI, r0
 80064fc:	bc09      	pop	{r0, r3}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f01e 0f10 	tst.w	lr, #16
 800650a:	bf08      	it	eq
 800650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006510:	f380 8809 	msr	PSP, r0
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst>:
 8006520:	200004e4 	.word	0x200004e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006542:	f7ff fbd3 	bl	8005cec <xTaskIncrementTick>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <SysTick_Handler+0x40>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <vPortSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <vPortSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	@ (80065ac <vPortSetupTimerInterrupt+0x40>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <vPortSetupTimerInterrupt+0x44>)
 800658a:	3b01      	subs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800658e:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	20000000 	.word	0x20000000
 80065ac:	10624dd3 	.word	0x10624dd3
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	@ 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065d4:	f7ff face 	bl	8005b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065d8:	4b5c      	ldr	r3, [pc, #368]	@ (800674c <pvPortMalloc+0x184>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065e0:	f000 f924 	bl	800682c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006750 <pvPortMalloc+0x188>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4013      	ands	r3, r2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 8095 	bne.w	800671c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d01e      	beq.n	8006636 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065f8:	2208      	movs	r2, #8
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	2b00      	cmp	r3, #0
 8006608:	d015      	beq.n	8006636 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f023 0307 	bic.w	r3, r3, #7
 8006610:	3308      	adds	r3, #8
 8006612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <pvPortMalloc+0x6e>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	617b      	str	r3, [r7, #20]
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	e7fd      	b.n	8006632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d06f      	beq.n	800671c <pvPortMalloc+0x154>
 800663c:	4b45      	ldr	r3, [pc, #276]	@ (8006754 <pvPortMalloc+0x18c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	429a      	cmp	r2, r3
 8006644:	d86a      	bhi.n	800671c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006646:	4b44      	ldr	r3, [pc, #272]	@ (8006758 <pvPortMalloc+0x190>)
 8006648:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800664a:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <pvPortMalloc+0x190>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006650:	e004      	b.n	800665c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d903      	bls.n	800666e <pvPortMalloc+0xa6>
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f1      	bne.n	8006652 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800666e:	4b37      	ldr	r3, [pc, #220]	@ (800674c <pvPortMalloc+0x184>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006674:	429a      	cmp	r2, r3
 8006676:	d051      	beq.n	800671c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2208      	movs	r2, #8
 800667e:	4413      	add	r3, r2
 8006680:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	1ad2      	subs	r2, r2, r3
 8006692:	2308      	movs	r3, #8
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	429a      	cmp	r2, r3
 8006698:	d920      	bls.n	80066dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800669a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <pvPortMalloc+0xfc>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	613b      	str	r3, [r7, #16]
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	1ad2      	subs	r2, r2, r3
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066d6:	69b8      	ldr	r0, [r7, #24]
 80066d8:	f000 f90a 	bl	80068f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006754 <pvPortMalloc+0x18c>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006754 <pvPortMalloc+0x18c>)
 80066e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006754 <pvPortMalloc+0x18c>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b1b      	ldr	r3, [pc, #108]	@ (800675c <pvPortMalloc+0x194>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d203      	bcs.n	80066fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066f6:	4b17      	ldr	r3, [pc, #92]	@ (8006754 <pvPortMalloc+0x18c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a18      	ldr	r2, [pc, #96]	@ (800675c <pvPortMalloc+0x194>)
 80066fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	4b13      	ldr	r3, [pc, #76]	@ (8006750 <pvPortMalloc+0x188>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	431a      	orrs	r2, r3
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006712:	4b13      	ldr	r3, [pc, #76]	@ (8006760 <pvPortMalloc+0x198>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a11      	ldr	r2, [pc, #68]	@ (8006760 <pvPortMalloc+0x198>)
 800671a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800671c:	f7ff fa38 	bl	8005b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <pvPortMalloc+0x17a>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	60fb      	str	r3, [r7, #12]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <pvPortMalloc+0x176>
	return pvReturn;
 8006742:	69fb      	ldr	r3, [r7, #28]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3728      	adds	r7, #40	@ 0x28
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20004220 	.word	0x20004220
 8006750:	20004234 	.word	0x20004234
 8006754:	20004224 	.word	0x20004224
 8006758:	20004218 	.word	0x20004218
 800675c:	20004228 	.word	0x20004228
 8006760:	2000422c 	.word	0x2000422c

08006764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d04f      	beq.n	8006816 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006776:	2308      	movs	r3, #8
 8006778:	425b      	negs	r3, r3
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	4b25      	ldr	r3, [pc, #148]	@ (8006820 <vPortFree+0xbc>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10b      	bne.n	80067aa <vPortFree+0x46>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60fb      	str	r3, [r7, #12]
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <vPortFree+0x66>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60bb      	str	r3, [r7, #8]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	4b14      	ldr	r3, [pc, #80]	@ (8006820 <vPortFree+0xbc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01e      	beq.n	8006816 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11a      	bne.n	8006816 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006820 <vPortFree+0xbc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	401a      	ands	r2, r3
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067f0:	f7ff f9c0 	bl	8005b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006824 <vPortFree+0xc0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4413      	add	r3, r2
 80067fe:	4a09      	ldr	r2, [pc, #36]	@ (8006824 <vPortFree+0xc0>)
 8006800:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006802:	6938      	ldr	r0, [r7, #16]
 8006804:	f000 f874 	bl	80068f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006808:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <vPortFree+0xc4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	4a06      	ldr	r2, [pc, #24]	@ (8006828 <vPortFree+0xc4>)
 8006810:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006812:	f7ff f9bd 	bl	8005b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006816:	bf00      	nop
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20004234 	.word	0x20004234
 8006824:	20004224 	.word	0x20004224
 8006828:	20004230 	.word	0x20004230

0800682c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006832:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006836:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006838:	4b27      	ldr	r3, [pc, #156]	@ (80068d8 <prvHeapInit+0xac>)
 800683a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00c      	beq.n	8006860 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3307      	adds	r3, #7
 800684a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f023 0307 	bic.w	r3, r3, #7
 8006852:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	4a1f      	ldr	r2, [pc, #124]	@ (80068d8 <prvHeapInit+0xac>)
 800685c:	4413      	add	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006864:	4a1d      	ldr	r2, [pc, #116]	@ (80068dc <prvHeapInit+0xb0>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800686a:	4b1c      	ldr	r3, [pc, #112]	@ (80068dc <prvHeapInit+0xb0>)
 800686c:	2200      	movs	r2, #0
 800686e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	4413      	add	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006878:	2208      	movs	r2, #8
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0307 	bic.w	r3, r3, #7
 8006886:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a15      	ldr	r2, [pc, #84]	@ (80068e0 <prvHeapInit+0xb4>)
 800688c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800688e:	4b14      	ldr	r3, [pc, #80]	@ (80068e0 <prvHeapInit+0xb4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2200      	movs	r2, #0
 8006894:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006896:	4b12      	ldr	r3, [pc, #72]	@ (80068e0 <prvHeapInit+0xb4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	1ad2      	subs	r2, r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068ac:	4b0c      	ldr	r3, [pc, #48]	@ (80068e0 <prvHeapInit+0xb4>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	4a0a      	ldr	r2, [pc, #40]	@ (80068e4 <prvHeapInit+0xb8>)
 80068ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	4a09      	ldr	r2, [pc, #36]	@ (80068e8 <prvHeapInit+0xbc>)
 80068c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068c4:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <prvHeapInit+0xc0>)
 80068c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068ca:	601a      	str	r2, [r3, #0]
}
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	20000618 	.word	0x20000618
 80068dc:	20004218 	.word	0x20004218
 80068e0:	20004220 	.word	0x20004220
 80068e4:	20004228 	.word	0x20004228
 80068e8:	20004224 	.word	0x20004224
 80068ec:	20004234 	.word	0x20004234

080068f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068f8:	4b28      	ldr	r3, [pc, #160]	@ (800699c <prvInsertBlockIntoFreeList+0xac>)
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e002      	b.n	8006904 <prvInsertBlockIntoFreeList+0x14>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d8f7      	bhi.n	80068fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4413      	add	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d108      	bne.n	8006932 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	441a      	add	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	441a      	add	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d118      	bne.n	8006978 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b15      	ldr	r3, [pc, #84]	@ (80069a0 <prvInsertBlockIntoFreeList+0xb0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d00d      	beq.n	800696e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	441a      	add	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	e008      	b.n	8006980 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800696e:	4b0c      	ldr	r3, [pc, #48]	@ (80069a0 <prvInsertBlockIntoFreeList+0xb0>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	e003      	b.n	8006980 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	d002      	beq.n	800698e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800698e:	bf00      	nop
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20004218 	.word	0x20004218
 80069a0:	20004220 	.word	0x20004220

080069a4 <sniprintf>:
 80069a4:	b40c      	push	{r2, r3}
 80069a6:	b530      	push	{r4, r5, lr}
 80069a8:	4b17      	ldr	r3, [pc, #92]	@ (8006a08 <sniprintf+0x64>)
 80069aa:	1e0c      	subs	r4, r1, #0
 80069ac:	681d      	ldr	r5, [r3, #0]
 80069ae:	b09d      	sub	sp, #116	@ 0x74
 80069b0:	da08      	bge.n	80069c4 <sniprintf+0x20>
 80069b2:	238b      	movs	r3, #139	@ 0x8b
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069ba:	b01d      	add	sp, #116	@ 0x74
 80069bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069c0:	b002      	add	sp, #8
 80069c2:	4770      	bx	lr
 80069c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80069c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069cc:	bf14      	ite	ne
 80069ce:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80069d2:	4623      	moveq	r3, r4
 80069d4:	9304      	str	r3, [sp, #16]
 80069d6:	9307      	str	r3, [sp, #28]
 80069d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069dc:	9002      	str	r0, [sp, #8]
 80069de:	9006      	str	r0, [sp, #24]
 80069e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80069e6:	ab21      	add	r3, sp, #132	@ 0x84
 80069e8:	a902      	add	r1, sp, #8
 80069ea:	4628      	mov	r0, r5
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	f000 fa33 	bl	8006e58 <_svfiprintf_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	bfbc      	itt	lt
 80069f6:	238b      	movlt	r3, #139	@ 0x8b
 80069f8:	602b      	strlt	r3, [r5, #0]
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	d0dd      	beq.n	80069ba <sniprintf+0x16>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	e7d9      	b.n	80069ba <sniprintf+0x16>
 8006a06:	bf00      	nop
 8006a08:	20000010 	.word	0x20000010

08006a0c <_vsniprintf_r>:
 8006a0c:	b530      	push	{r4, r5, lr}
 8006a0e:	4614      	mov	r4, r2
 8006a10:	2c00      	cmp	r4, #0
 8006a12:	b09b      	sub	sp, #108	@ 0x6c
 8006a14:	4605      	mov	r5, r0
 8006a16:	461a      	mov	r2, r3
 8006a18:	da05      	bge.n	8006a26 <_vsniprintf_r+0x1a>
 8006a1a:	238b      	movs	r3, #139	@ 0x8b
 8006a1c:	6003      	str	r3, [r0, #0]
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a22:	b01b      	add	sp, #108	@ 0x6c
 8006a24:	bd30      	pop	{r4, r5, pc}
 8006a26:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006a2e:	bf14      	ite	ne
 8006a30:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006a34:	4623      	moveq	r3, r4
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	9305      	str	r3, [sp, #20]
 8006a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a3e:	9100      	str	r1, [sp, #0]
 8006a40:	9104      	str	r1, [sp, #16]
 8006a42:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006a46:	4669      	mov	r1, sp
 8006a48:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006a4a:	f000 fa05 	bl	8006e58 <_svfiprintf_r>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	bfbc      	itt	lt
 8006a52:	238b      	movlt	r3, #139	@ 0x8b
 8006a54:	602b      	strlt	r3, [r5, #0]
 8006a56:	2c00      	cmp	r4, #0
 8006a58:	d0e3      	beq.n	8006a22 <_vsniprintf_r+0x16>
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	e7df      	b.n	8006a22 <_vsniprintf_r+0x16>
	...

08006a64 <vsniprintf>:
 8006a64:	b507      	push	{r0, r1, r2, lr}
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4803      	ldr	r0, [pc, #12]	@ (8006a7c <vsniprintf+0x18>)
 8006a70:	6800      	ldr	r0, [r0, #0]
 8006a72:	f7ff ffcb 	bl	8006a0c <_vsniprintf_r>
 8006a76:	b003      	add	sp, #12
 8006a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a7c:	20000010 	.word	0x20000010

08006a80 <memset>:
 8006a80:	4402      	add	r2, r0
 8006a82:	4603      	mov	r3, r0
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d100      	bne.n	8006a8a <memset+0xa>
 8006a88:	4770      	bx	lr
 8006a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8e:	e7f9      	b.n	8006a84 <memset+0x4>

08006a90 <_reclaim_reent>:
 8006a90:	4b29      	ldr	r3, [pc, #164]	@ (8006b38 <_reclaim_reent+0xa8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4283      	cmp	r3, r0
 8006a96:	b570      	push	{r4, r5, r6, lr}
 8006a98:	4604      	mov	r4, r0
 8006a9a:	d04b      	beq.n	8006b34 <_reclaim_reent+0xa4>
 8006a9c:	69c3      	ldr	r3, [r0, #28]
 8006a9e:	b1ab      	cbz	r3, 8006acc <_reclaim_reent+0x3c>
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	b16b      	cbz	r3, 8006ac0 <_reclaim_reent+0x30>
 8006aa4:	2500      	movs	r5, #0
 8006aa6:	69e3      	ldr	r3, [r4, #28]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	5959      	ldr	r1, [r3, r5]
 8006aac:	2900      	cmp	r1, #0
 8006aae:	d13b      	bne.n	8006b28 <_reclaim_reent+0x98>
 8006ab0:	3504      	adds	r5, #4
 8006ab2:	2d80      	cmp	r5, #128	@ 0x80
 8006ab4:	d1f7      	bne.n	8006aa6 <_reclaim_reent+0x16>
 8006ab6:	69e3      	ldr	r3, [r4, #28]
 8006ab8:	4620      	mov	r0, r4
 8006aba:	68d9      	ldr	r1, [r3, #12]
 8006abc:	f000 f878 	bl	8006bb0 <_free_r>
 8006ac0:	69e3      	ldr	r3, [r4, #28]
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	b111      	cbz	r1, 8006acc <_reclaim_reent+0x3c>
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f872 	bl	8006bb0 <_free_r>
 8006acc:	6961      	ldr	r1, [r4, #20]
 8006ace:	b111      	cbz	r1, 8006ad6 <_reclaim_reent+0x46>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 f86d 	bl	8006bb0 <_free_r>
 8006ad6:	69e1      	ldr	r1, [r4, #28]
 8006ad8:	b111      	cbz	r1, 8006ae0 <_reclaim_reent+0x50>
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 f868 	bl	8006bb0 <_free_r>
 8006ae0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006ae2:	b111      	cbz	r1, 8006aea <_reclaim_reent+0x5a>
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 f863 	bl	8006bb0 <_free_r>
 8006aea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aec:	b111      	cbz	r1, 8006af4 <_reclaim_reent+0x64>
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 f85e 	bl	8006bb0 <_free_r>
 8006af4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006af6:	b111      	cbz	r1, 8006afe <_reclaim_reent+0x6e>
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 f859 	bl	8006bb0 <_free_r>
 8006afe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b00:	b111      	cbz	r1, 8006b08 <_reclaim_reent+0x78>
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f854 	bl	8006bb0 <_free_r>
 8006b08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006b0a:	b111      	cbz	r1, 8006b12 <_reclaim_reent+0x82>
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 f84f 	bl	8006bb0 <_free_r>
 8006b12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006b14:	b111      	cbz	r1, 8006b1c <_reclaim_reent+0x8c>
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 f84a 	bl	8006bb0 <_free_r>
 8006b1c:	6a23      	ldr	r3, [r4, #32]
 8006b1e:	b14b      	cbz	r3, 8006b34 <_reclaim_reent+0xa4>
 8006b20:	4620      	mov	r0, r4
 8006b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b26:	4718      	bx	r3
 8006b28:	680e      	ldr	r6, [r1, #0]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 f840 	bl	8006bb0 <_free_r>
 8006b30:	4631      	mov	r1, r6
 8006b32:	e7bb      	b.n	8006aac <_reclaim_reent+0x1c>
 8006b34:	bd70      	pop	{r4, r5, r6, pc}
 8006b36:	bf00      	nop
 8006b38:	20000010 	.word	0x20000010

08006b3c <__errno>:
 8006b3c:	4b01      	ldr	r3, [pc, #4]	@ (8006b44 <__errno+0x8>)
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000010 	.word	0x20000010

08006b48 <__libc_init_array>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b80 <__libc_init_array+0x38>)
 8006b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b84 <__libc_init_array+0x3c>)
 8006b4e:	1b64      	subs	r4, r4, r5
 8006b50:	10a4      	asrs	r4, r4, #2
 8006b52:	2600      	movs	r6, #0
 8006b54:	42a6      	cmp	r6, r4
 8006b56:	d109      	bne.n	8006b6c <__libc_init_array+0x24>
 8006b58:	4d0b      	ldr	r5, [pc, #44]	@ (8006b88 <__libc_init_array+0x40>)
 8006b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b8c <__libc_init_array+0x44>)
 8006b5c:	f000 fc66 	bl	800742c <_init>
 8006b60:	1b64      	subs	r4, r4, r5
 8006b62:	10a4      	asrs	r4, r4, #2
 8006b64:	2600      	movs	r6, #0
 8006b66:	42a6      	cmp	r6, r4
 8006b68:	d105      	bne.n	8006b76 <__libc_init_array+0x2e>
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b70:	4798      	blx	r3
 8006b72:	3601      	adds	r6, #1
 8006b74:	e7ee      	b.n	8006b54 <__libc_init_array+0xc>
 8006b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b7a:	4798      	blx	r3
 8006b7c:	3601      	adds	r6, #1
 8006b7e:	e7f2      	b.n	8006b66 <__libc_init_array+0x1e>
 8006b80:	0800781c 	.word	0x0800781c
 8006b84:	0800781c 	.word	0x0800781c
 8006b88:	0800781c 	.word	0x0800781c
 8006b8c:	08007820 	.word	0x08007820

08006b90 <__retarget_lock_acquire_recursive>:
 8006b90:	4770      	bx	lr

08006b92 <__retarget_lock_release_recursive>:
 8006b92:	4770      	bx	lr

08006b94 <memcpy>:
 8006b94:	440a      	add	r2, r1
 8006b96:	4291      	cmp	r1, r2
 8006b98:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b9c:	d100      	bne.n	8006ba0 <memcpy+0xc>
 8006b9e:	4770      	bx	lr
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006baa:	4291      	cmp	r1, r2
 8006bac:	d1f9      	bne.n	8006ba2 <memcpy+0xe>
 8006bae:	bd10      	pop	{r4, pc}

08006bb0 <_free_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d041      	beq.n	8006c3c <_free_r+0x8c>
 8006bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bbc:	1f0c      	subs	r4, r1, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfb8      	it	lt
 8006bc2:	18e4      	addlt	r4, r4, r3
 8006bc4:	f000 f8e0 	bl	8006d88 <__malloc_lock>
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <_free_r+0x90>)
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	b933      	cbnz	r3, 8006bdc <_free_r+0x2c>
 8006bce:	6063      	str	r3, [r4, #4]
 8006bd0:	6014      	str	r4, [r2, #0]
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd8:	f000 b8dc 	b.w	8006d94 <__malloc_unlock>
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	d908      	bls.n	8006bf2 <_free_r+0x42>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	1821      	adds	r1, r4, r0
 8006be4:	428b      	cmp	r3, r1
 8006be6:	bf01      	itttt	eq
 8006be8:	6819      	ldreq	r1, [r3, #0]
 8006bea:	685b      	ldreq	r3, [r3, #4]
 8006bec:	1809      	addeq	r1, r1, r0
 8006bee:	6021      	streq	r1, [r4, #0]
 8006bf0:	e7ed      	b.n	8006bce <_free_r+0x1e>
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	b10b      	cbz	r3, 8006bfc <_free_r+0x4c>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d9fa      	bls.n	8006bf2 <_free_r+0x42>
 8006bfc:	6811      	ldr	r1, [r2, #0]
 8006bfe:	1850      	adds	r0, r2, r1
 8006c00:	42a0      	cmp	r0, r4
 8006c02:	d10b      	bne.n	8006c1c <_free_r+0x6c>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	4401      	add	r1, r0
 8006c08:	1850      	adds	r0, r2, r1
 8006c0a:	4283      	cmp	r3, r0
 8006c0c:	6011      	str	r1, [r2, #0]
 8006c0e:	d1e0      	bne.n	8006bd2 <_free_r+0x22>
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	6053      	str	r3, [r2, #4]
 8006c16:	4408      	add	r0, r1
 8006c18:	6010      	str	r0, [r2, #0]
 8006c1a:	e7da      	b.n	8006bd2 <_free_r+0x22>
 8006c1c:	d902      	bls.n	8006c24 <_free_r+0x74>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	e7d6      	b.n	8006bd2 <_free_r+0x22>
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	1821      	adds	r1, r4, r0
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	bf04      	itt	eq
 8006c2c:	6819      	ldreq	r1, [r3, #0]
 8006c2e:	685b      	ldreq	r3, [r3, #4]
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	bf04      	itt	eq
 8006c34:	1809      	addeq	r1, r1, r0
 8006c36:	6021      	streq	r1, [r4, #0]
 8006c38:	6054      	str	r4, [r2, #4]
 8006c3a:	e7ca      	b.n	8006bd2 <_free_r+0x22>
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	bf00      	nop
 8006c40:	2000437c 	.word	0x2000437c

08006c44 <sbrk_aligned>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4e0f      	ldr	r6, [pc, #60]	@ (8006c84 <sbrk_aligned+0x40>)
 8006c48:	460c      	mov	r4, r1
 8006c4a:	6831      	ldr	r1, [r6, #0]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	b911      	cbnz	r1, 8006c56 <sbrk_aligned+0x12>
 8006c50:	f000 fba6 	bl	80073a0 <_sbrk_r>
 8006c54:	6030      	str	r0, [r6, #0]
 8006c56:	4621      	mov	r1, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 fba1 	bl	80073a0 <_sbrk_r>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d103      	bne.n	8006c6a <sbrk_aligned+0x26>
 8006c62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006c66:	4620      	mov	r0, r4
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d0f8      	beq.n	8006c66 <sbrk_aligned+0x22>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 fb92 	bl	80073a0 <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d1f2      	bne.n	8006c66 <sbrk_aligned+0x22>
 8006c80:	e7ef      	b.n	8006c62 <sbrk_aligned+0x1e>
 8006c82:	bf00      	nop
 8006c84:	20004378 	.word	0x20004378

08006c88 <_malloc_r>:
 8006c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	1ccd      	adds	r5, r1, #3
 8006c8e:	f025 0503 	bic.w	r5, r5, #3
 8006c92:	3508      	adds	r5, #8
 8006c94:	2d0c      	cmp	r5, #12
 8006c96:	bf38      	it	cc
 8006c98:	250c      	movcc	r5, #12
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	db01      	blt.n	8006ca4 <_malloc_r+0x1c>
 8006ca0:	42a9      	cmp	r1, r5
 8006ca2:	d904      	bls.n	8006cae <_malloc_r+0x26>
 8006ca4:	230c      	movs	r3, #12
 8006ca6:	6033      	str	r3, [r6, #0]
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d84 <_malloc_r+0xfc>
 8006cb2:	f000 f869 	bl	8006d88 <__malloc_lock>
 8006cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006cba:	461c      	mov	r4, r3
 8006cbc:	bb44      	cbnz	r4, 8006d10 <_malloc_r+0x88>
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f7ff ffbf 	bl	8006c44 <sbrk_aligned>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	4604      	mov	r4, r0
 8006cca:	d158      	bne.n	8006d7e <_malloc_r+0xf6>
 8006ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8006cd0:	4627      	mov	r7, r4
 8006cd2:	2f00      	cmp	r7, #0
 8006cd4:	d143      	bne.n	8006d5e <_malloc_r+0xd6>
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	d04b      	beq.n	8006d72 <_malloc_r+0xea>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	4639      	mov	r1, r7
 8006cde:	4630      	mov	r0, r6
 8006ce0:	eb04 0903 	add.w	r9, r4, r3
 8006ce4:	f000 fb5c 	bl	80073a0 <_sbrk_r>
 8006ce8:	4581      	cmp	r9, r0
 8006cea:	d142      	bne.n	8006d72 <_malloc_r+0xea>
 8006cec:	6821      	ldr	r1, [r4, #0]
 8006cee:	1a6d      	subs	r5, r5, r1
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff ffa6 	bl	8006c44 <sbrk_aligned>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d03a      	beq.n	8006d72 <_malloc_r+0xea>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	442b      	add	r3, r5
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	f8d8 3000 	ldr.w	r3, [r8]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	bb62      	cbnz	r2, 8006d64 <_malloc_r+0xdc>
 8006d0a:	f8c8 7000 	str.w	r7, [r8]
 8006d0e:	e00f      	b.n	8006d30 <_malloc_r+0xa8>
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	1b52      	subs	r2, r2, r5
 8006d14:	d420      	bmi.n	8006d58 <_malloc_r+0xd0>
 8006d16:	2a0b      	cmp	r2, #11
 8006d18:	d917      	bls.n	8006d4a <_malloc_r+0xc2>
 8006d1a:	1961      	adds	r1, r4, r5
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	6025      	str	r5, [r4, #0]
 8006d20:	bf18      	it	ne
 8006d22:	6059      	strne	r1, [r3, #4]
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	bf08      	it	eq
 8006d28:	f8c8 1000 	streq.w	r1, [r8]
 8006d2c:	5162      	str	r2, [r4, r5]
 8006d2e:	604b      	str	r3, [r1, #4]
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 f82f 	bl	8006d94 <__malloc_unlock>
 8006d36:	f104 000b 	add.w	r0, r4, #11
 8006d3a:	1d23      	adds	r3, r4, #4
 8006d3c:	f020 0007 	bic.w	r0, r0, #7
 8006d40:	1ac2      	subs	r2, r0, r3
 8006d42:	bf1c      	itt	ne
 8006d44:	1a1b      	subne	r3, r3, r0
 8006d46:	50a3      	strne	r3, [r4, r2]
 8006d48:	e7af      	b.n	8006caa <_malloc_r+0x22>
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	bf0c      	ite	eq
 8006d50:	f8c8 2000 	streq.w	r2, [r8]
 8006d54:	605a      	strne	r2, [r3, #4]
 8006d56:	e7eb      	b.n	8006d30 <_malloc_r+0xa8>
 8006d58:	4623      	mov	r3, r4
 8006d5a:	6864      	ldr	r4, [r4, #4]
 8006d5c:	e7ae      	b.n	8006cbc <_malloc_r+0x34>
 8006d5e:	463c      	mov	r4, r7
 8006d60:	687f      	ldr	r7, [r7, #4]
 8006d62:	e7b6      	b.n	8006cd2 <_malloc_r+0x4a>
 8006d64:	461a      	mov	r2, r3
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d1fb      	bne.n	8006d64 <_malloc_r+0xdc>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6053      	str	r3, [r2, #4]
 8006d70:	e7de      	b.n	8006d30 <_malloc_r+0xa8>
 8006d72:	230c      	movs	r3, #12
 8006d74:	6033      	str	r3, [r6, #0]
 8006d76:	4630      	mov	r0, r6
 8006d78:	f000 f80c 	bl	8006d94 <__malloc_unlock>
 8006d7c:	e794      	b.n	8006ca8 <_malloc_r+0x20>
 8006d7e:	6005      	str	r5, [r0, #0]
 8006d80:	e7d6      	b.n	8006d30 <_malloc_r+0xa8>
 8006d82:	bf00      	nop
 8006d84:	2000437c 	.word	0x2000437c

08006d88 <__malloc_lock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	@ (8006d90 <__malloc_lock+0x8>)
 8006d8a:	f7ff bf01 	b.w	8006b90 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	20004374 	.word	0x20004374

08006d94 <__malloc_unlock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	@ (8006d9c <__malloc_unlock+0x8>)
 8006d96:	f7ff befc 	b.w	8006b92 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20004374 	.word	0x20004374

08006da0 <__ssputs_r>:
 8006da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	688e      	ldr	r6, [r1, #8]
 8006da6:	461f      	mov	r7, r3
 8006da8:	42be      	cmp	r6, r7
 8006daa:	680b      	ldr	r3, [r1, #0]
 8006dac:	4682      	mov	sl, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	4690      	mov	r8, r2
 8006db2:	d82d      	bhi.n	8006e10 <__ssputs_r+0x70>
 8006db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dbc:	d026      	beq.n	8006e0c <__ssputs_r+0x6c>
 8006dbe:	6965      	ldr	r5, [r4, #20]
 8006dc0:	6909      	ldr	r1, [r1, #16]
 8006dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dc6:	eba3 0901 	sub.w	r9, r3, r1
 8006dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dce:	1c7b      	adds	r3, r7, #1
 8006dd0:	444b      	add	r3, r9
 8006dd2:	106d      	asrs	r5, r5, #1
 8006dd4:	429d      	cmp	r5, r3
 8006dd6:	bf38      	it	cc
 8006dd8:	461d      	movcc	r5, r3
 8006dda:	0553      	lsls	r3, r2, #21
 8006ddc:	d527      	bpl.n	8006e2e <__ssputs_r+0x8e>
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7ff ff52 	bl	8006c88 <_malloc_r>
 8006de4:	4606      	mov	r6, r0
 8006de6:	b360      	cbz	r0, 8006e42 <__ssputs_r+0xa2>
 8006de8:	6921      	ldr	r1, [r4, #16]
 8006dea:	464a      	mov	r2, r9
 8006dec:	f7ff fed2 	bl	8006b94 <memcpy>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	6126      	str	r6, [r4, #16]
 8006dfe:	6165      	str	r5, [r4, #20]
 8006e00:	444e      	add	r6, r9
 8006e02:	eba5 0509 	sub.w	r5, r5, r9
 8006e06:	6026      	str	r6, [r4, #0]
 8006e08:	60a5      	str	r5, [r4, #8]
 8006e0a:	463e      	mov	r6, r7
 8006e0c:	42be      	cmp	r6, r7
 8006e0e:	d900      	bls.n	8006e12 <__ssputs_r+0x72>
 8006e10:	463e      	mov	r6, r7
 8006e12:	6820      	ldr	r0, [r4, #0]
 8006e14:	4632      	mov	r2, r6
 8006e16:	4641      	mov	r1, r8
 8006e18:	f000 faa8 	bl	800736c <memmove>
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	1b9b      	subs	r3, r3, r6
 8006e20:	60a3      	str	r3, [r4, #8]
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	4433      	add	r3, r6
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2e:	462a      	mov	r2, r5
 8006e30:	f000 fac6 	bl	80073c0 <_realloc_r>
 8006e34:	4606      	mov	r6, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d1e0      	bne.n	8006dfc <__ssputs_r+0x5c>
 8006e3a:	6921      	ldr	r1, [r4, #16]
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	f7ff feb7 	bl	8006bb0 <_free_r>
 8006e42:	230c      	movs	r3, #12
 8006e44:	f8ca 3000 	str.w	r3, [sl]
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e54:	e7e9      	b.n	8006e2a <__ssputs_r+0x8a>
	...

08006e58 <_svfiprintf_r>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	4698      	mov	r8, r3
 8006e5e:	898b      	ldrh	r3, [r1, #12]
 8006e60:	061b      	lsls	r3, r3, #24
 8006e62:	b09d      	sub	sp, #116	@ 0x74
 8006e64:	4607      	mov	r7, r0
 8006e66:	460d      	mov	r5, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	d510      	bpl.n	8006e8e <_svfiprintf_r+0x36>
 8006e6c:	690b      	ldr	r3, [r1, #16]
 8006e6e:	b973      	cbnz	r3, 8006e8e <_svfiprintf_r+0x36>
 8006e70:	2140      	movs	r1, #64	@ 0x40
 8006e72:	f7ff ff09 	bl	8006c88 <_malloc_r>
 8006e76:	6028      	str	r0, [r5, #0]
 8006e78:	6128      	str	r0, [r5, #16]
 8006e7a:	b930      	cbnz	r0, 8006e8a <_svfiprintf_r+0x32>
 8006e7c:	230c      	movs	r3, #12
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e84:	b01d      	add	sp, #116	@ 0x74
 8006e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8a:	2340      	movs	r3, #64	@ 0x40
 8006e8c:	616b      	str	r3, [r5, #20]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e92:	2320      	movs	r3, #32
 8006e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e9c:	2330      	movs	r3, #48	@ 0x30
 8006e9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800703c <_svfiprintf_r+0x1e4>
 8006ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ea6:	f04f 0901 	mov.w	r9, #1
 8006eaa:	4623      	mov	r3, r4
 8006eac:	469a      	mov	sl, r3
 8006eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eb2:	b10a      	cbz	r2, 8006eb8 <_svfiprintf_r+0x60>
 8006eb4:	2a25      	cmp	r2, #37	@ 0x25
 8006eb6:	d1f9      	bne.n	8006eac <_svfiprintf_r+0x54>
 8006eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ebc:	d00b      	beq.n	8006ed6 <_svfiprintf_r+0x7e>
 8006ebe:	465b      	mov	r3, fp
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ff6b 	bl	8006da0 <__ssputs_r>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f000 80a7 	beq.w	800701e <_svfiprintf_r+0x1c6>
 8006ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ed2:	445a      	add	r2, fp
 8006ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 809f 	beq.w	800701e <_svfiprintf_r+0x1c6>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eea:	f10a 0a01 	add.w	sl, sl, #1
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ef8:	4654      	mov	r4, sl
 8006efa:	2205      	movs	r2, #5
 8006efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f00:	484e      	ldr	r0, [pc, #312]	@ (800703c <_svfiprintf_r+0x1e4>)
 8006f02:	f7f9 f96d 	bl	80001e0 <memchr>
 8006f06:	9a04      	ldr	r2, [sp, #16]
 8006f08:	b9d8      	cbnz	r0, 8006f42 <_svfiprintf_r+0xea>
 8006f0a:	06d0      	lsls	r0, r2, #27
 8006f0c:	bf44      	itt	mi
 8006f0e:	2320      	movmi	r3, #32
 8006f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f14:	0711      	lsls	r1, r2, #28
 8006f16:	bf44      	itt	mi
 8006f18:	232b      	movmi	r3, #43	@ 0x2b
 8006f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f24:	d015      	beq.n	8006f52 <_svfiprintf_r+0xfa>
 8006f26:	9a07      	ldr	r2, [sp, #28]
 8006f28:	4654      	mov	r4, sl
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	f04f 0c0a 	mov.w	ip, #10
 8006f30:	4621      	mov	r1, r4
 8006f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f36:	3b30      	subs	r3, #48	@ 0x30
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d94b      	bls.n	8006fd4 <_svfiprintf_r+0x17c>
 8006f3c:	b1b0      	cbz	r0, 8006f6c <_svfiprintf_r+0x114>
 8006f3e:	9207      	str	r2, [sp, #28]
 8006f40:	e014      	b.n	8006f6c <_svfiprintf_r+0x114>
 8006f42:	eba0 0308 	sub.w	r3, r0, r8
 8006f46:	fa09 f303 	lsl.w	r3, r9, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	9304      	str	r3, [sp, #16]
 8006f4e:	46a2      	mov	sl, r4
 8006f50:	e7d2      	b.n	8006ef8 <_svfiprintf_r+0xa0>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	1d19      	adds	r1, r3, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	9103      	str	r1, [sp, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bfbb      	ittet	lt
 8006f5e:	425b      	neglt	r3, r3
 8006f60:	f042 0202 	orrlt.w	r2, r2, #2
 8006f64:	9307      	strge	r3, [sp, #28]
 8006f66:	9307      	strlt	r3, [sp, #28]
 8006f68:	bfb8      	it	lt
 8006f6a:	9204      	strlt	r2, [sp, #16]
 8006f6c:	7823      	ldrb	r3, [r4, #0]
 8006f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f70:	d10a      	bne.n	8006f88 <_svfiprintf_r+0x130>
 8006f72:	7863      	ldrb	r3, [r4, #1]
 8006f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f76:	d132      	bne.n	8006fde <_svfiprintf_r+0x186>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	1d1a      	adds	r2, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	9203      	str	r2, [sp, #12]
 8006f80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f84:	3402      	adds	r4, #2
 8006f86:	9305      	str	r3, [sp, #20]
 8006f88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800704c <_svfiprintf_r+0x1f4>
 8006f8c:	7821      	ldrb	r1, [r4, #0]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	4650      	mov	r0, sl
 8006f92:	f7f9 f925 	bl	80001e0 <memchr>
 8006f96:	b138      	cbz	r0, 8006fa8 <_svfiprintf_r+0x150>
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	eba0 000a 	sub.w	r0, r0, sl
 8006f9e:	2240      	movs	r2, #64	@ 0x40
 8006fa0:	4082      	lsls	r2, r0
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	3401      	adds	r4, #1
 8006fa6:	9304      	str	r3, [sp, #16]
 8006fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fac:	4824      	ldr	r0, [pc, #144]	@ (8007040 <_svfiprintf_r+0x1e8>)
 8006fae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fb2:	2206      	movs	r2, #6
 8006fb4:	f7f9 f914 	bl	80001e0 <memchr>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d036      	beq.n	800702a <_svfiprintf_r+0x1d2>
 8006fbc:	4b21      	ldr	r3, [pc, #132]	@ (8007044 <_svfiprintf_r+0x1ec>)
 8006fbe:	bb1b      	cbnz	r3, 8007008 <_svfiprintf_r+0x1b0>
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	3307      	adds	r3, #7
 8006fc4:	f023 0307 	bic.w	r3, r3, #7
 8006fc8:	3308      	adds	r3, #8
 8006fca:	9303      	str	r3, [sp, #12]
 8006fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fce:	4433      	add	r3, r6
 8006fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fd2:	e76a      	b.n	8006eaa <_svfiprintf_r+0x52>
 8006fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd8:	460c      	mov	r4, r1
 8006fda:	2001      	movs	r0, #1
 8006fdc:	e7a8      	b.n	8006f30 <_svfiprintf_r+0xd8>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	3401      	adds	r4, #1
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f04f 0c0a 	mov.w	ip, #10
 8006fea:	4620      	mov	r0, r4
 8006fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff0:	3a30      	subs	r2, #48	@ 0x30
 8006ff2:	2a09      	cmp	r2, #9
 8006ff4:	d903      	bls.n	8006ffe <_svfiprintf_r+0x1a6>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0c6      	beq.n	8006f88 <_svfiprintf_r+0x130>
 8006ffa:	9105      	str	r1, [sp, #20]
 8006ffc:	e7c4      	b.n	8006f88 <_svfiprintf_r+0x130>
 8006ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007002:	4604      	mov	r4, r0
 8007004:	2301      	movs	r3, #1
 8007006:	e7f0      	b.n	8006fea <_svfiprintf_r+0x192>
 8007008:	ab03      	add	r3, sp, #12
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	462a      	mov	r2, r5
 800700e:	4b0e      	ldr	r3, [pc, #56]	@ (8007048 <_svfiprintf_r+0x1f0>)
 8007010:	a904      	add	r1, sp, #16
 8007012:	4638      	mov	r0, r7
 8007014:	f3af 8000 	nop.w
 8007018:	1c42      	adds	r2, r0, #1
 800701a:	4606      	mov	r6, r0
 800701c:	d1d6      	bne.n	8006fcc <_svfiprintf_r+0x174>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	065b      	lsls	r3, r3, #25
 8007022:	f53f af2d 	bmi.w	8006e80 <_svfiprintf_r+0x28>
 8007026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007028:	e72c      	b.n	8006e84 <_svfiprintf_r+0x2c>
 800702a:	ab03      	add	r3, sp, #12
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	462a      	mov	r2, r5
 8007030:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <_svfiprintf_r+0x1f0>)
 8007032:	a904      	add	r1, sp, #16
 8007034:	4638      	mov	r0, r7
 8007036:	f000 f879 	bl	800712c <_printf_i>
 800703a:	e7ed      	b.n	8007018 <_svfiprintf_r+0x1c0>
 800703c:	080077e0 	.word	0x080077e0
 8007040:	080077ea 	.word	0x080077ea
 8007044:	00000000 	.word	0x00000000
 8007048:	08006da1 	.word	0x08006da1
 800704c:	080077e6 	.word	0x080077e6

08007050 <_printf_common>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	4616      	mov	r6, r2
 8007056:	4698      	mov	r8, r3
 8007058:	688a      	ldr	r2, [r1, #8]
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007060:	4293      	cmp	r3, r2
 8007062:	bfb8      	it	lt
 8007064:	4613      	movlt	r3, r2
 8007066:	6033      	str	r3, [r6, #0]
 8007068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800706c:	4607      	mov	r7, r0
 800706e:	460c      	mov	r4, r1
 8007070:	b10a      	cbz	r2, 8007076 <_printf_common+0x26>
 8007072:	3301      	adds	r3, #1
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	0699      	lsls	r1, r3, #26
 800707a:	bf42      	ittt	mi
 800707c:	6833      	ldrmi	r3, [r6, #0]
 800707e:	3302      	addmi	r3, #2
 8007080:	6033      	strmi	r3, [r6, #0]
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	f015 0506 	ands.w	r5, r5, #6
 8007088:	d106      	bne.n	8007098 <_printf_common+0x48>
 800708a:	f104 0a19 	add.w	sl, r4, #25
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	6832      	ldr	r2, [r6, #0]
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	42ab      	cmp	r3, r5
 8007096:	dc26      	bgt.n	80070e6 <_printf_common+0x96>
 8007098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800709c:	6822      	ldr	r2, [r4, #0]
 800709e:	3b00      	subs	r3, #0
 80070a0:	bf18      	it	ne
 80070a2:	2301      	movne	r3, #1
 80070a4:	0692      	lsls	r2, r2, #26
 80070a6:	d42b      	bmi.n	8007100 <_printf_common+0xb0>
 80070a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070ac:	4641      	mov	r1, r8
 80070ae:	4638      	mov	r0, r7
 80070b0:	47c8      	blx	r9
 80070b2:	3001      	adds	r0, #1
 80070b4:	d01e      	beq.n	80070f4 <_printf_common+0xa4>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	6922      	ldr	r2, [r4, #16]
 80070ba:	f003 0306 	and.w	r3, r3, #6
 80070be:	2b04      	cmp	r3, #4
 80070c0:	bf02      	ittt	eq
 80070c2:	68e5      	ldreq	r5, [r4, #12]
 80070c4:	6833      	ldreq	r3, [r6, #0]
 80070c6:	1aed      	subeq	r5, r5, r3
 80070c8:	68a3      	ldr	r3, [r4, #8]
 80070ca:	bf0c      	ite	eq
 80070cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d0:	2500      	movne	r5, #0
 80070d2:	4293      	cmp	r3, r2
 80070d4:	bfc4      	itt	gt
 80070d6:	1a9b      	subgt	r3, r3, r2
 80070d8:	18ed      	addgt	r5, r5, r3
 80070da:	2600      	movs	r6, #0
 80070dc:	341a      	adds	r4, #26
 80070de:	42b5      	cmp	r5, r6
 80070e0:	d11a      	bne.n	8007118 <_printf_common+0xc8>
 80070e2:	2000      	movs	r0, #0
 80070e4:	e008      	b.n	80070f8 <_printf_common+0xa8>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4652      	mov	r2, sl
 80070ea:	4641      	mov	r1, r8
 80070ec:	4638      	mov	r0, r7
 80070ee:	47c8      	blx	r9
 80070f0:	3001      	adds	r0, #1
 80070f2:	d103      	bne.n	80070fc <_printf_common+0xac>
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fc:	3501      	adds	r5, #1
 80070fe:	e7c6      	b.n	800708e <_printf_common+0x3e>
 8007100:	18e1      	adds	r1, r4, r3
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	2030      	movs	r0, #48	@ 0x30
 8007106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800710a:	4422      	add	r2, r4
 800710c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007114:	3302      	adds	r3, #2
 8007116:	e7c7      	b.n	80070a8 <_printf_common+0x58>
 8007118:	2301      	movs	r3, #1
 800711a:	4622      	mov	r2, r4
 800711c:	4641      	mov	r1, r8
 800711e:	4638      	mov	r0, r7
 8007120:	47c8      	blx	r9
 8007122:	3001      	adds	r0, #1
 8007124:	d0e6      	beq.n	80070f4 <_printf_common+0xa4>
 8007126:	3601      	adds	r6, #1
 8007128:	e7d9      	b.n	80070de <_printf_common+0x8e>
	...

0800712c <_printf_i>:
 800712c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	7e0f      	ldrb	r7, [r1, #24]
 8007132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007134:	2f78      	cmp	r7, #120	@ 0x78
 8007136:	4691      	mov	r9, r2
 8007138:	4680      	mov	r8, r0
 800713a:	460c      	mov	r4, r1
 800713c:	469a      	mov	sl, r3
 800713e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007142:	d807      	bhi.n	8007154 <_printf_i+0x28>
 8007144:	2f62      	cmp	r7, #98	@ 0x62
 8007146:	d80a      	bhi.n	800715e <_printf_i+0x32>
 8007148:	2f00      	cmp	r7, #0
 800714a:	f000 80d2 	beq.w	80072f2 <_printf_i+0x1c6>
 800714e:	2f58      	cmp	r7, #88	@ 0x58
 8007150:	f000 80b9 	beq.w	80072c6 <_printf_i+0x19a>
 8007154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800715c:	e03a      	b.n	80071d4 <_printf_i+0xa8>
 800715e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007162:	2b15      	cmp	r3, #21
 8007164:	d8f6      	bhi.n	8007154 <_printf_i+0x28>
 8007166:	a101      	add	r1, pc, #4	@ (adr r1, 800716c <_printf_i+0x40>)
 8007168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800716c:	080071c5 	.word	0x080071c5
 8007170:	080071d9 	.word	0x080071d9
 8007174:	08007155 	.word	0x08007155
 8007178:	08007155 	.word	0x08007155
 800717c:	08007155 	.word	0x08007155
 8007180:	08007155 	.word	0x08007155
 8007184:	080071d9 	.word	0x080071d9
 8007188:	08007155 	.word	0x08007155
 800718c:	08007155 	.word	0x08007155
 8007190:	08007155 	.word	0x08007155
 8007194:	08007155 	.word	0x08007155
 8007198:	080072d9 	.word	0x080072d9
 800719c:	08007203 	.word	0x08007203
 80071a0:	08007293 	.word	0x08007293
 80071a4:	08007155 	.word	0x08007155
 80071a8:	08007155 	.word	0x08007155
 80071ac:	080072fb 	.word	0x080072fb
 80071b0:	08007155 	.word	0x08007155
 80071b4:	08007203 	.word	0x08007203
 80071b8:	08007155 	.word	0x08007155
 80071bc:	08007155 	.word	0x08007155
 80071c0:	0800729b 	.word	0x0800729b
 80071c4:	6833      	ldr	r3, [r6, #0]
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6032      	str	r2, [r6, #0]
 80071cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071d4:	2301      	movs	r3, #1
 80071d6:	e09d      	b.n	8007314 <_printf_i+0x1e8>
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	6820      	ldr	r0, [r4, #0]
 80071dc:	1d19      	adds	r1, r3, #4
 80071de:	6031      	str	r1, [r6, #0]
 80071e0:	0606      	lsls	r6, r0, #24
 80071e2:	d501      	bpl.n	80071e8 <_printf_i+0xbc>
 80071e4:	681d      	ldr	r5, [r3, #0]
 80071e6:	e003      	b.n	80071f0 <_printf_i+0xc4>
 80071e8:	0645      	lsls	r5, r0, #25
 80071ea:	d5fb      	bpl.n	80071e4 <_printf_i+0xb8>
 80071ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	da03      	bge.n	80071fc <_printf_i+0xd0>
 80071f4:	232d      	movs	r3, #45	@ 0x2d
 80071f6:	426d      	negs	r5, r5
 80071f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071fc:	4859      	ldr	r0, [pc, #356]	@ (8007364 <_printf_i+0x238>)
 80071fe:	230a      	movs	r3, #10
 8007200:	e011      	b.n	8007226 <_printf_i+0xfa>
 8007202:	6821      	ldr	r1, [r4, #0]
 8007204:	6833      	ldr	r3, [r6, #0]
 8007206:	0608      	lsls	r0, r1, #24
 8007208:	f853 5b04 	ldr.w	r5, [r3], #4
 800720c:	d402      	bmi.n	8007214 <_printf_i+0xe8>
 800720e:	0649      	lsls	r1, r1, #25
 8007210:	bf48      	it	mi
 8007212:	b2ad      	uxthmi	r5, r5
 8007214:	2f6f      	cmp	r7, #111	@ 0x6f
 8007216:	4853      	ldr	r0, [pc, #332]	@ (8007364 <_printf_i+0x238>)
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	bf14      	ite	ne
 800721c:	230a      	movne	r3, #10
 800721e:	2308      	moveq	r3, #8
 8007220:	2100      	movs	r1, #0
 8007222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007226:	6866      	ldr	r6, [r4, #4]
 8007228:	60a6      	str	r6, [r4, #8]
 800722a:	2e00      	cmp	r6, #0
 800722c:	bfa2      	ittt	ge
 800722e:	6821      	ldrge	r1, [r4, #0]
 8007230:	f021 0104 	bicge.w	r1, r1, #4
 8007234:	6021      	strge	r1, [r4, #0]
 8007236:	b90d      	cbnz	r5, 800723c <_printf_i+0x110>
 8007238:	2e00      	cmp	r6, #0
 800723a:	d04b      	beq.n	80072d4 <_printf_i+0x1a8>
 800723c:	4616      	mov	r6, r2
 800723e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007242:	fb03 5711 	mls	r7, r3, r1, r5
 8007246:	5dc7      	ldrb	r7, [r0, r7]
 8007248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800724c:	462f      	mov	r7, r5
 800724e:	42bb      	cmp	r3, r7
 8007250:	460d      	mov	r5, r1
 8007252:	d9f4      	bls.n	800723e <_printf_i+0x112>
 8007254:	2b08      	cmp	r3, #8
 8007256:	d10b      	bne.n	8007270 <_printf_i+0x144>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	07df      	lsls	r7, r3, #31
 800725c:	d508      	bpl.n	8007270 <_printf_i+0x144>
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	6861      	ldr	r1, [r4, #4]
 8007262:	4299      	cmp	r1, r3
 8007264:	bfde      	ittt	le
 8007266:	2330      	movle	r3, #48	@ 0x30
 8007268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800726c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007270:	1b92      	subs	r2, r2, r6
 8007272:	6122      	str	r2, [r4, #16]
 8007274:	f8cd a000 	str.w	sl, [sp]
 8007278:	464b      	mov	r3, r9
 800727a:	aa03      	add	r2, sp, #12
 800727c:	4621      	mov	r1, r4
 800727e:	4640      	mov	r0, r8
 8007280:	f7ff fee6 	bl	8007050 <_printf_common>
 8007284:	3001      	adds	r0, #1
 8007286:	d14a      	bne.n	800731e <_printf_i+0x1f2>
 8007288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800728c:	b004      	add	sp, #16
 800728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f043 0320 	orr.w	r3, r3, #32
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	4833      	ldr	r0, [pc, #204]	@ (8007368 <_printf_i+0x23c>)
 800729c:	2778      	movs	r7, #120	@ 0x78
 800729e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	6831      	ldr	r1, [r6, #0]
 80072a6:	061f      	lsls	r7, r3, #24
 80072a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80072ac:	d402      	bmi.n	80072b4 <_printf_i+0x188>
 80072ae:	065f      	lsls	r7, r3, #25
 80072b0:	bf48      	it	mi
 80072b2:	b2ad      	uxthmi	r5, r5
 80072b4:	6031      	str	r1, [r6, #0]
 80072b6:	07d9      	lsls	r1, r3, #31
 80072b8:	bf44      	itt	mi
 80072ba:	f043 0320 	orrmi.w	r3, r3, #32
 80072be:	6023      	strmi	r3, [r4, #0]
 80072c0:	b11d      	cbz	r5, 80072ca <_printf_i+0x19e>
 80072c2:	2310      	movs	r3, #16
 80072c4:	e7ac      	b.n	8007220 <_printf_i+0xf4>
 80072c6:	4827      	ldr	r0, [pc, #156]	@ (8007364 <_printf_i+0x238>)
 80072c8:	e7e9      	b.n	800729e <_printf_i+0x172>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	f023 0320 	bic.w	r3, r3, #32
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	e7f6      	b.n	80072c2 <_printf_i+0x196>
 80072d4:	4616      	mov	r6, r2
 80072d6:	e7bd      	b.n	8007254 <_printf_i+0x128>
 80072d8:	6833      	ldr	r3, [r6, #0]
 80072da:	6825      	ldr	r5, [r4, #0]
 80072dc:	6961      	ldr	r1, [r4, #20]
 80072de:	1d18      	adds	r0, r3, #4
 80072e0:	6030      	str	r0, [r6, #0]
 80072e2:	062e      	lsls	r6, r5, #24
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	d501      	bpl.n	80072ec <_printf_i+0x1c0>
 80072e8:	6019      	str	r1, [r3, #0]
 80072ea:	e002      	b.n	80072f2 <_printf_i+0x1c6>
 80072ec:	0668      	lsls	r0, r5, #25
 80072ee:	d5fb      	bpl.n	80072e8 <_printf_i+0x1bc>
 80072f0:	8019      	strh	r1, [r3, #0]
 80072f2:	2300      	movs	r3, #0
 80072f4:	6123      	str	r3, [r4, #16]
 80072f6:	4616      	mov	r6, r2
 80072f8:	e7bc      	b.n	8007274 <_printf_i+0x148>
 80072fa:	6833      	ldr	r3, [r6, #0]
 80072fc:	1d1a      	adds	r2, r3, #4
 80072fe:	6032      	str	r2, [r6, #0]
 8007300:	681e      	ldr	r6, [r3, #0]
 8007302:	6862      	ldr	r2, [r4, #4]
 8007304:	2100      	movs	r1, #0
 8007306:	4630      	mov	r0, r6
 8007308:	f7f8 ff6a 	bl	80001e0 <memchr>
 800730c:	b108      	cbz	r0, 8007312 <_printf_i+0x1e6>
 800730e:	1b80      	subs	r0, r0, r6
 8007310:	6060      	str	r0, [r4, #4]
 8007312:	6863      	ldr	r3, [r4, #4]
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	2300      	movs	r3, #0
 8007318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800731c:	e7aa      	b.n	8007274 <_printf_i+0x148>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	4632      	mov	r2, r6
 8007322:	4649      	mov	r1, r9
 8007324:	4640      	mov	r0, r8
 8007326:	47d0      	blx	sl
 8007328:	3001      	adds	r0, #1
 800732a:	d0ad      	beq.n	8007288 <_printf_i+0x15c>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	079b      	lsls	r3, r3, #30
 8007330:	d413      	bmi.n	800735a <_printf_i+0x22e>
 8007332:	68e0      	ldr	r0, [r4, #12]
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	4298      	cmp	r0, r3
 8007338:	bfb8      	it	lt
 800733a:	4618      	movlt	r0, r3
 800733c:	e7a6      	b.n	800728c <_printf_i+0x160>
 800733e:	2301      	movs	r3, #1
 8007340:	4632      	mov	r2, r6
 8007342:	4649      	mov	r1, r9
 8007344:	4640      	mov	r0, r8
 8007346:	47d0      	blx	sl
 8007348:	3001      	adds	r0, #1
 800734a:	d09d      	beq.n	8007288 <_printf_i+0x15c>
 800734c:	3501      	adds	r5, #1
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	9903      	ldr	r1, [sp, #12]
 8007352:	1a5b      	subs	r3, r3, r1
 8007354:	42ab      	cmp	r3, r5
 8007356:	dcf2      	bgt.n	800733e <_printf_i+0x212>
 8007358:	e7eb      	b.n	8007332 <_printf_i+0x206>
 800735a:	2500      	movs	r5, #0
 800735c:	f104 0619 	add.w	r6, r4, #25
 8007360:	e7f5      	b.n	800734e <_printf_i+0x222>
 8007362:	bf00      	nop
 8007364:	080077f1 	.word	0x080077f1
 8007368:	08007802 	.word	0x08007802

0800736c <memmove>:
 800736c:	4288      	cmp	r0, r1
 800736e:	b510      	push	{r4, lr}
 8007370:	eb01 0402 	add.w	r4, r1, r2
 8007374:	d902      	bls.n	800737c <memmove+0x10>
 8007376:	4284      	cmp	r4, r0
 8007378:	4623      	mov	r3, r4
 800737a:	d807      	bhi.n	800738c <memmove+0x20>
 800737c:	1e43      	subs	r3, r0, #1
 800737e:	42a1      	cmp	r1, r4
 8007380:	d008      	beq.n	8007394 <memmove+0x28>
 8007382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800738a:	e7f8      	b.n	800737e <memmove+0x12>
 800738c:	4402      	add	r2, r0
 800738e:	4601      	mov	r1, r0
 8007390:	428a      	cmp	r2, r1
 8007392:	d100      	bne.n	8007396 <memmove+0x2a>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800739a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800739e:	e7f7      	b.n	8007390 <memmove+0x24>

080073a0 <_sbrk_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	@ (80073bc <_sbrk_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7fa fd12 	bl	8001dd4 <_sbrk>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_sbrk_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_sbrk_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20004370 	.word	0x20004370

080073c0 <_realloc_r>:
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	4680      	mov	r8, r0
 80073c6:	4615      	mov	r5, r2
 80073c8:	460c      	mov	r4, r1
 80073ca:	b921      	cbnz	r1, 80073d6 <_realloc_r+0x16>
 80073cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	4611      	mov	r1, r2
 80073d2:	f7ff bc59 	b.w	8006c88 <_malloc_r>
 80073d6:	b92a      	cbnz	r2, 80073e4 <_realloc_r+0x24>
 80073d8:	f7ff fbea 	bl	8006bb0 <_free_r>
 80073dc:	2400      	movs	r4, #0
 80073de:	4620      	mov	r0, r4
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e4:	f000 f81a 	bl	800741c <_malloc_usable_size_r>
 80073e8:	4285      	cmp	r5, r0
 80073ea:	4606      	mov	r6, r0
 80073ec:	d802      	bhi.n	80073f4 <_realloc_r+0x34>
 80073ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80073f2:	d8f4      	bhi.n	80073de <_realloc_r+0x1e>
 80073f4:	4629      	mov	r1, r5
 80073f6:	4640      	mov	r0, r8
 80073f8:	f7ff fc46 	bl	8006c88 <_malloc_r>
 80073fc:	4607      	mov	r7, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	d0ec      	beq.n	80073dc <_realloc_r+0x1c>
 8007402:	42b5      	cmp	r5, r6
 8007404:	462a      	mov	r2, r5
 8007406:	4621      	mov	r1, r4
 8007408:	bf28      	it	cs
 800740a:	4632      	movcs	r2, r6
 800740c:	f7ff fbc2 	bl	8006b94 <memcpy>
 8007410:	4621      	mov	r1, r4
 8007412:	4640      	mov	r0, r8
 8007414:	f7ff fbcc 	bl	8006bb0 <_free_r>
 8007418:	463c      	mov	r4, r7
 800741a:	e7e0      	b.n	80073de <_realloc_r+0x1e>

0800741c <_malloc_usable_size_r>:
 800741c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007420:	1f18      	subs	r0, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	bfbc      	itt	lt
 8007426:	580b      	ldrlt	r3, [r1, r0]
 8007428:	18c0      	addlt	r0, r0, r3
 800742a:	4770      	bx	lr

0800742c <_init>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr

08007438 <_fini>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr
