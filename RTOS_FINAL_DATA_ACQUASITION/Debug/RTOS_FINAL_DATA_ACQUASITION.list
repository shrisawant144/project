
RTOS_FINAL_DATA_ACQUASITION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800e110  0800e110  0000f110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8d0  0800e8d0  000106c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8d0  0800e8d0  0000f8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8d8  0800e8d8  000106c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e8d8  0800e8d8  0000f8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8e0  0800e8e0  0000f8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c0  20000000  0800e8e4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106c0  2**0
                  CONTENTS
 10 .bss          000046dc  200006c0  200006c0  000106c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004d9c  20004d9c  000106c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac5b  00000000  00000000  000106f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a3b  00000000  00000000  0002b34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  0002ed88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001200  00000000  00000000  00030480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025aec  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c33  00000000  00000000  0005716c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e52ac  00000000  00000000  00070d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015604b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074f4  00000000  00000000  00156090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0015d584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006c0 	.word	0x200006c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e0f8 	.word	0x0800e0f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006c4 	.word	0x200006c4
 80001cc:	0800e0f8 	.word	0x0800e0f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <uart_debug_printf>:
extern UART_HandleTypeDef huart2;
static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,uint8_t len);
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,int32_t *fine_temp);
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,int32_t fine_temp);
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,int32_t fine_temp);
void uart_debug_printf(const char* fmt, ...) {
 8000f78:	b40f      	push	{r0, r1, r2, r3}
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b0a2      	sub	sp, #136	@ 0x88
 8000f7e:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, fmt);
 8000f80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f84:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000f86:	f107 0008 	add.w	r0, r7, #8
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	f008 fc75 	bl	8009880 <vsnprintf>
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff f918 	bl	80001d0 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f107 0108 	add.w	r1, r7, #8
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <uart_debug_printf+0x48>)
 8000fae:	f005 fc81 	bl	80068b4 <HAL_UART_Transmit>
}
 8000fb2:	bf00      	nop
 8000fb4:	3788      	adds	r7, #136	@ 0x88
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fbc:	b004      	add	sp, #16
 8000fbe:	4770      	bx	lr
 8000fc0:	20000b3c 	.word	0x20000b3c

08000fc4 <bmp280_init_default_params>:

void bmp280_init_default_params(bmp280_params_t *params) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    params->mode = BMP280_MODE_NORMAL;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	701a      	strb	r2, [r3, #0]
    params->filter = BMP280_FILTER_OFF;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	705a      	strb	r2, [r3, #1]
    params->oversampling_pressure = BMP280_STANDARD;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	709a      	strb	r2, [r3, #2]
    params->oversampling_temperature = BMP280_STANDARD;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	70da      	strb	r2, [r3, #3]
    params->oversampling_humidity = BMP280_STANDARD;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	711a      	strb	r2, [r3, #4]
    params->standby = BMP280_STANDBY_250;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	715a      	strb	r2, [r3, #5]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <read_register16>:

bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af04      	add	r7, sp, #16
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	460b      	mov	r3, r1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	72fb      	strb	r3, [r7, #11]
    uint16_t tx_buff;
    uint8_t rx_buff[2];
    tx_buff = (dev->addr << 1);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	82fb      	strh	r3, [r7, #22]

    uart_debug_printf("Reading register 0x%02X\r\n", addr);
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	4619      	mov	r1, r3
 8001016:	4819      	ldr	r0, [pc, #100]	@ (800107c <read_register16+0x80>)
 8001018:	f7ff ffae 	bl	8000f78 <uart_debug_printf>

    if (HAL_I2C_Mem_Read(&hi2c1, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK) {
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	b29a      	uxth	r2, r3
 8001020:	8af9      	ldrh	r1, [r7, #22]
 8001022:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	4812      	ldr	r0, [pc, #72]	@ (8001080 <read_register16+0x84>)
 8001036:	f003 f915 	bl	8004264 <HAL_I2C_Mem_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d113      	bne.n	8001068 <read_register16+0x6c>
        *value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001040:	7d7b      	ldrb	r3, [r7, #21]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7d3b      	ldrb	r3, [r7, #20]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	801a      	strh	r2, [r3, #0]
        uart_debug_printf("Read 0x%04X from register 0x%02X\r\n", *value, addr);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	461a      	mov	r2, r3
 800105e:	4809      	ldr	r0, [pc, #36]	@ (8001084 <read_register16+0x88>)
 8001060:	f7ff ff8a 	bl	8000f78 <uart_debug_printf>
        return true;
 8001064:	2301      	movs	r3, #1
 8001066:	e005      	b.n	8001074 <read_register16+0x78>
    } else {
        uart_debug_printf("Failed to read from register 0x%02X\r\n", addr);
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	4619      	mov	r1, r3
 800106c:	4806      	ldr	r0, [pc, #24]	@ (8001088 <read_register16+0x8c>)
 800106e:	f7ff ff83 	bl	8000f78 <uart_debug_printf>
        return false;
 8001072:	2300      	movs	r3, #0
    }
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	0800e110 	.word	0x0800e110
 8001080:	20000aa0 	.word	0x20000aa0
 8001084:	0800e12c 	.word	0x0800e12c
 8001088:	0800e150 	.word	0x0800e150

0800108c <read_calibration_data>:

bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    uart_debug_printf("Reading calibration data\n");
 8001094:	4843      	ldr	r0, [pc, #268]	@ (80011a4 <read_calibration_data+0x118>)
 8001096:	f7ff ff6f 	bl	8000f78 <uart_debug_printf>

    if (read_register16(dev, 0x88, &dev->dig_T1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	461a      	mov	r2, r3
 800109e:	2188      	movs	r1, #136	@ 0x88
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffab 	bl	8000ffc <read_register16>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d072      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3302      	adds	r3, #2
 80010b0:	461a      	mov	r2, r3
 80010b2:	218a      	movs	r1, #138	@ 0x8a
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffa1 	bl	8000ffc <read_register16>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d068      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3304      	adds	r3, #4
 80010c4:	461a      	mov	r2, r3
 80010c6:	218c      	movs	r1, #140	@ 0x8c
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff97 	bl	8000ffc <read_register16>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d05e      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x8e, &dev->dig_P1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3306      	adds	r3, #6
 80010d8:	461a      	mov	r2, r3
 80010da:	218e      	movs	r1, #142	@ 0x8e
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff8d 	bl	8000ffc <read_register16>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d054      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3308      	adds	r3, #8
 80010ec:	461a      	mov	r2, r3
 80010ee:	2190      	movs	r1, #144	@ 0x90
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff83 	bl	8000ffc <read_register16>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d04a      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	330a      	adds	r3, #10
 8001100:	461a      	mov	r2, r3
 8001102:	2192      	movs	r1, #146	@ 0x92
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff79 	bl	8000ffc <read_register16>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d040      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	330c      	adds	r3, #12
 8001114:	461a      	mov	r2, r3
 8001116:	2194      	movs	r1, #148	@ 0x94
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff6f 	bl	8000ffc <read_register16>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d036      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	330e      	adds	r3, #14
 8001128:	461a      	mov	r2, r3
 800112a:	2196      	movs	r1, #150	@ 0x96
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff65 	bl	8000ffc <read_register16>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d02c      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3310      	adds	r3, #16
 800113c:	461a      	mov	r2, r3
 800113e:	2198      	movs	r1, #152	@ 0x98
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff5b 	bl	8000ffc <read_register16>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d022      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3312      	adds	r3, #18
 8001150:	461a      	mov	r2, r3
 8001152:	219a      	movs	r1, #154	@ 0x9a
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff51 	bl	8000ffc <read_register16>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d018      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3314      	adds	r3, #20
 8001164:	461a      	mov	r2, r3
 8001166:	219c      	movs	r1, #156	@ 0x9c
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff47 	bl	8000ffc <read_register16>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <read_calibration_data+0x106>
        && read_register16(dev, 0x9e, (uint16_t *) &dev->dig_P9)) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3316      	adds	r3, #22
 8001178:	461a      	mov	r2, r3
 800117a:	219e      	movs	r1, #158	@ 0x9e
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff3d 	bl	8000ffc <read_register16>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <read_calibration_data+0x106>
        uart_debug_printf("Successfully read calibration data\r\n");
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <read_calibration_data+0x11c>)
 800118a:	f7ff fef5 	bl	8000f78 <uart_debug_printf>
        return true;
 800118e:	2301      	movs	r3, #1
 8001190:	e003      	b.n	800119a <read_calibration_data+0x10e>
    }

    uart_debug_printf("Failed to read calibration data\r\n");
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <read_calibration_data+0x120>)
 8001194:	f7ff fef0 	bl	8000f78 <uart_debug_printf>
    return false;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	0800e178 	.word	0x0800e178
 80011a8:	0800e194 	.word	0x0800e194
 80011ac:	0800e1bc 	.word	0x0800e1bc

080011b0 <read_hum_calibration_data>:

bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    uint16_t h4, h5;

    uart_debug_printf("Reading humidity calibration data\r\n");
 80011b8:	4832      	ldr	r0, [pc, #200]	@ (8001284 <read_hum_calibration_data+0xd4>)
 80011ba:	f7ff fedd 	bl	8000f78 <uart_debug_printf>

    if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f103 0218 	add.w	r2, r3, #24
 80011c4:	2301      	movs	r3, #1
 80011c6:	21a1      	movs	r1, #161	@ 0xa1
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 fa1f 	bl	800160c <read_data>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d14e      	bne.n	8001272 <read_hum_calibration_data+0xc2>
        && read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	331a      	adds	r3, #26
 80011d8:	461a      	mov	r2, r3
 80011da:	21e1      	movs	r1, #225	@ 0xe1
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff0d 	bl	8000ffc <read_register16>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d044      	beq.n	8001272 <read_hum_calibration_data+0xc2>
        && !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 021c 	add.w	r2, r3, #28
 80011ee:	2301      	movs	r3, #1
 80011f0:	21e3      	movs	r1, #227	@ 0xe3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fa0a 	bl	800160c <read_data>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d139      	bne.n	8001272 <read_hum_calibration_data+0xc2>
        && read_register16(dev, 0xe4, &h4)
 80011fe:	f107 030e 	add.w	r3, r7, #14
 8001202:	461a      	mov	r2, r3
 8001204:	21e4      	movs	r1, #228	@ 0xe4
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fef8 	bl	8000ffc <read_register16>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d02f      	beq.n	8001272 <read_hum_calibration_data+0xc2>
        && read_register16(dev, 0xe5, &h5)
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	461a      	mov	r2, r3
 8001218:	21e5      	movs	r1, #229	@ 0xe5
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff feee 	bl	8000ffc <read_register16>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d025      	beq.n	8001272 <read_hum_calibration_data+0xc2>
        && !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800122c:	2301      	movs	r3, #1
 800122e:	21e7      	movs	r1, #231	@ 0xe7
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f9eb 	bl	800160c <read_data>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d11a      	bne.n	8001272 <read_hum_calibration_data+0xc2>
        dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	b21b      	sxth	r3, r3
 8001242:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001246:	b21a      	sxth	r2, r3
 8001248:	89fb      	ldrh	r3, [r7, #14]
 800124a:	121b      	asrs	r3, r3, #8
 800124c:	b21b      	sxth	r3, r3
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	83da      	strh	r2, [r3, #30]
        dev->dig_H5 = h5 >> 4;
 800125c:	89bb      	ldrh	r3, [r7, #12]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	b29b      	uxth	r3, r3
 8001262:	b21a      	sxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	841a      	strh	r2, [r3, #32]

        uart_debug_printf("Successfully read humidity calibration data\r\n");
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <read_hum_calibration_data+0xd8>)
 800126a:	f7ff fe85 	bl	8000f78 <uart_debug_printf>
        return true;
 800126e:	2301      	movs	r3, #1
 8001270:	e003      	b.n	800127a <read_hum_calibration_data+0xca>
    }

    uart_debug_printf("Failed to read humidity calibration data\r\n");
 8001272:	4806      	ldr	r0, [pc, #24]	@ (800128c <read_hum_calibration_data+0xdc>)
 8001274:	f7ff fe80 	bl	8000f78 <uart_debug_printf>
    return false;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	0800e1e0 	.word	0x0800e1e0
 8001288:	0800e204 	.word	0x0800e204
 800128c:	0800e234 	.word	0x0800e234

08001290 <write_register8>:

int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af04      	add	r7, sp, #16
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
 800129c:	4613      	mov	r3, r2
 800129e:	70bb      	strb	r3, [r7, #2]
    uint16_t tx_buff;
    tx_buff = (dev->addr << 1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	81fb      	strh	r3, [r7, #14]

    uart_debug_printf("Writing 0x%02X to register 0x%02X\r\n", value, addr);
 80012a8:	78bb      	ldrb	r3, [r7, #2]
 80012aa:	4619      	mov	r1, r3
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4812      	ldr	r0, [pc, #72]	@ (80012fc <write_register8+0x6c>)
 80012b2:	f7ff fe61 	bl	8000f78 <uart_debug_printf>

    if (HAL_I2C_Mem_Write(&hi2c1, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) {
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	89f9      	ldrh	r1, [r7, #14]
 80012bc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	1cbb      	adds	r3, r7, #2
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <write_register8+0x70>)
 80012ce:	f002 fecf 	bl	8004070 <HAL_I2C_Mem_Write>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d106      	bne.n	80012e6 <write_register8+0x56>
        uart_debug_printf("Successfully wrote to register 0x%02X\r\n", addr);
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <write_register8+0x74>)
 80012de:	f7ff fe4b 	bl	8000f78 <uart_debug_printf>
        return false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e005      	b.n	80012f2 <write_register8+0x62>
    } else {
        uart_debug_printf("Failed to write to register 0x%02X\r\n", addr);
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <write_register8+0x78>)
 80012ec:	f7ff fe44 	bl	8000f78 <uart_debug_printf>
        return true;
 80012f0:	2301      	movs	r3, #1
    }
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	0800e260 	.word	0x0800e260
 8001300:	20000aa0 	.word	0x20000aa0
 8001304:	0800e284 	.word	0x0800e284
 8001308:	0800e2ac 	.word	0x0800e2ac

0800130c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    uart_debug_printf("Initializing BMP280\r\n");
 8001316:	4860      	ldr	r0, [pc, #384]	@ (8001498 <bmp280_init+0x18c>)
 8001318:	f7ff fe2e 	bl	8000f78 <uart_debug_printf>

    if (dev->addr != BMP280_I2C_ADDRESS_0 && dev->addr != BMP280_I2C_ADDRESS_1) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001320:	2b76      	cmp	r3, #118	@ 0x76
 8001322:	d008      	beq.n	8001336 <bmp280_init+0x2a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001328:	2b77      	cmp	r3, #119	@ 0x77
 800132a:	d004      	beq.n	8001336 <bmp280_init+0x2a>
        uart_debug_printf("Invalid BMP280 I2C address\r\n");
 800132c:	485b      	ldr	r0, [pc, #364]	@ (800149c <bmp280_init+0x190>)
 800132e:	f7ff fe23 	bl	8000f78 <uart_debug_printf>
        return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e0ac      	b.n	8001490 <bmp280_init+0x184>
    }

    if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800133c:	2301      	movs	r3, #1
 800133e:	21d0      	movs	r1, #208	@ 0xd0
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f963 	bl	800160c <read_data>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <bmp280_init+0x4a>
        uart_debug_printf("Failed to read BMP280 ID\r\n");
 800134c:	4854      	ldr	r0, [pc, #336]	@ (80014a0 <bmp280_init+0x194>)
 800134e:	f7ff fe13 	bl	8000f78 <uart_debug_printf>
        return false;
 8001352:	2300      	movs	r3, #0
 8001354:	e09c      	b.n	8001490 <bmp280_init+0x184>
    }

    uart_debug_printf("BMP280 ID: 0x%02X\n", dev->id);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800135c:	4619      	mov	r1, r3
 800135e:	4851      	ldr	r0, [pc, #324]	@ (80014a4 <bmp280_init+0x198>)
 8001360:	f7ff fe0a 	bl	8000f78 <uart_debug_printf>

    if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800136a:	2b58      	cmp	r3, #88	@ 0x58
 800136c:	d009      	beq.n	8001382 <bmp280_init+0x76>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001374:	2b60      	cmp	r3, #96	@ 0x60
 8001376:	d004      	beq.n	8001382 <bmp280_init+0x76>
        uart_debug_printf("Invalid BMP280 ID\r\n");
 8001378:	484b      	ldr	r0, [pc, #300]	@ (80014a8 <bmp280_init+0x19c>)
 800137a:	f7ff fdfd 	bl	8000f78 <uart_debug_printf>
        return false;
 800137e:	2300      	movs	r3, #0
 8001380:	e086      	b.n	8001490 <bmp280_init+0x184>
    }

    // Soft reset.
    if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001382:	22b6      	movs	r2, #182	@ 0xb6
 8001384:	21e0      	movs	r1, #224	@ 0xe0
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff82 	bl	8001290 <write_register8>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <bmp280_init+0x90>
        uart_debug_printf("Failed to reset BMP280\r\n");
 8001392:	4846      	ldr	r0, [pc, #280]	@ (80014ac <bmp280_init+0x1a0>)
 8001394:	f7ff fdf0 	bl	8000f78 <uart_debug_printf>
        return false;
 8001398:	2300      	movs	r3, #0
 800139a:	e079      	b.n	8001490 <bmp280_init+0x184>
    }

    // Wait until finished copying over the NVP data.
    while (1) {
        uint8_t status;
        if (!read_data(dev, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0)
 800139c:	f107 020c 	add.w	r2, r7, #12
 80013a0:	2301      	movs	r3, #1
 80013a2:	21f3      	movs	r1, #243	@ 0xf3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f931 	bl	800160c <read_data>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f5      	bne.n	800139c <bmp280_init+0x90>
 80013b0:	7b3b      	ldrb	r3, [r7, #12]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <bmp280_init+0x90>
            break;
    }

    if (!read_calibration_data(dev)) {
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fe66 	bl	800108c <read_calibration_data>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f083 0301 	eor.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d100      	bne.n	80013ce <bmp280_init+0xc2>
 80013cc:	e001      	b.n	80013d2 <bmp280_init+0xc6>
        return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e05e      	b.n	8001490 <bmp280_init+0x184>
    }

    if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80013d8:	2b60      	cmp	r3, #96	@ 0x60
 80013da:	d10a      	bne.n	80013f2 <bmp280_init+0xe6>
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fee7 	bl	80011b0 <read_hum_calibration_data>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <bmp280_init+0xe6>
        return false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e04e      	b.n	8001490 <bmp280_init+0x184>
    }

    uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	b25b      	sxtb	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b25b      	sxtb	r3, r3
 8001406:	73fb      	strb	r3, [r7, #15]
    if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	461a      	mov	r2, r3
 800140c:	21f5      	movs	r1, #245	@ 0xf5
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff3e 	bl	8001290 <write_register8>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <bmp280_init+0x112>
        return false;
 800141a:	2300      	movs	r3, #0
 800141c:	e038      	b.n	8001490 <bmp280_init+0x184>
    }

    if (params->mode == BMP280_MODE_FORCED) {
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d102      	bne.n	800142c <bmp280_init+0x120>
        params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    }

    uint8_t ctrl = (params->oversampling_temperature << 5)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	78db      	ldrb	r3, [r3, #3]
 8001430:	015b      	lsls	r3, r3, #5
            | (params->oversampling_pressure << 2) | (params->mode);
 8001432:	b25a      	sxtb	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	b25b      	sxtb	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b25a      	sxtb	r2, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b25b      	sxtb	r3, r3
    uint8_t ctrl = (params->oversampling_temperature << 5)
 800144a:	73bb      	strb	r3, [r7, #14]

    if (dev->id == BME280_CHIP_ID) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001452:	2b60      	cmp	r3, #96	@ 0x60
 8001454:	d10d      	bne.n	8001472 <bmp280_init+0x166>
        // Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
        uint8_t ctrl_hum = params->oversampling_humidity;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	737b      	strb	r3, [r7, #13]
        if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	461a      	mov	r2, r3
 8001460:	21f2      	movs	r1, #242	@ 0xf2
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff14 	bl	8001290 <write_register8>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <bmp280_init+0x166>
            return false;
 800146e:	2300      	movs	r3, #0
 8001470:	e00e      	b.n	8001490 <bmp280_init+0x184>
        }
    }

    if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	461a      	mov	r2, r3
 8001476:	21f4      	movs	r1, #244	@ 0xf4
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff09 	bl	8001290 <write_register8>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <bmp280_init+0x17c>
        return false;
 8001484:	2300      	movs	r3, #0
 8001486:	e003      	b.n	8001490 <bmp280_init+0x184>
    }

    uart_debug_printf("BMP280 initialized successfully\n");
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <bmp280_init+0x1a4>)
 800148a:	f7ff fd75 	bl	8000f78 <uart_debug_printf>
    return true;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	0800e2d4 	.word	0x0800e2d4
 800149c:	0800e2ec 	.word	0x0800e2ec
 80014a0:	0800e30c 	.word	0x0800e30c
 80014a4:	0800e328 	.word	0x0800e328
 80014a8:	0800e33c 	.word	0x0800e33c
 80014ac:	0800e350 	.word	0x0800e350
 80014b0:	0800e36c 	.word	0x0800e36c

080014b4 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    uint8_t ctrl;
    if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 80014bc:	f107 020f 	add.w	r2, r7, #15
 80014c0:	2301      	movs	r3, #1
 80014c2:	21f4      	movs	r1, #244	@ 0xf4
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f8a1 	bl	800160c <read_data>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <bmp280_force_measurement+0x20>
        return false;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e015      	b.n	8001500 <bmp280_force_measurement+0x4c>
    ctrl &= ~0b11;  // clear two lower bits
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
    ctrl |= BMP280_MODE_FORCED;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	73fb      	strb	r3, [r7, #15]
    if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	461a      	mov	r2, r3
 80014ec:	21f4      	movs	r1, #244	@ 0xf4
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fece 	bl	8001290 <write_register8>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <bmp280_force_measurement+0x4a>
        return false;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <bmp280_force_measurement+0x4c>
    }
    return true;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    uint8_t status;
    if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8001510:	f107 020f 	add.w	r2, r7, #15
 8001514:	2301      	movs	r3, #1
 8001516:	21f3      	movs	r1, #243	@ 0xf3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f877 	bl	800160c <read_data>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <bmp280_is_measuring+0x20>
        return false;
 8001524:	2300      	movs	r3, #0
 8001526:	e007      	b.n	8001538 <bmp280_is_measuring+0x30>
    if (status & (1 << 3)) {
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <bmp280_is_measuring+0x2e>
        return true;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <bmp280_is_measuring+0x30>
    }
    return false;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
        uint32_t *humidity) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	@ 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]
    int32_t adc_pressure;
    int32_t adc_temp;
    uint8_t data[8];

    // Only the BME280 supports reading the humidity.
    if (dev->id != BME280_CHIP_ID) {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001554:	2b60      	cmp	r3, #96	@ 0x60
 8001556:	d007      	beq.n	8001568 <bmp280_read_fixed+0x28>
        if (humidity)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <bmp280_read_fixed+0x24>
            *humidity = 0;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
        humidity = NULL;
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
    }

    // Need to read in one sequence to ensure they match.
    size_t size = humidity ? 8 : 6;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <bmp280_read_fixed+0x32>
 800156e:	2308      	movs	r3, #8
 8001570:	e000      	b.n	8001574 <bmp280_read_fixed+0x34>
 8001572:	2306      	movs	r3, #6
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (read_data(dev, 0xf7, data, size)) {
 8001576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f107 0218 	add.w	r2, r7, #24
 800157e:	21f7      	movs	r1, #247	@ 0xf7
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f843 	bl	800160c <read_data>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <bmp280_read_fixed+0x50>
        return false;
 800158c:	2300      	movs	r3, #0
 800158e:	e038      	b.n	8001602 <bmp280_read_fixed+0xc2>
    }

    adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001590:	7e3b      	ldrb	r3, [r7, #24]
 8001592:	031a      	lsls	r2, r3, #12
 8001594:	7e7b      	ldrb	r3, [r7, #25]
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4313      	orrs	r3, r2
 800159a:	7eba      	ldrb	r2, [r7, #26]
 800159c:	0912      	lsrs	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	4313      	orrs	r3, r2
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80015a4:	7efb      	ldrb	r3, [r7, #27]
 80015a6:	031a      	lsls	r2, r3, #12
 80015a8:	7f3b      	ldrb	r3, [r7, #28]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4313      	orrs	r3, r2
 80015ae:	7f7a      	ldrb	r2, [r7, #29]
 80015b0:	0912      	lsrs	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	4313      	orrs	r3, r2
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24

    int32_t fine_temp;
    *temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	461a      	mov	r2, r3
 80015be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f84d 	bl	8001660 <compensate_temperature>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	601a      	str	r2, [r3, #0]
    *pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	461a      	mov	r2, r3
 80015d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f87d 	bl	80016d2 <compensate_pressure>
 80015d8:	4602      	mov	r2, r0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]

    if (humidity) {
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00d      	beq.n	8001600 <bmp280_read_fixed+0xc0>
        int32_t adc_humidity = data[6] << 8 | data[7];
 80015e4:	7fbb      	ldrb	r3, [r7, #30]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	7ffa      	ldrb	r2, [r7, #31]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	623b      	str	r3, [r7, #32]
        *humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	461a      	mov	r2, r3
 80015f2:	6a39      	ldr	r1, [r7, #32]
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 fb2a 	bl	8001c4e <compensate_humidity>
 80015fa:	4602      	mov	r2, r0
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
    }

    return true;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	3730      	adds	r7, #48	@ 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <read_data>:
        return true;
    }

    return false;
}
static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,uint8_t len) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af04      	add	r7, sp, #16
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	461a      	mov	r2, r3
 8001618:	460b      	mov	r3, r1
 800161a:	72fb      	strb	r3, [r7, #11]
 800161c:	4613      	mov	r3, r2
 800161e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(&hi2c1, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	b29a      	uxth	r2, r3
 800162c:	7abb      	ldrb	r3, [r7, #10]
 800162e:	b29b      	uxth	r3, r3
 8001630:	8af9      	ldrh	r1, [r7, #22]
 8001632:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001636:	9002      	str	r0, [sp, #8]
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	4806      	ldr	r0, [pc, #24]	@ (800165c <read_data+0x50>)
 8001642:	f002 fe0f 	bl	8004264 <HAL_I2C_Mem_Read>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <read_data+0x44>
		return 0;
 800164c:	2300      	movs	r3, #0
 800164e:	e000      	b.n	8001652 <read_data+0x46>
	else
		return 1;
 8001650:	2301      	movs	r3, #1

}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000aa0 	.word	0x20000aa0

08001660 <compensate_temperature>:

 static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	10da      	asrs	r2, r3, #3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800167e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001682:	12db      	asrs	r3, r3, #11
 8001684:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	111b      	asrs	r3, r3, #4
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	8812      	ldrh	r2, [r2, #0]
 800168e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	1112      	asrs	r2, r2, #4
 8001694:	68f9      	ldr	r1, [r7, #12]
 8001696:	8809      	ldrh	r1, [r1, #0]
 8001698:	1a52      	subs	r2, r2, r1
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016aa:	139b      	asrs	r3, r3, #14
 80016ac:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	441a      	add	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3380      	adds	r3, #128	@ 0x80
 80016c4:	121b      	asrs	r3, r3, #8
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <compensate_pressure>:
 static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80016d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d6:	b0cc      	sub	sp, #304	@ 0x130
 80016d8:	af00      	add	r7, sp, #0
 80016da:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80016de:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80016e2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80016e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016ea:	17da      	asrs	r2, r3, #31
 80016ec:	461c      	mov	r4, r3
 80016ee:	4615      	mov	r5, r2
 80016f0:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80016f4:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 80016f8:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80016fc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001700:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001704:	fb03 f102 	mul.w	r1, r3, r2
 8001708:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800170c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	18ca      	adds	r2, r1, r3
 8001716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800171a:	fba3 8903 	umull	r8, r9, r3, r3
 800171e:	eb02 0309 	add.w	r3, r2, r9
 8001722:	4699      	mov	r9, r3
 8001724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001728:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800172c:	b21b      	sxth	r3, r3
 800172e:	17da      	asrs	r2, r3, #31
 8001730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001734:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001738:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800173c:	4603      	mov	r3, r0
 800173e:	fb03 f209 	mul.w	r2, r3, r9
 8001742:	460b      	mov	r3, r1
 8001744:	fb08 f303 	mul.w	r3, r8, r3
 8001748:	4413      	add	r3, r2
 800174a:	4602      	mov	r2, r0
 800174c:	fba8 1202 	umull	r1, r2, r8, r2
 8001750:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001754:	460a      	mov	r2, r1
 8001756:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800175a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800175e:	4413      	add	r3, r2
 8001760:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001764:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001768:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800176c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001774:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001778:	b21b      	sxth	r3, r3
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001780:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001788:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800178c:	462a      	mov	r2, r5
 800178e:	fb02 f203 	mul.w	r2, r2, r3
 8001792:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001796:	4621      	mov	r1, r4
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	441a      	add	r2, r3
 800179e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017a2:	4621      	mov	r1, r4
 80017a4:	fba3 1301 	umull	r1, r3, r3, r1
 80017a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017ac:	460b      	mov	r3, r1
 80017ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80017b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80017b6:	18d3      	adds	r3, r2, r3
 80017b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80017c8:	462b      	mov	r3, r5
 80017ca:	0459      	lsls	r1, r3, #17
 80017cc:	4623      	mov	r3, r4
 80017ce:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80017d2:	4623      	mov	r3, r4
 80017d4:	0458      	lsls	r0, r3, #17
 80017d6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017da:	1814      	adds	r4, r2, r0
 80017dc:	643c      	str	r4, [r7, #64]	@ 0x40
 80017de:	414b      	adcs	r3, r1
 80017e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80017e2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80017e6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80017ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	17da      	asrs	r2, r3, #31
 80017f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80017fa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80017fe:	f04f 0000 	mov.w	r0, #0
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800180a:	00d9      	lsls	r1, r3, #3
 800180c:	2000      	movs	r0, #0
 800180e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001812:	1814      	adds	r4, r2, r0
 8001814:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001816:	414b      	adcs	r3, r1
 8001818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800181a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800181e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001822:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001826:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800182a:	fb03 f102 	mul.w	r1, r3, r2
 800182e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001832:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	18ca      	adds	r2, r1, r3
 800183c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001840:	fba3 1303 	umull	r1, r3, r3, r3
 8001844:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001848:	460b      	mov	r3, r1
 800184a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800184e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001852:	18d3      	adds	r3, r2, r3
 8001854:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800185c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001860:	b21b      	sxth	r3, r3
 8001862:	17da      	asrs	r2, r3, #31
 8001864:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001868:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800186c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001870:	462b      	mov	r3, r5
 8001872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001876:	4642      	mov	r2, r8
 8001878:	fb02 f203 	mul.w	r2, r2, r3
 800187c:	464b      	mov	r3, r9
 800187e:	4621      	mov	r1, r4
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	4622      	mov	r2, r4
 8001888:	4641      	mov	r1, r8
 800188a:	fba2 1201 	umull	r1, r2, r2, r1
 800188e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001892:	460a      	mov	r2, r1
 8001894:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001898:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800189c:	4413      	add	r3, r2
 800189e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80018ae:	4623      	mov	r3, r4
 80018b0:	0a18      	lsrs	r0, r3, #8
 80018b2:	462b      	mov	r3, r5
 80018b4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018b8:	462b      	mov	r3, r5
 80018ba:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80018bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	17da      	asrs	r2, r3, #31
 80018c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80018cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80018d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018d4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80018d8:	464a      	mov	r2, r9
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018e2:	4644      	mov	r4, r8
 80018e4:	fb04 f303 	mul.w	r3, r4, r3
 80018e8:	441a      	add	r2, r3
 80018ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018ee:	4644      	mov	r4, r8
 80018f0:	fba3 4304 	umull	r4, r3, r3, r4
 80018f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018f8:	4623      	mov	r3, r4
 80018fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80018fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001902:	18d3      	adds	r3, r2, r3
 8001904:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001914:	464c      	mov	r4, r9
 8001916:	0323      	lsls	r3, r4, #12
 8001918:	4644      	mov	r4, r8
 800191a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800191e:	4644      	mov	r4, r8
 8001920:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001922:	1884      	adds	r4, r0, r2
 8001924:	633c      	str	r4, [r7, #48]	@ 0x30
 8001926:	eb41 0303 	adc.w	r3, r1, r3
 800192a:	637b      	str	r3, [r7, #52]	@ 0x34
 800192c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001930:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001934:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001938:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800193c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001940:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001948:	88db      	ldrh	r3, [r3, #6]
 800194a:	b29b      	uxth	r3, r3
 800194c:	2200      	movs	r2, #0
 800194e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001952:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800195a:	462b      	mov	r3, r5
 800195c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001960:	4642      	mov	r2, r8
 8001962:	fb02 f203 	mul.w	r2, r2, r3
 8001966:	464b      	mov	r3, r9
 8001968:	4621      	mov	r1, r4
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	4622      	mov	r2, r4
 8001972:	4641      	mov	r1, r8
 8001974:	fba2 1201 	umull	r1, r2, r2, r1
 8001978:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800197c:	460a      	mov	r2, r1
 800197e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001982:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001986:	4413      	add	r3, r2
 8001988:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001998:	4629      	mov	r1, r5
 800199a:	104a      	asrs	r2, r1, #1
 800199c:	4629      	mov	r1, r5
 800199e:	17cb      	asrs	r3, r1, #31
 80019a0:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80019a4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80019a8:	4313      	orrs	r3, r2
 80019aa:	d101      	bne.n	80019b0 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80019ac:	2300      	movs	r3, #0
 80019ae:	e148      	b.n	8001c42 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80019b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019b4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80019b8:	17da      	asrs	r2, r3, #31
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019be:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80019c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80019c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019ca:	105b      	asrs	r3, r3, #1
 80019cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80019d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d4:	07db      	lsls	r3, r3, #31
 80019d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019da:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019de:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80019e2:	4621      	mov	r1, r4
 80019e4:	1a89      	subs	r1, r1, r2
 80019e6:	67b9      	str	r1, [r7, #120]	@ 0x78
 80019e8:	4629      	mov	r1, r5
 80019ea:	eb61 0303 	sbc.w	r3, r1, r3
 80019ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019f0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80019f4:	4622      	mov	r2, r4
 80019f6:	462b      	mov	r3, r5
 80019f8:	1891      	adds	r1, r2, r2
 80019fa:	6239      	str	r1, [r7, #32]
 80019fc:	415b      	adcs	r3, r3
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a04:	4621      	mov	r1, r4
 8001a06:	1851      	adds	r1, r2, r1
 8001a08:	61b9      	str	r1, [r7, #24]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	414b      	adcs	r3, r1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	018b      	lsls	r3, r1, #6
 8001a20:	4641      	mov	r1, r8
 8001a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a26:	4641      	mov	r1, r8
 8001a28:	018a      	lsls	r2, r1, #6
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	1889      	adds	r1, r1, r2
 8001a2e:	6139      	str	r1, [r7, #16]
 8001a30:	4649      	mov	r1, r9
 8001a32:	eb43 0101 	adc.w	r1, r3, r1
 8001a36:	6179      	str	r1, [r7, #20]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a44:	4649      	mov	r1, r9
 8001a46:	008b      	lsls	r3, r1, #2
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a4e:	4641      	mov	r1, r8
 8001a50:	008a      	lsls	r2, r1, #2
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	4622      	mov	r2, r4
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	462a      	mov	r2, r5
 8001a62:	eb42 0303 	adc.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a74:	4649      	mov	r1, r9
 8001a76:	008b      	lsls	r3, r1, #2
 8001a78:	4641      	mov	r1, r8
 8001a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a7e:	4641      	mov	r1, r8
 8001a80:	008a      	lsls	r2, r1, #2
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	4622      	mov	r2, r4
 8001a8a:	189b      	adds	r3, r3, r2
 8001a8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a8e:	462b      	mov	r3, r5
 8001a90:	460a      	mov	r2, r1
 8001a92:	eb42 0303 	adc.w	r3, r2, r3
 8001a96:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a98:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001aa0:	f7ff f8a2 	bl	8000be8 <__aeabi_ldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ab0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	17da      	asrs	r2, r3, #31
 8001ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001abc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0b50      	lsrs	r0, r2, #13
 8001aca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ace:	1359      	asrs	r1, r3, #13
 8001ad0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	fb00 f203 	mul.w	r2, r0, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	fb03 f301 	mul.w	r3, r3, r1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	fba2 1200 	umull	r1, r2, r2, r0
 8001ae8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001aec:	460a      	mov	r2, r1
 8001aee:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001af2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001af6:	4413      	add	r3, r2
 8001af8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001afc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	0b50      	lsrs	r0, r2, #13
 8001b0a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b0e:	1359      	asrs	r1, r3, #13
 8001b10:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001b14:	462b      	mov	r3, r5
 8001b16:	fb00 f203 	mul.w	r2, r0, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	fb03 f301 	mul.w	r3, r3, r1
 8001b20:	4413      	add	r3, r2
 8001b22:	4622      	mov	r2, r4
 8001b24:	fba2 1200 	umull	r1, r2, r2, r0
 8001b28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b32:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b36:	4413      	add	r3, r2
 8001b38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b48:	4621      	mov	r1, r4
 8001b4a:	0e4a      	lsrs	r2, r1, #25
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b52:	4629      	mov	r1, r5
 8001b54:	164b      	asrs	r3, r1, #25
 8001b56:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b5e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	17da      	asrs	r2, r3, #31
 8001b66:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b68:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b72:	462a      	mov	r2, r5
 8001b74:	fb02 f203 	mul.w	r2, r2, r3
 8001b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b88:	4621      	mov	r1, r4
 8001b8a:	fba2 1201 	umull	r1, r2, r2, r1
 8001b8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b92:	460a      	mov	r2, r1
 8001b94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001bae:	4621      	mov	r1, r4
 8001bb0:	0cca      	lsrs	r2, r1, #19
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001bb8:	4629      	mov	r1, r5
 8001bba:	14cb      	asrs	r3, r1, #19
 8001bbc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001bc0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001bc4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001bc8:	1884      	adds	r4, r0, r2
 8001bca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001bcc:	eb41 0303 	adc.w	r3, r1, r3
 8001bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bd2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bd6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001bda:	4621      	mov	r1, r4
 8001bdc:	1889      	adds	r1, r1, r2
 8001bde:	6539      	str	r1, [r7, #80]	@ 0x50
 8001be0:	4629      	mov	r1, r5
 8001be2:	eb43 0101 	adc.w	r1, r3, r1
 8001be6:	6579      	str	r1, [r7, #84]	@ 0x54
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	0a18      	lsrs	r0, r3, #8
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bfe:	462b      	mov	r3, r5
 8001c00:	1219      	asrs	r1, r3, #8
 8001c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	17da      	asrs	r2, r3, #31
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001c1e:	464c      	mov	r4, r9
 8001c20:	0123      	lsls	r3, r4, #4
 8001c22:	4644      	mov	r4, r8
 8001c24:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c28:	4644      	mov	r4, r8
 8001c2a:	0122      	lsls	r2, r4, #4
 8001c2c:	1884      	adds	r4, r0, r2
 8001c2e:	603c      	str	r4, [r7, #0]
 8001c30:	eb41 0303 	adc.w	r3, r1, r3
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c3a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001c3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c4e <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001c4e:	b480      	push	{r7}
 8001c50:	b087      	sub	sp, #28
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c60:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	039a      	lsls	r2, r3, #14
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c6c:	051b      	lsls	r3, r3, #20
 8001c6e:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c76:	4619      	mov	r1, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c84:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	fb01 f202 	mul.w	r2, r1, r2
 8001c94:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c96:	68f9      	ldr	r1, [r7, #12]
 8001c98:	7f09      	ldrb	r1, [r1, #28]
 8001c9a:	4608      	mov	r0, r1
 8001c9c:	6979      	ldr	r1, [r7, #20]
 8001c9e:	fb00 f101 	mul.w	r1, r0, r1
 8001ca2:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ca4:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001ca8:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001cac:	1292      	asrs	r2, r2, #10
 8001cae:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001cb2:	68f9      	ldr	r1, [r7, #12]
 8001cb4:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001cb8:	fb01 f202 	mul.w	r2, r1, r2
 8001cbc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001cc0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	13db      	asrs	r3, r3, #15
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	13d2      	asrs	r2, r2, #15
 8001cd0:	fb02 f303 	mul.w	r3, r2, r3
 8001cd4:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	7e12      	ldrb	r2, [r2, #24]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cec:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001cf4:	bfa8      	it	ge
 8001cf6:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001cfa:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	131b      	asrs	r3, r3, #12
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a07      	ldr	r2, [pc, #28]	@ (8001d38 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <vApplicationGetIdleTaskMemory+0x30>)
 8001d22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2280      	movs	r2, #128	@ 0x80
 8001d28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200006e0 	.word	0x200006e0
 8001d3c:	20000858 	.word	0x20000858

08001d40 <_write>:
static void MX_USART3_UART_Init(void);
static void MX_I2C1_Init(void);
void StartDefaultTask(void const * argument);
void input_capture_handeler(TIM_HandleTypeDef *htim);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2364      	movs	r3, #100	@ 0x64
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <_write+0x24>)
 8001d56:	f004 fdad 	bl	80068b4 <HAL_UART_Transmit>
    return len;
 8001d5a:	687b      	ldr	r3, [r7, #4]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000b3c 	.word	0x20000b3c

08001d68 <send_uart>:
void send_uart(const char *message) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fa2d 	bl	80001d0 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4803      	ldr	r0, [pc, #12]	@ (8001d90 <send_uart+0x28>)
 8001d82:	f004 fd97 	bl	80068b4 <HAL_UART_Transmit>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000b3c 	.word	0x20000b3c

08001d94 <vHandlerTask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vHandlerTask(void *pvParam)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	char *pcMessage = (char *)pvParam;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]
	xSemaphoreTake(semaphore, 0);
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <vHandlerTask+0x54>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 fcca 	bl	8007740 <xQueueSemaphoreTake>
	while(1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7fe fa0f 	bl	80001d0 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	480b      	ldr	r0, [pc, #44]	@ (8001dec <vHandlerTask+0x58>)
 8001dbe:	f004 fd79 	bl	80068b4 <HAL_UART_Transmit>
		xSemaphoreTake(semaphore, portMAX_DELAY);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <vHandlerTask+0x54>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 fcb8 	bl	8007740 <xQueueSemaphoreTake>
		 UART_Transmit("semaphore taken\r\n");
 8001dd0:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <vHandlerTask+0x5c>)
 8001dd2:	f000 f9b3 	bl	800213c <UART_Transmit>
		portENTER_CRITICAL();
 8001dd6:	f007 f8df 	bl	8008f98 <vPortEnterCritical>
		input_capture_handeler(&htim3);
 8001dda:	4806      	ldr	r0, [pc, #24]	@ (8001df4 <vHandlerTask+0x60>)
 8001ddc:	f000 fce8 	bl	80027b0 <input_capture_handeler>
		portEXIT_CRITICAL();
 8001de0:	f007 f90c 	bl	8008ffc <vPortExitCritical>
	{
 8001de4:	bf00      	nop
 8001de6:	e7e1      	b.n	8001dac <vHandlerTask+0x18>
 8001de8:	20000ce4 	.word	0x20000ce4
 8001dec:	20000b3c 	.word	0x20000b3c
 8001df0:	0800e390 	.word	0x0800e390
 8001df4:	20000af4 	.word	0x20000af4

08001df8 <vUARTSendingTask>:
	}
	vTaskDelete(NULL);
}

void vUARTSendingTask(void *pvParam)
{
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	b093      	sub	sp, #76	@ 0x4c
 8001dfc:	af0a      	add	r7, sp, #40	@ 0x28
 8001dfe:	60f8      	str	r0, [r7, #12]
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(500);  /* 1 second period */
 8001e00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e04:	61fb      	str	r3, [r7, #28]
    xLastWakeTime = xTaskGetTickCount();
 8001e06:	f006 fa53 	bl	80082b0 <xTaskGetTickCount>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	617b      	str	r3, [r7, #20]
	char *pcMessage = (char *)pvParam;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	61bb      	str	r3, [r7, #24]

	while(1)
	{
		portENTER_CRITICAL();
 8001e12:	f007 f8c1 	bl	8008f98 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001e16:	69b8      	ldr	r0, [r7, #24]
 8001e18:	f7fe f9da 	bl	80001d0 <strlen>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e24:	69b9      	ldr	r1, [r7, #24]
 8001e26:	4830      	ldr	r0, [pc, #192]	@ (8001ee8 <vUARTSendingTask+0xf0>)
 8001e28:	f004 fd44 	bl	80068b4 <HAL_UART_Transmit>
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu,L:%d\r\n",
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu,L:%d\r\n",
 8001e30:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <vUARTSendingTask+0xf8>)
 8001e32:	fb82 1203 	smull	r1, r2, r2, r3
 8001e36:	1152      	asrs	r2, r2, #5
 8001e38:	17db      	asrs	r3, r3, #31
 8001e3a:	eba2 0c03 	sub.w	ip, r2, r3
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e40:	681a      	ldr	r2, [r3, #0]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu,L:%d\r\n",
 8001e42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <vUARTSendingTask+0xf8>)
 8001e44:	fb83 1302 	smull	r1, r3, r3, r2
 8001e48:	1159      	asrs	r1, r3, #5
 8001e4a:	17d3      	asrs	r3, r2, #31
 8001e4c:	1acb      	subs	r3, r1, r3
 8001e4e:	2164      	movs	r1, #100	@ 0x64
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	1ad3      	subs	r3, r2, r3
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 8001e56:	4a25      	ldr	r2, [pc, #148]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e58:	6852      	ldr	r2, [r2, #4]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu,L:%d\r\n",
 8001e5a:	0a12      	lsrs	r2, r2, #8
 8001e5c:	60ba      	str	r2, [r7, #8]
     		   s.temp / 100, s.temp % 100,s.pres / 256, (s.pres % 256) * 100 / 256,
 8001e5e:	4923      	ldr	r1, [pc, #140]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e60:	6849      	ldr	r1, [r1, #4]
 8001e62:	b2c9      	uxtb	r1, r1
 8001e64:	2064      	movs	r0, #100	@ 0x64
 8001e66:	fb00 f101 	mul.w	r1, r0, r1
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu,L:%d\r\n",
 8001e6a:	0a09      	lsrs	r1, r1, #8
				   s.humd / 1024, (s.humd % 1024) * 100 / 1024,s.mq135,s.mq2,s.d,s.l);
 8001e6c:	481f      	ldr	r0, [pc, #124]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e6e:	6880      	ldr	r0, [r0, #8]
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu,L:%d\r\n",
 8001e70:	0a80      	lsrs	r0, r0, #10
				   s.humd / 1024, (s.humd % 1024) * 100 / 1024,s.mq135,s.mq2,s.d,s.l);
 8001e72:	4c1e      	ldr	r4, [pc, #120]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e74:	68a4      	ldr	r4, [r4, #8]
 8001e76:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8001e7a:	2564      	movs	r5, #100	@ 0x64
 8001e7c:	fb05 f404 	mul.w	r4, r5, r4
        snprintf(buffer,sizeof(buffer),"T:%ld.%02ld,P:%ld.%02ld,H:%ld.%02ld,mq135:%lu,mq2:%lu,L:%lu,L:%d\r\n",
 8001e80:	0aa4      	lsrs	r4, r4, #10
 8001e82:	4d1a      	ldr	r5, [pc, #104]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e84:	68ed      	ldr	r5, [r5, #12]
 8001e86:	4e19      	ldr	r6, [pc, #100]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e88:	6936      	ldr	r6, [r6, #16]
 8001e8a:	4a18      	ldr	r2, [pc, #96]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e8c:	6952      	ldr	r2, [r2, #20]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <vUARTSendingTask+0xf4>)
 8001e92:	6992      	ldr	r2, [r2, #24]
 8001e94:	9208      	str	r2, [sp, #32]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	9207      	str	r2, [sp, #28]
 8001e9a:	9606      	str	r6, [sp, #24]
 8001e9c:	9505      	str	r5, [sp, #20]
 8001e9e:	9404      	str	r4, [sp, #16]
 8001ea0:	9003      	str	r0, [sp, #12]
 8001ea2:	9102      	str	r1, [sp, #8]
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	4663      	mov	r3, ip
 8001eac:	4a11      	ldr	r2, [pc, #68]	@ (8001ef4 <vUARTSendingTask+0xfc>)
 8001eae:	2178      	movs	r1, #120	@ 0x78
 8001eb0:	4811      	ldr	r0, [pc, #68]	@ (8001ef8 <vUARTSendingTask+0x100>)
 8001eb2:	f007 fc43 	bl	800973c <snprintf>
        send_uart(buffer);
 8001eb6:	4810      	ldr	r0, [pc, #64]	@ (8001ef8 <vUARTSendingTask+0x100>)
 8001eb8:	f7ff ff56 	bl	8001d68 <send_uart>
        HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ebc:	480e      	ldr	r0, [pc, #56]	@ (8001ef8 <vUARTSendingTask+0x100>)
 8001ebe:	f7fe f987 	bl	80001d0 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eca:	490b      	ldr	r1, [pc, #44]	@ (8001ef8 <vUARTSendingTask+0x100>)
 8001ecc:	480b      	ldr	r0, [pc, #44]	@ (8001efc <vUARTSendingTask+0x104>)
 8001ece:	f004 fcf1 	bl	80068b4 <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 8001ed2:	f007 f893 	bl	8008ffc <vPortExitCritical>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	69f9      	ldr	r1, [r7, #28]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f006 f81b 	bl	8007f18 <vTaskDelayUntil>
		portENTER_CRITICAL();
 8001ee2:	bf00      	nop
 8001ee4:	e795      	b.n	8001e12 <vUARTSendingTask+0x1a>
 8001ee6:	bf00      	nop
 8001ee8:	20000b3c 	.word	0x20000b3c
 8001eec:	20000bd0 	.word	0x20000bd0
 8001ef0:	51eb851f 	.word	0x51eb851f
 8001ef4:	0800e3a4 	.word	0x0800e3a4
 8001ef8:	20000bec 	.word	0x20000bec
 8001efc:	20000b84 	.word	0x20000b84

08001f00 <vBMP280Task>:
	}
	vTaskDelete(NULL);
}

void vBMP280Task(void*pvParam)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b096      	sub	sp, #88	@ 0x58
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(1000);  /* 1 second period */
 8001f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0c:	657b      	str	r3, [r7, #84]	@ 0x54
    xLastWakeTime = xTaskGetTickCount();
 8001f0e:	f006 f9cf 	bl	80082b0 <xTaskGetTickCount>
 8001f12:	4603      	mov	r3, r0
 8001f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char *pcMessage = (char *)pvParam;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	653b      	str	r3, [r7, #80]	@ 0x50
    bmp280_params_t params;
    bmp280_init_default_params(&params);
 8001f1a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f850 	bl	8000fc4 <bmp280_init_default_params>

    BMP280_HandleTypedef bmp280;
    bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001f24:	2376      	movs	r3, #118	@ 0x76
 8001f26:	873b      	strh	r3, [r7, #56]	@ 0x38
    if (!bmp280_init(&bmp280, &params)) {
 8001f28:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f9ea 	bl	800130c <bmp280_init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01e      	beq.n	8001f82 <vBMP280Task+0x82>
        strcpy(pcMessage,"\r\nBMP280 initialization failed");
 8001f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f46:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <vBMP280Task+0x110>)
 8001f48:	461d      	mov	r5, r3
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	6028      	str	r0, [r5, #0]
 8001f50:	6069      	str	r1, [r5, #4]
 8001f52:	60aa      	str	r2, [r5, #8]
 8001f54:	60eb      	str	r3, [r5, #12]
 8001f56:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001f58:	6128      	str	r0, [r5, #16]
 8001f5a:	6169      	str	r1, [r5, #20]
 8001f5c:	61aa      	str	r2, [r5, #24]
 8001f5e:	8823      	ldrh	r3, [r4, #0]
 8001f60:	78a2      	ldrb	r2, [r4, #2]
 8001f62:	83ab      	strh	r3, [r5, #28]
 8001f64:	4613      	mov	r3, r2
 8001f66:	77ab      	strb	r3, [r5, #30]
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001f68:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f6a:	f7fe f931 	bl	80001d0 <strlen>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001f78:	4826      	ldr	r0, [pc, #152]	@ (8002014 <vBMP280Task+0x114>)
 8001f7a:	f004 fc9b 	bl	80068b4 <HAL_UART_Transmit>

        while (1);
 8001f7e:	bf00      	nop
 8001f80:	e7fd      	b.n	8001f7e <vBMP280Task+0x7e>
    int32_t temperature;
    uint32_t pressure, humidity;

   while(1)
   {
	   bmp280_force_measurement(&bmp280);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa94 	bl	80014b4 <bmp280_force_measurement>
	   portENTER_CRITICAL();
 8001f8c:	f007 f804 	bl	8008f98 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 8001f90:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f92:	f7fe f91d 	bl	80001d0 <strlen>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001fa0:	481c      	ldr	r0, [pc, #112]	@ (8002014 <vBMP280Task+0x114>)
 8001fa2:	f004 fc87 	bl	80068b4 <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(100));
 8001fa6:	2064      	movs	r0, #100	@ 0x64
 8001fa8:	f006 f836 	bl	8008018 <vTaskDelay>
		   if (!bmp280_is_measuring(&bmp280)) {
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff faa9 	bl	8001508 <bmp280_is_measuring>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <vBMP280Task+0xf6>
			   if (bmp280_read_fixed(&bmp280, &temperature, &pressure, &humidity)) {
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	f107 020c 	add.w	r2, r7, #12
 8001fca:	f107 0110 	add.w	r1, r7, #16
 8001fce:	f107 0014 	add.w	r0, r7, #20
 8001fd2:	f7ff fab5 	bl	8001540 <bmp280_read_fixed>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <vBMP280Task+0xf0>
						s.temp = temperature;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4a0e      	ldr	r2, [pc, #56]	@ (8002018 <vBMP280Task+0x118>)
 8001fe0:	6013      	str	r3, [r2, #0]
						s.pres = pressure;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8002018 <vBMP280Task+0x118>)
 8001fe6:	6053      	str	r3, [r2, #4]
						s.humd = humidity;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4a0b      	ldr	r2, [pc, #44]	@ (8002018 <vBMP280Task+0x118>)
 8001fec:	6093      	str	r3, [r2, #8]
 8001fee:	e002      	b.n	8001ff6 <vBMP280Task+0xf6>
			   } else {
				   send_uart("Failed to read values\r\n");
 8001ff0:	480a      	ldr	r0, [pc, #40]	@ (800201c <vBMP280Task+0x11c>)
 8001ff2:	f7ff feb9 	bl	8001d68 <send_uart>
			   }
		   }
		   vTaskDelay(pdMS_TO_TICKS(1000));
 8001ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffa:	f006 f80d 	bl	8008018 <vTaskDelay>
       portEXIT_CRITICAL();
 8001ffe:	f006 fffd 	bl	8008ffc <vPortExitCritical>
	   vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8002002:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002006:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002008:	4618      	mov	r0, r3
 800200a:	f005 ff85 	bl	8007f18 <vTaskDelayUntil>
	   bmp280_force_measurement(&bmp280);
 800200e:	e7b8      	b.n	8001f82 <vBMP280Task+0x82>
 8002010:	0800e3e8 	.word	0x0800e3e8
 8002014:	20000b3c 	.word	0x20000b3c
 8002018:	20000bd0 	.word	0x20000bd0
 800201c:	0800e408 	.word	0x0800e408

08002020 <vADCTask>:
   }
}

void vADCTask(void *pvParam)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	@ 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    char *pcMessage = (char *)pvParam;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(500);  /* 5 second period */
 800202c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002030:	623b      	str	r3, [r7, #32]
    xLastWakeTime = xTaskGetTickCount();
 8002032:	f006 f93d 	bl	80082b0 <xTaskGetTickCount>
 8002036:	4603      	mov	r3, r0
 8002038:	61fb      	str	r3, [r7, #28]

    ADC_ChannelConfTypeDef sConfig = {0};
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]

    while (1)
    {
        portENTER_CRITICAL();
 8002048:	f006 ffa6 	bl	8008f98 <vPortEnterCritical>
        HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 800204c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800204e:	f7fe f8bf 	bl	80001d0 <strlen>
 8002052:	4603      	mov	r3, r0
 8002054:	b29a      	uxth	r2, r3
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800205a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800205c:	4827      	ldr	r0, [pc, #156]	@ (80020fc <vADCTask+0xdc>)
 800205e:	f004 fc29 	bl	80068b4 <HAL_UART_Transmit>

        // Configure ADC to read from channel 0
        sConfig.Channel = ADC_CHANNEL_0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
        sConfig.Rank = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4619      	mov	r1, r3
 8002074:	4822      	ldr	r0, [pc, #136]	@ (8002100 <vADCTask+0xe0>)
 8002076:	f001 f9e7 	bl	8003448 <HAL_ADC_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <vADCTask+0x64>
        {
            Error_Handler();
 8002080:	f000 fcbc 	bl	80029fc <Error_Handler>
        }

        // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 8002084:	481e      	ldr	r0, [pc, #120]	@ (8002100 <vADCTask+0xe0>)
 8002086:	f001 f841 	bl	800310c <HAL_ADC_Start>
        // Poll ADC1 Peripheral & TimeOut = 10mSec
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800208a:	210a      	movs	r1, #10
 800208c:	481c      	ldr	r0, [pc, #112]	@ (8002100 <vADCTask+0xe0>)
 800208e:	f001 f942 	bl	8003316 <HAL_ADC_PollForConversion>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <vADCTask+0x84>
        {
            // Read the ADC converted values
            s.mq135 = HAL_ADC_GetValue(&hadc1);
 8002098:	4819      	ldr	r0, [pc, #100]	@ (8002100 <vADCTask+0xe0>)
 800209a:	f001 f9c7 	bl	800342c <HAL_ADC_GetValue>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a18      	ldr	r2, [pc, #96]	@ (8002104 <vADCTask+0xe4>)
 80020a2:	60d3      	str	r3, [r2, #12]
        }
        HAL_ADC_Stop(&hadc1);
 80020a4:	4816      	ldr	r0, [pc, #88]	@ (8002100 <vADCTask+0xe0>)
 80020a6:	f001 f903 	bl	80032b0 <HAL_ADC_Stop>

        // Configure ADC to read from channel 1
        sConfig.Channel = ADC_CHANNEL_1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	4619      	mov	r1, r3
 80020b4:	4812      	ldr	r0, [pc, #72]	@ (8002100 <vADCTask+0xe0>)
 80020b6:	f001 f9c7 	bl	8003448 <HAL_ADC_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <vADCTask+0xa4>
        {
            Error_Handler();
 80020c0:	f000 fc9c 	bl	80029fc <Error_Handler>
        }

        // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 80020c4:	480e      	ldr	r0, [pc, #56]	@ (8002100 <vADCTask+0xe0>)
 80020c6:	f001 f821 	bl	800310c <HAL_ADC_Start>
        // Poll ADC1 Peripheral & TimeOut = 10mSec
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80020ca:	210a      	movs	r1, #10
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <vADCTask+0xe0>)
 80020ce:	f001 f922 	bl	8003316 <HAL_ADC_PollForConversion>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <vADCTask+0xc4>
        {
            // Read the ADC converted values
            s.mq2 = HAL_ADC_GetValue(&hadc1);
 80020d8:	4809      	ldr	r0, [pc, #36]	@ (8002100 <vADCTask+0xe0>)
 80020da:	f001 f9a7 	bl	800342c <HAL_ADC_GetValue>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a08      	ldr	r2, [pc, #32]	@ (8002104 <vADCTask+0xe4>)
 80020e2:	6113      	str	r3, [r2, #16]
        }
        HAL_ADC_Stop(&hadc1);
 80020e4:	4806      	ldr	r0, [pc, #24]	@ (8002100 <vADCTask+0xe0>)
 80020e6:	f001 f8e3 	bl	80032b0 <HAL_ADC_Stop>

        portEXIT_CRITICAL();
 80020ea:	f006 ff87 	bl	8008ffc <vPortExitCritical>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	6a39      	ldr	r1, [r7, #32]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f005 ff0f 	bl	8007f18 <vTaskDelayUntil>
        portENTER_CRITICAL();
 80020fa:	e7a5      	b.n	8002048 <vADCTask+0x28>
 80020fc:	20000b3c 	.word	0x20000b3c
 8002100:	20000a58 	.word	0x20000a58
 8002104:	20000bd0 	.word	0x20000bd0

08002108 <delay>:
    return integerPart;
}

/* USER CODE BEGIN 0 */
void delay(uint16_t time)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <delay+0x30>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim3) < time);
 800211a:	bf00      	nop
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <delay+0x30>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	429a      	cmp	r2, r3
 8002126:	d3f9      	bcc.n	800211c <delay+0x14>
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000af4 	.word	0x20000af4

0800213c <UART_Transmit>:

void UART_Transmit(const char *msg)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe f843 	bl	80001d0 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	b29a      	uxth	r2, r3
 800214e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <UART_Transmit+0x28>)
 8002156:	f004 fbad 	bl	80068b4 <HAL_UART_Transmit>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000b3c 	.word	0x20000b3c

08002168 <HCSR04_Read>:

void HCSR04_Read(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800216c:	2201      	movs	r2, #1
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	480a      	ldr	r0, [pc, #40]	@ (800219c <HCSR04_Read+0x34>)
 8002172:	f001 fe05 	bl	8003d80 <HAL_GPIO_WritePin>
    delay(10);  // wait for 10 us
 8002176:	200a      	movs	r0, #10
 8002178:	f7ff ffc6 	bl	8002108 <delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800217c:	2200      	movs	r2, #0
 800217e:	2180      	movs	r1, #128	@ 0x80
 8002180:	4806      	ldr	r0, [pc, #24]	@ (800219c <HCSR04_Read+0x34>)
 8002182:	f001 fdfd 	bl	8003d80 <HAL_GPIO_WritePin>
    __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HCSR04_Read+0x38>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <HCSR04_Read+0x38>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0202 	orr.w	r2, r2, #2
 8002194:	60da      	str	r2, [r3, #12]
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40020000 	.word	0x40020000
 80021a0:	20000af4 	.word	0x20000af4

080021a4 <vUltrasonicTask>:

void vUltrasonicTask(void *argument)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    char *pcMessage = (char *)argument;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	617b      	str	r3, [r7, #20]
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(1000);  /* 5 second period */
 80021b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b4:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 80021b6:	f006 f87b 	bl	80082b0 <xTaskGetTickCount>
 80021ba:	4603      	mov	r3, r0
 80021bc:	60fb      	str	r3, [r7, #12]
    for (;;)
    {
        HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7fe f806 	bl	80001d0 <strlen>
 80021c4:	4603      	mov	r3, r0
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021cc:	6979      	ldr	r1, [r7, #20]
 80021ce:	480a      	ldr	r0, [pc, #40]	@ (80021f8 <vUltrasonicTask+0x54>)
 80021d0:	f004 fb70 	bl	80068b4 <HAL_UART_Transmit>
    	portENTER_CRITICAL();
 80021d4:	f006 fee0 	bl	8008f98 <vPortEnterCritical>
        HCSR04_Read(); // Trigger sensor reading
 80021d8:	f7ff ffc6 	bl	8002168 <HCSR04_Read>
        osDelay(200); // Wait for 2 seconds
 80021dc:	20c8      	movs	r0, #200	@ 0xc8
 80021de:	f004 ff90 	bl	8007102 <osDelay>
        portEXIT_CRITICAL();
 80021e2:	f006 ff0b 	bl	8008ffc <vPortExitCritical>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	6939      	ldr	r1, [r7, #16]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 fe93 	bl	8007f18 <vTaskDelayUntil>
        HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage), HAL_MAX_DELAY);
 80021f2:	bf00      	nop
 80021f4:	e7e3      	b.n	80021be <vUltrasonicTask+0x1a>
 80021f6:	bf00      	nop
 80021f8:	20000b3c 	.word	0x20000b3c

080021fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b08c      	sub	sp, #48	@ 0x30
 8002200:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002202:	f000 ff11 	bl	8003028 <HAL_Init>

  /* USER CODE BEGIN Init */
	BaseType_t xRet;
	char * pcMessage = "This is UART Demo\r\n";
 8002206:	4b46      	ldr	r3, [pc, #280]	@ (8002320 <main+0x124>)
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 800220a:	f000 f8b1 	bl	8002370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800220e:	f000 fa5d 	bl	80026cc <MX_GPIO_Init>
  MX_TIM3_Init();
 8002212:	f000 f997 	bl	8002544 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002216:	f000 f915 	bl	8002444 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800221a:	f000 fa03 	bl	8002624 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800221e:	f000 fa2b 	bl	8002678 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002222:	f000 f961 	bl	80024e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002226:	2100      	movs	r1, #0
 8002228:	483e      	ldr	r0, [pc, #248]	@ (8002324 <main+0x128>)
 800222a:	f003 fbe5 	bl	80059f8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */
  vSemaphoreCreateBinary(semaphore);
 800222e:	2203      	movs	r2, #3
 8002230:	2100      	movs	r1, #0
 8002232:	2001      	movs	r0, #1
 8002234:	f005 f898 	bl	8007368 <xQueueGenericCreate>
 8002238:	4603      	mov	r3, r0
 800223a:	4a3b      	ldr	r2, [pc, #236]	@ (8002328 <main+0x12c>)
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <main+0x12c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <main+0x58>
 8002246:	4b38      	ldr	r3, [pc, #224]	@ (8002328 <main+0x12c>)
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	2300      	movs	r3, #0
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	f005 f8e4 	bl	800741c <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002254:	4b35      	ldr	r3, [pc, #212]	@ (800232c <main+0x130>)
 8002256:	1d3c      	adds	r4, r7, #4
 8002258:	461d      	mov	r5, r3
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fefd 	bl	800706a <osThreadCreate>
 8002270:	4603      	mov	r3, r0
 8002272:	4a2f      	ldr	r2, [pc, #188]	@ (8002330 <main+0x134>)
 8002274:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xRet = xTaskCreate(vUARTSendingTask, "UART1 Task", configMINIMAL_STACK_SIZE, "UART Task\r\n", 1, NULL);
 8002276:	2300      	movs	r3, #0
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	2301      	movs	r3, #1
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <main+0x138>)
 8002280:	2280      	movs	r2, #128	@ 0x80
 8002282:	492d      	ldr	r1, [pc, #180]	@ (8002338 <main+0x13c>)
 8002284:	482d      	ldr	r0, [pc, #180]	@ (800233c <main+0x140>)
 8002286:	f005 fccf 	bl	8007c28 <xTaskCreate>
 800228a:	6238      	str	r0, [r7, #32]
       if(xRet != pdTRUE)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <main+0x9a>
  	      Error_Handler();
 8002292:	f000 fbb3 	bl	80029fc <Error_Handler>
  xRet = xTaskCreate(vBMP280Task, "bmp280 Task", 1024, "bmp280 task\r\n", 3, NULL);
 8002296:	2300      	movs	r3, #0
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	2303      	movs	r3, #3
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <main+0x144>)
 80022a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022a4:	4927      	ldr	r1, [pc, #156]	@ (8002344 <main+0x148>)
 80022a6:	4828      	ldr	r0, [pc, #160]	@ (8002348 <main+0x14c>)
 80022a8:	f005 fcbe 	bl	8007c28 <xTaskCreate>
 80022ac:	6238      	str	r0, [r7, #32]
       if(xRet != pdTRUE)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <main+0xbc>
     	  Error_Handler();
 80022b4:	f000 fba2 	bl	80029fc <Error_Handler>
  xRet = xTaskCreate(vADCTask, "adc_task", 128, "adc task\r\n", 2, NULL);
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4b22      	ldr	r3, [pc, #136]	@ (800234c <main+0x150>)
 80022c2:	2280      	movs	r2, #128	@ 0x80
 80022c4:	4922      	ldr	r1, [pc, #136]	@ (8002350 <main+0x154>)
 80022c6:	4823      	ldr	r0, [pc, #140]	@ (8002354 <main+0x158>)
 80022c8:	f005 fcae 	bl	8007c28 <xTaskCreate>
 80022cc:	6238      	str	r0, [r7, #32]
       if(xRet != pdTRUE)
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <main+0xdc>
       	  Error_Handler();
 80022d4:	f000 fb92 	bl	80029fc <Error_Handler>
  xRet = xTaskCreate( vUltrasonicTask, "ultrasonic_task", 128, "ultrasonic task\r\n", 4, NULL);
 80022d8:	2300      	movs	r3, #0
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	2304      	movs	r3, #4
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <main+0x15c>)
 80022e2:	2280      	movs	r2, #128	@ 0x80
 80022e4:	491d      	ldr	r1, [pc, #116]	@ (800235c <main+0x160>)
 80022e6:	481e      	ldr	r0, [pc, #120]	@ (8002360 <main+0x164>)
 80022e8:	f005 fc9e 	bl	8007c28 <xTaskCreate>
 80022ec:	6238      	str	r0, [r7, #32]
       if(xRet != pdTRUE)
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d001      	beq.n	80022f8 <main+0xfc>
       	  Error_Handler();
 80022f4:	f000 fb82 	bl	80029fc <Error_Handler>
  xRet = xTaskCreate( vHandlerTask, "handler_task", 128, "handler task\r\n", 5, NULL);
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2305      	movs	r3, #5
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <main+0x168>)
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	4918      	ldr	r1, [pc, #96]	@ (8002368 <main+0x16c>)
 8002306:	4819      	ldr	r0, [pc, #100]	@ (800236c <main+0x170>)
 8002308:	f005 fc8e 	bl	8007c28 <xTaskCreate>
 800230c:	6238      	str	r0, [r7, #32]
        if(xRet != pdTRUE)
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d001      	beq.n	8002318 <main+0x11c>
          Error_Handler();
 8002314:	f000 fb72 	bl	80029fc <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002318:	f004 fea0 	bl	800705c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <main+0x120>
 8002320:	0800e428 	.word	0x0800e428
 8002324:	20000af4 	.word	0x20000af4
 8002328:	20000ce4 	.word	0x20000ce4
 800232c:	0800e4d8 	.word	0x0800e4d8
 8002330:	20000bcc 	.word	0x20000bcc
 8002334:	0800e43c 	.word	0x0800e43c
 8002338:	0800e448 	.word	0x0800e448
 800233c:	08001df9 	.word	0x08001df9
 8002340:	0800e454 	.word	0x0800e454
 8002344:	0800e464 	.word	0x0800e464
 8002348:	08001f01 	.word	0x08001f01
 800234c:	0800e470 	.word	0x0800e470
 8002350:	0800e47c 	.word	0x0800e47c
 8002354:	08002021 	.word	0x08002021
 8002358:	0800e488 	.word	0x0800e488
 800235c:	0800e49c 	.word	0x0800e49c
 8002360:	080021a5 	.word	0x080021a5
 8002364:	0800e4ac 	.word	0x0800e4ac
 8002368:	0800e4bc 	.word	0x0800e4bc
 800236c:	08001d95 	.word	0x08001d95

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	@ 0x50
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	2230      	movs	r2, #48	@ 0x30
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f007 fa8c 	bl	800989c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b28      	ldr	r3, [pc, #160]	@ (800243c <SystemClock_Config+0xcc>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	4a27      	ldr	r2, [pc, #156]	@ (800243c <SystemClock_Config+0xcc>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <SystemClock_Config+0xcc>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	4b22      	ldr	r3, [pc, #136]	@ (8002440 <SystemClock_Config+0xd0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <SystemClock_Config+0xd0>)
 80023ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <SystemClock_Config+0xd0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d4:	2310      	movs	r3, #16
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d8:	2302      	movs	r3, #2
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023dc:	2300      	movs	r3, #0
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023e0:	2308      	movs	r3, #8
 80023e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80023e4:	2332      	movs	r3, #50	@ 0x32
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023ec:	2307      	movs	r3, #7
 80023ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	f107 0320 	add.w	r3, r7, #32
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 fd1b 	bl	8004e30 <HAL_RCC_OscConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002400:	f000 fafc 	bl	80029fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002404:	230f      	movs	r3, #15
 8002406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002410:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800241a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f002 ff7c 	bl	8005320 <HAL_RCC_ClockConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800242e:	f000 fae5 	bl	80029fc <Error_Handler>
  }
}
 8002432:	bf00      	nop
 8002434:	3750      	adds	r7, #80	@ 0x50
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000

08002444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800244a:	463b      	mov	r3, r7
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002456:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <MX_ADC1_Init+0x98>)
 8002458:	4a21      	ldr	r2, [pc, #132]	@ (80024e0 <MX_ADC1_Init+0x9c>)
 800245a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800245c:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <MX_ADC1_Init+0x98>)
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002462:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <MX_ADC1_Init+0x98>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002468:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <MX_ADC1_Init+0x98>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <MX_ADC1_Init+0x98>)
 8002470:	2200      	movs	r2, #0
 8002472:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <MX_ADC1_Init+0x98>)
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800247c:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <MX_ADC1_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002482:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <MX_ADC1_Init+0x98>)
 8002484:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <MX_ADC1_Init+0xa0>)
 8002486:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <MX_ADC1_Init+0x98>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <MX_ADC1_Init+0x98>)
 8002490:	2201      	movs	r2, #1
 8002492:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <MX_ADC1_Init+0x98>)
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <MX_ADC1_Init+0x98>)
 800249e:	2201      	movs	r2, #1
 80024a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024a2:	480e      	ldr	r0, [pc, #56]	@ (80024dc <MX_ADC1_Init+0x98>)
 80024a4:	f000 fdee 	bl	8003084 <HAL_ADC_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80024ae:	f000 faa5 	bl	80029fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024be:	463b      	mov	r3, r7
 80024c0:	4619      	mov	r1, r3
 80024c2:	4806      	ldr	r0, [pc, #24]	@ (80024dc <MX_ADC1_Init+0x98>)
 80024c4:	f000 ffc0 	bl	8003448 <HAL_ADC_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80024ce:	f000 fa95 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000a58 	.word	0x20000a58
 80024e0:	40012000 	.word	0x40012000
 80024e4:	0f000001 	.word	0x0f000001

080024e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <MX_I2C1_Init+0x50>)
 80024ee:	4a13      	ldr	r2, [pc, #76]	@ (800253c <MX_I2C1_Init+0x54>)
 80024f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024f2:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <MX_I2C1_Init+0x50>)
 80024f4:	4a12      	ldr	r2, [pc, #72]	@ (8002540 <MX_I2C1_Init+0x58>)
 80024f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <MX_I2C1_Init+0x50>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <MX_I2C1_Init+0x50>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <MX_I2C1_Init+0x50>)
 8002506:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800250a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800250c:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <MX_I2C1_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <MX_I2C1_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002518:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <MX_I2C1_Init+0x50>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <MX_I2C1_Init+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002524:	4804      	ldr	r0, [pc, #16]	@ (8002538 <MX_I2C1_Init+0x50>)
 8002526:	f001 fc5f 	bl	8003de8 <HAL_I2C_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002530:	f000 fa64 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000aa0 	.word	0x20000aa0
 800253c:	40005400 	.word	0x40005400
 8002540:	000186a0 	.word	0x000186a0

08002544 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0318 	add.w	r3, r7, #24
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002562:	463b      	mov	r3, r7
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800256e:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <MX_TIM3_Init+0xd8>)
 8002570:	4a2b      	ldr	r2, [pc, #172]	@ (8002620 <MX_TIM3_Init+0xdc>)
 8002572:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8002574:	4b29      	ldr	r3, [pc, #164]	@ (800261c <MX_TIM3_Init+0xd8>)
 8002576:	2218      	movs	r2, #24
 8002578:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b28      	ldr	r3, [pc, #160]	@ (800261c <MX_TIM3_Init+0xd8>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002580:	4b26      	ldr	r3, [pc, #152]	@ (800261c <MX_TIM3_Init+0xd8>)
 8002582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002586:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	4b24      	ldr	r3, [pc, #144]	@ (800261c <MX_TIM3_Init+0xd8>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b23      	ldr	r3, [pc, #140]	@ (800261c <MX_TIM3_Init+0xd8>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002594:	4821      	ldr	r0, [pc, #132]	@ (800261c <MX_TIM3_Init+0xd8>)
 8002596:	f003 f915 	bl	80057c4 <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80025a0:	f000 fa2c 	bl	80029fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0318 	add.w	r3, r7, #24
 80025ae:	4619      	mov	r1, r3
 80025b0:	481a      	ldr	r0, [pc, #104]	@ (800261c <MX_TIM3_Init+0xd8>)
 80025b2:	f003 fcd5 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80025bc:	f000 fa1e 	bl	80029fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80025c0:	4816      	ldr	r0, [pc, #88]	@ (800261c <MX_TIM3_Init+0xd8>)
 80025c2:	f003 f9bf 	bl	8005944 <HAL_TIM_IC_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80025cc:	f000 fa16 	bl	80029fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4619      	mov	r1, r3
 80025de:	480f      	ldr	r0, [pc, #60]	@ (800261c <MX_TIM3_Init+0xd8>)
 80025e0:	f004 f888 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80025ea:	f000 fa07 	bl	80029fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025f2:	2301      	movs	r3, #1
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	4805      	ldr	r0, [pc, #20]	@ (800261c <MX_TIM3_Init+0xd8>)
 8002606:	f003 fc0f 	bl	8005e28 <HAL_TIM_IC_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002610:	f000 f9f4 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	@ 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000af4 	.word	0x20000af4
 8002620:	40000400 	.word	0x40000400

08002624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800262a:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <MX_USART2_UART_Init+0x50>)
 800262c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002630:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800265c:	f004 f8da 	bl	8006814 <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002666:	f000 f9c9 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000b3c 	.word	0x20000b3c
 8002674:	40004400 	.word	0x40004400

08002678 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800267c:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 800267e:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <MX_USART3_UART_Init+0x50>)
 8002680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 8002684:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <MX_USART3_UART_Init+0x4c>)
 80026b0:	f004 f8b0 	bl	8006814 <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026ba:	f000 f99f 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000b84 	.word	0x20000b84
 80026c8:	40004800 	.word	0x40004800

080026cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]
 80026e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <MX_GPIO_Init+0xc4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a29      	ldr	r2, [pc, #164]	@ (8002790 <MX_GPIO_Init+0xc4>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <MX_GPIO_Init+0xc4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <MX_GPIO_Init+0xc4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	4a22      	ldr	r2, [pc, #136]	@ (8002790 <MX_GPIO_Init+0xc4>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	6313      	str	r3, [r2, #48]	@ 0x30
 800270e:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <MX_GPIO_Init+0xc4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
 800271e:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <MX_GPIO_Init+0xc4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a1b      	ldr	r2, [pc, #108]	@ (8002790 <MX_GPIO_Init+0xc4>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <MX_GPIO_Init+0xc4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	2180      	movs	r1, #128	@ 0x80
 800273a:	4816      	ldr	r0, [pc, #88]	@ (8002794 <MX_GPIO_Init+0xc8>)
 800273c:	f001 fb20 	bl	8003d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002746:	4814      	ldr	r0, [pc, #80]	@ (8002798 <MX_GPIO_Init+0xcc>)
 8002748:	f001 fb1a 	bl	8003d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800274c:	2380      	movs	r3, #128	@ 0x80
 800274e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	4619      	mov	r1, r3
 8002762:	480c      	ldr	r0, [pc, #48]	@ (8002794 <MX_GPIO_Init+0xc8>)
 8002764:	f001 f970 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800276c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277a:	f107 030c 	add.w	r3, r7, #12
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	@ (8002798 <MX_GPIO_Init+0xcc>)
 8002782:	f001 f961 	bl	8003a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002786:	bf00      	nop
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40020000 	.word	0x40020000
 8002798:	40020c00 	.word	0x40020c00

0800279c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f004 fcac 	bl	8007102 <osDelay>
 80027aa:	e7fb      	b.n	80027a4 <StartDefaultTask+0x8>
 80027ac:	0000      	movs	r0, r0
	...

080027b0 <input_capture_handeler>:
//
//  /* USER CODE END Callback 1 */
//}

void input_capture_handeler(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002978 <input_capture_handeler+0x1c8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f040 80d1 	bne.w	8002966 <input_capture_handeler+0x1b6>
	    {
	        if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	f040 80c9 	bne.w	8002966 <input_capture_handeler+0x1b6>
	        {
	            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80027d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027d8:	4868      	ldr	r0, [pc, #416]	@ (800297c <input_capture_handeler+0x1cc>)
 80027da:	f001 faea 	bl	8003db2 <HAL_GPIO_TogglePin>

	            if (Is_First_Captured == 0) // If the first value is not captured
 80027de:	4b68      	ldr	r3, [pc, #416]	@ (8002980 <input_capture_handeler+0x1d0>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d129      	bne.n	800283c <input_capture_handeler+0x8c>
	            {
	                IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read the first value
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f003 fc80 	bl	80060f0 <HAL_TIM_ReadCapturedValue>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a64      	ldr	r2, [pc, #400]	@ (8002984 <input_capture_handeler+0x1d4>)
 80027f4:	6013      	str	r3, [r2, #0]
	                Is_First_Captured = 1;  // Set the first captured as true
 80027f6:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <input_capture_handeler+0x1d0>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
	                // Now change the polarity to falling edge
	                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 020a 	bic.w	r2, r2, #10
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0202 	orr.w	r2, r2, #2
 800281a:	621a      	str	r2, [r3, #32]
	                snprintf(msg, sizeof(msg), "First value captured: %lu\r\n", IC_Val1);
 800281c:	4b59      	ldr	r3, [pc, #356]	@ (8002984 <input_capture_handeler+0x1d4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a59      	ldr	r2, [pc, #356]	@ (8002988 <input_capture_handeler+0x1d8>)
 8002822:	2164      	movs	r1, #100	@ 0x64
 8002824:	4859      	ldr	r0, [pc, #356]	@ (800298c <input_capture_handeler+0x1dc>)
 8002826:	f006 ff89 	bl	800973c <snprintf>
	                UART_Transmit(msg);
 800282a:	4858      	ldr	r0, [pc, #352]	@ (800298c <input_capture_handeler+0x1dc>)
 800282c:	f7ff fc86 	bl	800213c <UART_Transmit>
	                memset(msg, 0, sizeof(msg));
 8002830:	2264      	movs	r2, #100	@ 0x64
 8002832:	2100      	movs	r1, #0
 8002834:	4855      	ldr	r0, [pc, #340]	@ (800298c <input_capture_handeler+0x1dc>)
 8002836:	f007 f831 	bl	800989c <memset>
	                __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
	                Is_First_Captured = 0; // set it back to false
	            }
	        }
	    }
}
 800283a:	e094      	b.n	8002966 <input_capture_handeler+0x1b6>
	            else if (Is_First_Captured == 1)   // If the first value is already captured
 800283c:	4b50      	ldr	r3, [pc, #320]	@ (8002980 <input_capture_handeler+0x1d0>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	f040 808f 	bne.w	8002966 <input_capture_handeler+0x1b6>
	                IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Read the second value
 8002848:	2100      	movs	r1, #0
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f003 fc50 	bl	80060f0 <HAL_TIM_ReadCapturedValue>
 8002850:	4603      	mov	r3, r0
 8002852:	4a4f      	ldr	r2, [pc, #316]	@ (8002990 <input_capture_handeler+0x1e0>)
 8002854:	6013      	str	r3, [r2, #0]
	                __HAL_TIM_SET_COUNTER(htim, 0);  // Reset the counter
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24
	                if (IC_Val2 > IC_Val1)
 800285e:	4b4c      	ldr	r3, [pc, #304]	@ (8002990 <input_capture_handeler+0x1e0>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b48      	ldr	r3, [pc, #288]	@ (8002984 <input_capture_handeler+0x1d4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d907      	bls.n	800287a <input_capture_handeler+0xca>
	                    Difference = IC_Val2 - IC_Val1;
 800286a:	4b49      	ldr	r3, [pc, #292]	@ (8002990 <input_capture_handeler+0x1e0>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b45      	ldr	r3, [pc, #276]	@ (8002984 <input_capture_handeler+0x1d4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	4a47      	ldr	r2, [pc, #284]	@ (8002994 <input_capture_handeler+0x1e4>)
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	e019      	b.n	80028ae <input_capture_handeler+0xfe>
	                else if (IC_Val1 > IC_Val2)
 800287a:	4b42      	ldr	r3, [pc, #264]	@ (8002984 <input_capture_handeler+0x1d4>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b44      	ldr	r3, [pc, #272]	@ (8002990 <input_capture_handeler+0x1e0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d90a      	bls.n	800289c <input_capture_handeler+0xec>
	                    Difference = (0xffff - IC_Val1) + IC_Val2;
 8002886:	4b42      	ldr	r3, [pc, #264]	@ (8002990 <input_capture_handeler+0x1e0>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b3e      	ldr	r3, [pc, #248]	@ (8002984 <input_capture_handeler+0x1d4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002894:	33ff      	adds	r3, #255	@ 0xff
 8002896:	4a3f      	ldr	r2, [pc, #252]	@ (8002994 <input_capture_handeler+0x1e4>)
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e008      	b.n	80028ae <input_capture_handeler+0xfe>
	                else if(IC_Val1 == IC_Val2)
 800289c:	4b39      	ldr	r3, [pc, #228]	@ (8002984 <input_capture_handeler+0x1d4>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002990 <input_capture_handeler+0x1e0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d102      	bne.n	80028ae <input_capture_handeler+0xfe>
	                	Difference = 0;
 80028a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <input_capture_handeler+0x1e4>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
	                Distance = Difference * 0.034 / 2;
 80028ae:	4b39      	ldr	r3, [pc, #228]	@ (8002994 <input_capture_handeler+0x1e4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe26 	bl	8000504 <__aeabi_ui2d>
 80028b8:	a32d      	add	r3, pc, #180	@ (adr r3, 8002970 <input_capture_handeler+0x1c0>)
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f7fd fe9b 	bl	80005f8 <__aeabi_dmul>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028d2:	f7fd ffbb 	bl	800084c <__aeabi_ddiv>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f7fe f963 	bl	8000ba8 <__aeabi_d2uiz>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002998 <input_capture_handeler+0x1e8>)
 80028e6:	6013      	str	r3, [r2, #0]
	                distance1 = Distance/10;
 80028e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002998 <input_capture_handeler+0x1e8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2b      	ldr	r2, [pc, #172]	@ (800299c <input_capture_handeler+0x1ec>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	08db      	lsrs	r3, r3, #3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b2a      	ldr	r3, [pc, #168]	@ (80029a0 <input_capture_handeler+0x1f0>)
 80028f8:	601a      	str	r2, [r3, #0]
	                distance2 = Distance%10;
 80028fa:	4b27      	ldr	r3, [pc, #156]	@ (8002998 <input_capture_handeler+0x1e8>)
 80028fc:	6819      	ldr	r1, [r3, #0]
 80028fe:	4b27      	ldr	r3, [pc, #156]	@ (800299c <input_capture_handeler+0x1ec>)
 8002900:	fba3 2301 	umull	r2, r3, r3, r1
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	1aca      	subs	r2, r1, r3
 8002910:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <input_capture_handeler+0x1f4>)
 8002912:	601a      	str	r2, [r3, #0]
	                distance1 = distance1*10+distance2;
 8002914:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <input_capture_handeler+0x1f0>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	461a      	mov	r2, r3
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <input_capture_handeler+0x1f4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4413      	add	r3, r2
 8002928:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <input_capture_handeler+0x1f0>)
 800292a:	6013      	str	r3, [r2, #0]
                    s.l = distance1;
 800292c:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <input_capture_handeler+0x1f0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <input_capture_handeler+0x1f8>)
 8002932:	6193      	str	r3, [r2, #24]
	                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 020a 	bic.w	r2, r2, #10
 8002942:	621a      	str	r2, [r3, #32]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a12      	ldr	r2, [r2, #32]
 800294e:	621a      	str	r2, [r3, #32]
	                __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0202 	bic.w	r2, r2, #2
 800295e:	60da      	str	r2, [r3, #12]
	                Is_First_Captured = 0; // set it back to false
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <input_capture_handeler+0x1d0>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	b020c49c 	.word	0xb020c49c
 8002974:	3fa16872 	.word	0x3fa16872
 8002978:	40000400 	.word	0x40000400
 800297c:	40020c00 	.word	0x40020c00
 8002980:	20000c70 	.word	0x20000c70
 8002984:	20000c64 	.word	0x20000c64
 8002988:	0800e4f4 	.word	0x0800e4f4
 800298c:	20000c80 	.word	0x20000c80
 8002990:	20000c68 	.word	0x20000c68
 8002994:	20000c6c 	.word	0x20000c6c
 8002998:	20000c74 	.word	0x20000c74
 800299c:	cccccccd 	.word	0xcccccccd
 80029a0:	20000c78 	.word	0x20000c78
 80029a4:	20000c7c 	.word	0x20000c7c
 80029a8:	20000bd0 	.word	0x20000bd0

080029ac <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	  xHigherPriorityTaskWoken = pdFALSE;
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_TIM_IC_CaptureCallback+0x40>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
	  /* 'Give' the semaphore to unblock the task. */
	  xSemaphoreGiveFromISR(semaphore, (signed portBASE_TYPE*)&xHigherPriorityTaskWoken );
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	490b      	ldr	r1, [pc, #44]	@ (80029ec <HAL_TIM_IC_CaptureCallback+0x40>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fe2d 	bl	8007620 <xQueueGiveFromISR>
	  portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80029c6:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_TIM_IC_CaptureCallback+0x40>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_TIM_IC_CaptureCallback+0x32>
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80029d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	f3bf 8f6f 	isb	sy
	  UART_Transmit("semarphore given\r\n");
 80029de:	4806      	ldr	r0, [pc, #24]	@ (80029f8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80029e0:	f7ff fbac 	bl	800213c <UART_Transmit>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000ce8 	.word	0x20000ce8
 80029f0:	20000ce4 	.word	0x20000ce4
 80029f4:	e000ed04 	.word	0xe000ed04
 80029f8:	0800e510 	.word	0x0800e510

080029fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
}
 8002a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <Error_Handler+0x8>

08002a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_MspInit+0x54>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	4a11      	ldr	r2, [pc, #68]	@ (8002a5c <HAL_MspInit+0x54>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <HAL_MspInit+0x54>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_MspInit+0x54>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <HAL_MspInit+0x54>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <HAL_MspInit+0x54>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	210f      	movs	r1, #15
 8002a4a:	f06f 0001 	mvn.w	r0, #1
 8002a4e:	f000 ffd1 	bl	80039f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a17      	ldr	r2, [pc, #92]	@ (8002adc <HAL_ADC_MspInit+0x7c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d127      	bne.n	8002ad2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <HAL_ADC_MspInit+0x80>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <HAL_ADC_MspInit+0x80>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <HAL_ADC_MspInit+0x80>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <HAL_ADC_MspInit+0x80>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae0 <HAL_ADC_MspInit+0x80>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <HAL_ADC_MspInit+0x80>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aba:	2303      	movs	r3, #3
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <HAL_ADC_MspInit+0x84>)
 8002ace:	f000 ffbb 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3728      	adds	r7, #40	@ 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40012000 	.word	0x40012000
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020000 	.word	0x40020000

08002ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	@ 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a19      	ldr	r2, [pc, #100]	@ (8002b6c <HAL_I2C_MspInit+0x84>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d12b      	bne.n	8002b62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <HAL_I2C_MspInit+0x88>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a17      	ldr	r2, [pc, #92]	@ (8002b70 <HAL_I2C_MspInit+0x88>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_I2C_MspInit+0x88>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b26:	23c0      	movs	r3, #192	@ 0xc0
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2a:	2312      	movs	r3, #18
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b36:	2304      	movs	r3, #4
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480c      	ldr	r0, [pc, #48]	@ (8002b74 <HAL_I2C_MspInit+0x8c>)
 8002b42:	f000 ff81 	bl	8003a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_I2C_MspInit+0x88>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	4a08      	ldr	r2, [pc, #32]	@ (8002b70 <HAL_I2C_MspInit+0x88>)
 8002b50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_I2C_MspInit+0x88>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b62:	bf00      	nop
 8002b64:	3728      	adds	r7, #40	@ 0x28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020400 	.word	0x40020400

08002b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1d      	ldr	r2, [pc, #116]	@ (8002c0c <HAL_TIM_Base_MspInit+0x94>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d133      	bne.n	8002c02 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <HAL_TIM_Base_MspInit+0x98>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <HAL_TIM_Base_MspInit+0x98>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002baa:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_TIM_Base_MspInit+0x98>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <HAL_TIM_Base_MspInit+0x98>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <HAL_TIM_Base_MspInit+0x98>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b12      	ldr	r3, [pc, #72]	@ (8002c10 <HAL_TIM_Base_MspInit+0x98>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bd2:	2340      	movs	r3, #64	@ 0x40
 8002bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002be2:	2302      	movs	r3, #2
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4809      	ldr	r0, [pc, #36]	@ (8002c14 <HAL_TIM_Base_MspInit+0x9c>)
 8002bee:	f000 ff2b 	bl	8003a48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2105      	movs	r1, #5
 8002bf6:	201d      	movs	r0, #29
 8002bf8:	f000 fefc 	bl	80039f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bfc:	201d      	movs	r0, #29
 8002bfe:	f000 ff15 	bl	8003a2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000

08002c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	@ 0x30
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a32      	ldr	r2, [pc, #200]	@ (8002d00 <HAL_UART_MspInit+0xe8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d12c      	bne.n	8002c94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a30      	ldr	r2, [pc, #192]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	4a29      	ldr	r2, [pc, #164]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c66:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c72:	230c      	movs	r3, #12
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c82:	2307      	movs	r3, #7
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c86:	f107 031c 	add.w	r3, r7, #28
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	481e      	ldr	r0, [pc, #120]	@ (8002d08 <HAL_UART_MspInit+0xf0>)
 8002c8e:	f000 fedb 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c92:	e031      	b.n	8002cf8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	@ (8002d0c <HAL_UART_MspInit+0xf4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d12c      	bne.n	8002cf8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	4a10      	ldr	r2, [pc, #64]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_UART_MspInit+0xec>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4807      	ldr	r0, [pc, #28]	@ (8002d10 <HAL_UART_MspInit+0xf8>)
 8002cf4:	f000 fea8 	bl	8003a48 <HAL_GPIO_Init>
}
 8002cf8:	bf00      	nop
 8002cfa:	3730      	adds	r7, #48	@ 0x30
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40004400 	.word	0x40004400
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40004800 	.word	0x40004800
 8002d10:	40020400 	.word	0x40020400

08002d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	@ 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	4b2f      	ldr	r3, [pc, #188]	@ (8002de8 <HAL_InitTick+0xd4>)
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002de8 <HAL_InitTick+0xd4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d34:	4b2c      	ldr	r3, [pc, #176]	@ (8002de8 <HAL_InitTick+0xd4>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d40:	f107 020c 	add.w	r2, r7, #12
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 fd08 	bl	8005760 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002d50:	f002 fcf2 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 8002d54:	4603      	mov	r3, r0
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5c:	4a23      	ldr	r2, [pc, #140]	@ (8002dec <HAL_InitTick+0xd8>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9b      	lsrs	r3, r3, #18
 8002d64:	3b01      	subs	r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d68:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002d6a:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_InitTick+0xe0>)
 8002d6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d6e:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002d70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d76:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d82:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d8e:	4818      	ldr	r0, [pc, #96]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002d90:	f002 fd18 	bl	80057c4 <HAL_TIM_Base_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11b      	bne.n	8002dda <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002da2:	4813      	ldr	r0, [pc, #76]	@ (8002df0 <HAL_InitTick+0xdc>)
 8002da4:	f002 fd5e 	bl	8005864 <HAL_TIM_Base_Start_IT>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002dae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d111      	bne.n	8002dda <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002db6:	2019      	movs	r0, #25
 8002db8:	f000 fe38 	bl	8003a2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	d808      	bhi.n	8002dd4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	2019      	movs	r0, #25
 8002dc8:	f000 fe14 	bl	80039f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <HAL_InitTick+0xe4>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e002      	b.n	8002dda <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3730      	adds	r7, #48	@ 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	20000cec 	.word	0x20000cec
 8002df4:	40010000 	.word	0x40010000
 8002df8:	20000004 	.word	0x20000004

08002dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <NMI_Handler+0x4>

08002e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <HardFault_Handler+0x4>

08002e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <MemManage_Handler+0x4>

08002e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <BusFault_Handler+0x4>

08002e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <UsageFault_Handler+0x4>

08002e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e38:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e3a:	f002 ff05 	bl	8005c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000cec 	.word	0x20000cec

08002e48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e4c:	4802      	ldr	r0, [pc, #8]	@ (8002e58 <TIM3_IRQHandler+0x10>)
 8002e4e:	f002 fefb 	bl	8005c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000af4 	.word	0x20000af4

08002e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return 1;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <_kill>:

int _kill(int pid, int sig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e76:	f006 fd8b 	bl	8009990 <__errno>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2216      	movs	r2, #22
 8002e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_exit>:

void _exit (int status)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ffe7 	bl	8002e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e9e:	bf00      	nop
 8002ea0:	e7fd      	b.n	8002e9e <_exit+0x12>

08002ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e00a      	b.n	8002eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	4601      	mov	r1, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	60ba      	str	r2, [r7, #8]
 8002ec0:	b2ca      	uxtb	r2, r1
 8002ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	dbf0      	blt.n	8002eb4 <_read+0x12>
  }

  return len;
 8002ed2:	687b      	ldr	r3, [r7, #4]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <_close>:
  }
  return len;
}

int _close(int file)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f04:	605a      	str	r2, [r3, #4]
  return 0;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <_isatty>:

int _isatty(int file)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f1c:	2301      	movs	r3, #1
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f4c:	4a14      	ldr	r2, [pc, #80]	@ (8002fa0 <_sbrk+0x5c>)
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <_sbrk+0x60>)
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f58:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <_sbrk+0x64>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f60:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <_sbrk+0x64>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <_sbrk+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d207      	bcs.n	8002f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f74:	f006 fd0c 	bl	8009990 <__errno>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f82:	e009      	b.n	8002f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f84:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	@ (8002fa8 <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a05      	ldr	r2, [pc, #20]	@ (8002fa8 <_sbrk+0x64>)
 8002f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20020000 	.word	0x20020000
 8002fa4:	00000400 	.word	0x00000400
 8002fa8:	20000d34 	.word	0x20000d34
 8002fac:	20004da0 	.word	0x20004da0

08002fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <SystemInit+0x20>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fba:	4a05      	ldr	r2, [pc, #20]	@ (8002fd0 <SystemInit+0x20>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800300c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fd8:	f7ff ffea 	bl	8002fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fdc:	480c      	ldr	r0, [pc, #48]	@ (8003010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fde:	490d      	ldr	r1, [pc, #52]	@ (8003014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8003018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe4:	e002      	b.n	8002fec <LoopCopyDataInit>

08002fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fea:	3304      	adds	r3, #4

08002fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff0:	d3f9      	bcc.n	8002fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8003020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff8:	e001      	b.n	8002ffe <LoopFillZerobss>

08002ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ffc:	3204      	adds	r2, #4

08002ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003000:	d3fb      	bcc.n	8002ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003002:	f006 fccb 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003006:	f7ff f8f9 	bl	80021fc <main>
  bx  lr    
 800300a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800300c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003014:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 8003018:	0800e8e4 	.word	0x0800e8e4
  ldr r2, =_sbss
 800301c:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 8003020:	20004d9c 	.word	0x20004d9c

08003024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC_IRQHandler>
	...

08003028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800302c:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_Init+0x40>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <HAL_Init+0x40>)
 8003032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_Init+0x40>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <HAL_Init+0x40>)
 800303e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003044:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_Init+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <HAL_Init+0x40>)
 800304a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003050:	2003      	movs	r0, #3
 8003052:	f000 fcc4 	bl	80039de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003056:	200f      	movs	r0, #15
 8003058:	f7ff fe5c 	bl	8002d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800305c:	f7ff fcd4 	bl	8002a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023c00 	.word	0x40023c00

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <HAL_GetTick+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000d38 	.word	0x20000d38

08003084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e033      	b.n	8003102 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fcdc 	bl	8002a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030ca:	f023 0302 	bic.w	r3, r3, #2
 80030ce:	f043 0202 	orr.w	r2, r3, #2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fad8 	bl	800368c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80030f2:	e001      	b.n	80030f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Start+0x1a>
 8003122:	2302      	movs	r3, #2
 8003124:	e0b2      	b.n	800328c <HAL_ADC_Start+0x180>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d018      	beq.n	800316e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800314c:	4b52      	ldr	r3, [pc, #328]	@ (8003298 <HAL_ADC_Start+0x18c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a52      	ldr	r2, [pc, #328]	@ (800329c <HAL_ADC_Start+0x190>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0c9a      	lsrs	r2, r3, #18
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003160:	e002      	b.n	8003168 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3b01      	subs	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f9      	bne.n	8003162 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d17a      	bne.n	8003272 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ba:	d106      	bne.n	80031ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	f023 0206 	bic.w	r2, r3, #6
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80031c8:	e002      	b.n	80031d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d8:	4b31      	ldr	r3, [pc, #196]	@ (80032a0 <HAL_ADC_Start+0x194>)
 80031da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031e4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d12a      	bne.n	8003248 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2b      	ldr	r2, [pc, #172]	@ (80032a4 <HAL_ADC_Start+0x198>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d015      	beq.n	8003228 <HAL_ADC_Start+0x11c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a29      	ldr	r2, [pc, #164]	@ (80032a8 <HAL_ADC_Start+0x19c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d105      	bne.n	8003212 <HAL_ADC_Start+0x106>
 8003206:	4b26      	ldr	r3, [pc, #152]	@ (80032a0 <HAL_ADC_Start+0x194>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a25      	ldr	r2, [pc, #148]	@ (80032ac <HAL_ADC_Start+0x1a0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d136      	bne.n	800328a <HAL_ADC_Start+0x17e>
 800321c:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_ADC_Start+0x194>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d130      	bne.n	800328a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d129      	bne.n	800328a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	e020      	b.n	800328a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a15      	ldr	r2, [pc, #84]	@ (80032a4 <HAL_ADC_Start+0x198>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d11b      	bne.n	800328a <HAL_ADC_Start+0x17e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d114      	bne.n	800328a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	e00b      	b.n	800328a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	20000000 	.word	0x20000000
 800329c:	431bde83 	.word	0x431bde83
 80032a0:	40012300 	.word	0x40012300
 80032a4:	40012000 	.word	0x40012000
 80032a8:	40012100 	.word	0x40012100
 80032ac:	40012200 	.word	0x40012200

080032b0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Stop+0x16>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e021      	b.n	800330a <HAL_ADC_Stop+0x5a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003332:	d113      	bne.n	800335c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800333e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003342:	d10b      	bne.n	800335c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	f043 0220 	orr.w	r2, r3, #32
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e063      	b.n	8003424 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800335c:	f7ff fe86 	bl	800306c <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003362:	e021      	b.n	80033a8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800336a:	d01d      	beq.n	80033a8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_ADC_PollForConversion+0x6c>
 8003372:	f7ff fe7b 	bl	800306c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d212      	bcs.n	80033a8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00b      	beq.n	80033a8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e03d      	b.n	8003424 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d1d6      	bne.n	8003364 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f06f 0212 	mvn.w	r2, #18
 80033be:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d123      	bne.n	8003422 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11f      	bne.n	8003422 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d111      	bne.n	8003422 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d105      	bne.n	8003422 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x1c>
 8003460:	2302      	movs	r3, #2
 8003462:	e105      	b.n	8003670 <HAL_ADC_ConfigChannel+0x228>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b09      	cmp	r3, #9
 8003472:	d925      	bls.n	80034c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68d9      	ldr	r1, [r3, #12]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	3b1e      	subs	r3, #30
 800348a:	2207      	movs	r2, #7
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43da      	mvns	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	400a      	ands	r2, r1
 8003498:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68d9      	ldr	r1, [r3, #12]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	4618      	mov	r0, r3
 80034ac:	4603      	mov	r3, r0
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4403      	add	r3, r0
 80034b2:	3b1e      	subs	r3, #30
 80034b4:	409a      	lsls	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	e022      	b.n	8003506 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6919      	ldr	r1, [r3, #16]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	2207      	movs	r2, #7
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	400a      	ands	r2, r1
 80034e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6919      	ldr	r1, [r3, #16]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	4618      	mov	r0, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4403      	add	r3, r0
 80034fc:	409a      	lsls	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b06      	cmp	r3, #6
 800350c:	d824      	bhi.n	8003558 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	3b05      	subs	r3, #5
 8003520:	221f      	movs	r2, #31
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	400a      	ands	r2, r1
 800352e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	3b05      	subs	r3, #5
 800354a:	fa00 f203 	lsl.w	r2, r0, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	635a      	str	r2, [r3, #52]	@ 0x34
 8003556:	e04c      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d824      	bhi.n	80035aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	3b23      	subs	r3, #35	@ 0x23
 8003572:	221f      	movs	r2, #31
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43da      	mvns	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	400a      	ands	r2, r1
 8003580:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	4618      	mov	r0, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	3b23      	subs	r3, #35	@ 0x23
 800359c:	fa00 f203 	lsl.w	r2, r0, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80035a8:	e023      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	3b41      	subs	r3, #65	@ 0x41
 80035bc:	221f      	movs	r2, #31
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	400a      	ands	r2, r1
 80035ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4618      	mov	r0, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	3b41      	subs	r3, #65	@ 0x41
 80035e6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f2:	4b22      	ldr	r3, [pc, #136]	@ (800367c <HAL_ADC_ConfigChannel+0x234>)
 80035f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a21      	ldr	r2, [pc, #132]	@ (8003680 <HAL_ADC_ConfigChannel+0x238>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d109      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x1cc>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b12      	cmp	r3, #18
 8003606:	d105      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_ADC_ConfigChannel+0x238>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d123      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x21e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d003      	beq.n	800362e <HAL_ADC_ConfigChannel+0x1e6>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b11      	cmp	r3, #17
 800362c:	d11b      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b10      	cmp	r3, #16
 8003640:	d111      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003642:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <HAL_ADC_ConfigChannel+0x23c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a10      	ldr	r2, [pc, #64]	@ (8003688 <HAL_ADC_ConfigChannel+0x240>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	0c9a      	lsrs	r2, r3, #18
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003658:	e002      	b.n	8003660 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3b01      	subs	r3, #1
 800365e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f9      	bne.n	800365a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40012300 	.word	0x40012300
 8003680:	40012000 	.word	0x40012000
 8003684:	20000000 	.word	0x20000000
 8003688:	431bde83 	.word	0x431bde83

0800368c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003694:	4b79      	ldr	r3, [pc, #484]	@ (800387c <ADC_Init+0x1f0>)
 8003696:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	021a      	lsls	r2, r3, #8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6859      	ldr	r1, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6899      	ldr	r1, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	4a58      	ldr	r2, [pc, #352]	@ (8003880 <ADC_Init+0x1f4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d022      	beq.n	800376a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6899      	ldr	r1, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	e00f      	b.n	800378a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003788:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0202 	bic.w	r2, r2, #2
 8003798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7e1b      	ldrb	r3, [r3, #24]
 80037a4:	005a      	lsls	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01b      	beq.n	80037f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80037d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	3b01      	subs	r3, #1
 80037e4:	035a      	lsls	r2, r3, #13
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	e007      	b.n	8003800 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	3b01      	subs	r3, #1
 800381c:	051a      	lsls	r2, r3, #20
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003842:	025a      	lsls	r2, r3, #9
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800385a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	029a      	lsls	r2, r3, #10
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012300 	.word	0x40012300
 8003880:	0f000001 	.word	0x0f000001

08003884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003894:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	@ (80038c8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d0:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <__NVIC_GetPriorityGrouping+0x18>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	f003 0307 	and.w	r3, r3, #7
}
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	db0b      	blt.n	8003912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4907      	ldr	r1, [pc, #28]	@ (8003920 <__NVIC_EnableIRQ+0x38>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2001      	movs	r0, #1
 800390a:	fa00 f202 	lsl.w	r2, r0, r2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db0a      	blt.n	800394e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	490c      	ldr	r1, [pc, #48]	@ (8003970 <__NVIC_SetPriority+0x4c>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	0112      	lsls	r2, r2, #4
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	440b      	add	r3, r1
 8003948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800394c:	e00a      	b.n	8003964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4908      	ldr	r1, [pc, #32]	@ (8003974 <__NVIC_SetPriority+0x50>)
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3b04      	subs	r3, #4
 800395c:	0112      	lsls	r2, r2, #4
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	440b      	add	r3, r1
 8003962:	761a      	strb	r2, [r3, #24]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000e100 	.word	0xe000e100
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	@ 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0307 	rsb	r3, r3, #7
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3304      	adds	r3, #4
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d902      	bls.n	80039a8 <NVIC_EncodePriority+0x30>
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3b03      	subs	r3, #3
 80039a6:	e000      	b.n	80039aa <NVIC_EncodePriority+0x32>
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43d9      	mvns	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	4313      	orrs	r3, r2
         );
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3724      	adds	r7, #36	@ 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ff4c 	bl	8003884 <__NVIC_SetPriorityGrouping>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a06:	f7ff ff61 	bl	80038cc <__NVIC_GetPriorityGrouping>
 8003a0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	6978      	ldr	r0, [r7, #20]
 8003a12:	f7ff ffb1 	bl	8003978 <NVIC_EncodePriority>
 8003a16:	4602      	mov	r2, r0
 8003a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff80 	bl	8003924 <__NVIC_SetPriority>
}
 8003a24:	bf00      	nop
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff54 	bl	80038e8 <__NVIC_EnableIRQ>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	@ 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	e16b      	b.n	8003d3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a64:	2201      	movs	r2, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	f040 815a 	bne.w	8003d36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d005      	beq.n	8003a9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d130      	bne.n	8003afc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 0201 	and.w	r2, r3, #1
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d017      	beq.n	8003b38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d123      	bne.n	8003b8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	08da      	lsrs	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3208      	adds	r2, #8
 8003b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	08da      	lsrs	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3208      	adds	r2, #8
 8003b86:	69b9      	ldr	r1, [r7, #24]
 8003b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	2203      	movs	r2, #3
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0203 	and.w	r2, r3, #3
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80b4 	beq.w	8003d36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	4b60      	ldr	r3, [pc, #384]	@ (8003d54 <HAL_GPIO_Init+0x30c>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	4a5f      	ldr	r2, [pc, #380]	@ (8003d54 <HAL_GPIO_Init+0x30c>)
 8003bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bde:	4b5d      	ldr	r3, [pc, #372]	@ (8003d54 <HAL_GPIO_Init+0x30c>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bea:	4a5b      	ldr	r2, [pc, #364]	@ (8003d58 <HAL_GPIO_Init+0x310>)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	220f      	movs	r2, #15
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a52      	ldr	r2, [pc, #328]	@ (8003d5c <HAL_GPIO_Init+0x314>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02b      	beq.n	8003c6e <HAL_GPIO_Init+0x226>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a51      	ldr	r2, [pc, #324]	@ (8003d60 <HAL_GPIO_Init+0x318>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d025      	beq.n	8003c6a <HAL_GPIO_Init+0x222>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a50      	ldr	r2, [pc, #320]	@ (8003d64 <HAL_GPIO_Init+0x31c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <HAL_GPIO_Init+0x21e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4f      	ldr	r2, [pc, #316]	@ (8003d68 <HAL_GPIO_Init+0x320>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_Init+0x21a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4e      	ldr	r2, [pc, #312]	@ (8003d6c <HAL_GPIO_Init+0x324>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0x216>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4d      	ldr	r2, [pc, #308]	@ (8003d70 <HAL_GPIO_Init+0x328>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_Init+0x212>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4c      	ldr	r2, [pc, #304]	@ (8003d74 <HAL_GPIO_Init+0x32c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_Init+0x20e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a4b      	ldr	r2, [pc, #300]	@ (8003d78 <HAL_GPIO_Init+0x330>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_Init+0x20a>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e00e      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c52:	2308      	movs	r3, #8
 8003c54:	e00c      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c56:	2306      	movs	r3, #6
 8003c58:	e00a      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c5a:	2305      	movs	r3, #5
 8003c5c:	e008      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c5e:	2304      	movs	r3, #4
 8003c60:	e006      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c62:	2303      	movs	r3, #3
 8003c64:	e004      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e002      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <HAL_GPIO_Init+0x228>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f002 0203 	and.w	r2, r2, #3
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	4093      	lsls	r3, r2
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c80:	4935      	ldr	r1, [pc, #212]	@ (8003d58 <HAL_GPIO_Init+0x310>)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	3302      	adds	r3, #2
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cb2:	4a32      	ldr	r2, [pc, #200]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb8:	4b30      	ldr	r3, [pc, #192]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cdc:	4a27      	ldr	r2, [pc, #156]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ce2:	4b26      	ldr	r3, [pc, #152]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d06:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d30:	4a12      	ldr	r2, [pc, #72]	@ (8003d7c <HAL_GPIO_Init+0x334>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b0f      	cmp	r3, #15
 8003d40:	f67f ae90 	bls.w	8003a64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	3724      	adds	r7, #36	@ 0x24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	40013800 	.word	0x40013800
 8003d5c:	40020000 	.word	0x40020000
 8003d60:	40020400 	.word	0x40020400
 8003d64:	40020800 	.word	0x40020800
 8003d68:	40020c00 	.word	0x40020c00
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40021400 	.word	0x40021400
 8003d74:	40021800 	.word	0x40021800
 8003d78:	40021c00 	.word	0x40021c00
 8003d7c:	40013c00 	.word	0x40013c00

08003d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	807b      	strh	r3, [r7, #2]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d90:	787b      	ldrb	r3, [r7, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d9c:	e003      	b.n	8003da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	041a      	lsls	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	619a      	str	r2, [r3, #24]
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dc4:	887a      	ldrh	r2, [r7, #2]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	041a      	lsls	r2, r3, #16
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	619a      	str	r2, [r3, #24]
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e12b      	b.n	8004052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fe fe6a 	bl	8002ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	@ 0x24
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f001 fc60 	bl	8005710 <HAL_RCC_GetPCLK1Freq>
 8003e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4a81      	ldr	r2, [pc, #516]	@ (800405c <HAL_I2C_Init+0x274>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d807      	bhi.n	8003e6c <HAL_I2C_Init+0x84>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a80      	ldr	r2, [pc, #512]	@ (8004060 <HAL_I2C_Init+0x278>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bf94      	ite	ls
 8003e64:	2301      	movls	r3, #1
 8003e66:	2300      	movhi	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e006      	b.n	8003e7a <HAL_I2C_Init+0x92>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004064 <HAL_I2C_Init+0x27c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	bf94      	ite	ls
 8003e74:	2301      	movls	r3, #1
 8003e76:	2300      	movhi	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0e7      	b.n	8004052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4a78      	ldr	r2, [pc, #480]	@ (8004068 <HAL_I2C_Init+0x280>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	0c9b      	lsrs	r3, r3, #18
 8003e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a6a      	ldr	r2, [pc, #424]	@ (800405c <HAL_I2C_Init+0x274>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d802      	bhi.n	8003ebc <HAL_I2C_Init+0xd4>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	e009      	b.n	8003ed0 <HAL_I2C_Init+0xe8>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	4a69      	ldr	r2, [pc, #420]	@ (800406c <HAL_I2C_Init+0x284>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	3301      	adds	r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ee2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	495c      	ldr	r1, [pc, #368]	@ (800405c <HAL_I2C_Init+0x274>)
 8003eec:	428b      	cmp	r3, r1
 8003eee:	d819      	bhi.n	8003f24 <HAL_I2C_Init+0x13c>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1e59      	subs	r1, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003efe:	1c59      	adds	r1, r3, #1
 8003f00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f04:	400b      	ands	r3, r1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_I2C_Init+0x138>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1e59      	subs	r1, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f18:	3301      	adds	r3, #1
 8003f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1e:	e051      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e04f      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d111      	bne.n	8003f50 <HAL_I2C_Init+0x168>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1e58      	subs	r0, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	440b      	add	r3, r1
 8003f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf0c      	ite	eq
 8003f48:	2301      	moveq	r3, #1
 8003f4a:	2300      	movne	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e012      	b.n	8003f76 <HAL_I2C_Init+0x18e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1e58      	subs	r0, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	0099      	lsls	r1, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f66:	3301      	adds	r3, #1
 8003f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Init+0x196>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e022      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <HAL_I2C_Init+0x1bc>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1e58      	subs	r0, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	440b      	add	r3, r1
 8003f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa2:	e00f      	b.n	8003fc4 <HAL_I2C_Init+0x1dc>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1e58      	subs	r0, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	0099      	lsls	r1, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	6809      	ldr	r1, [r1, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ff2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6911      	ldr	r1, [r2, #16]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68d2      	ldr	r2, [r2, #12]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	430b      	orrs	r3, r1
 8004006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	000186a0 	.word	0x000186a0
 8004060:	001e847f 	.word	0x001e847f
 8004064:	003d08ff 	.word	0x003d08ff
 8004068:	431bde83 	.word	0x431bde83
 800406c:	10624dd3 	.word	0x10624dd3

08004070 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	460b      	mov	r3, r1
 8004084:	813b      	strh	r3, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800408a:	f7fe ffef 	bl	800306c <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b20      	cmp	r3, #32
 800409a:	f040 80d9 	bne.w	8004250 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2319      	movs	r3, #25
 80040a4:	2201      	movs	r2, #1
 80040a6:	496d      	ldr	r1, [pc, #436]	@ (800425c <HAL_I2C_Mem_Write+0x1ec>)
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fc8b 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	e0cc      	b.n	8004252 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_I2C_Mem_Write+0x56>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0c5      	b.n	8004252 <HAL_I2C_Mem_Write+0x1e2>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d007      	beq.n	80040ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2221      	movs	r2, #33	@ 0x21
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2240      	movs	r2, #64	@ 0x40
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a4d      	ldr	r2, [pc, #308]	@ (8004260 <HAL_I2C_Mem_Write+0x1f0>)
 800412c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800412e:	88f8      	ldrh	r0, [r7, #6]
 8004130:	893a      	ldrh	r2, [r7, #8]
 8004132:	8979      	ldrh	r1, [r7, #10]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	4603      	mov	r3, r0
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fac2 	bl	80046c8 <I2C_RequestMemoryWrite>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d052      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e081      	b.n	8004252 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fd50 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	2b04      	cmp	r3, #4
 8004164:	d107      	bne.n	8004176 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004174:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e06b      	b.n	8004252 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d11b      	bne.n	80041f0 <HAL_I2C_Mem_Write+0x180>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d017      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1aa      	bne.n	800414e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fd43 	bl	8004c88 <I2C_WaitOnBTFFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	2b04      	cmp	r3, #4
 800420e:	d107      	bne.n	8004220 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e016      	b.n	8004252 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	00100002 	.word	0x00100002
 8004260:	ffff0000 	.word	0xffff0000

08004264 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	@ 0x30
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	461a      	mov	r2, r3
 8004272:	4603      	mov	r3, r0
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	460b      	mov	r3, r1
 8004278:	813b      	strh	r3, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800427e:	f7fe fef5 	bl	800306c <HAL_GetTick>
 8004282:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b20      	cmp	r3, #32
 800428e:	f040 8214 	bne.w	80046ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	2319      	movs	r3, #25
 8004298:	2201      	movs	r2, #1
 800429a:	497b      	ldr	r1, [pc, #492]	@ (8004488 <HAL_I2C_Mem_Read+0x224>)
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fb91 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
 80042aa:	e207      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_I2C_Mem_Read+0x56>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e200      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d007      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2222      	movs	r2, #34	@ 0x22
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2240      	movs	r2, #64	@ 0x40
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800430a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004310:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a5b      	ldr	r2, [pc, #364]	@ (800448c <HAL_I2C_Mem_Read+0x228>)
 8004320:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004322:	88f8      	ldrh	r0, [r7, #6]
 8004324:	893a      	ldrh	r2, [r7, #8]
 8004326:	8979      	ldrh	r1, [r7, #10]
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	4603      	mov	r3, r0
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fa5e 	bl	80047f4 <I2C_RequestMemoryRead>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e1bc      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e190      	b.n	8004694 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	2b01      	cmp	r3, #1
 8004378:	d11b      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e170      	b.n	8004694 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d11b      	bne.n	80043f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	e150      	b.n	8004694 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004408:	e144      	b.n	8004694 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440e:	2b03      	cmp	r3, #3
 8004410:	f200 80f1 	bhi.w	80045f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004418:	2b01      	cmp	r3, #1
 800441a:	d123      	bne.n	8004464 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800441c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fc79 	bl	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e145      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004462:	e117      	b.n	8004694 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004468:	2b02      	cmp	r3, #2
 800446a:	d14e      	bne.n	800450a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004472:	2200      	movs	r2, #0
 8004474:	4906      	ldr	r1, [pc, #24]	@ (8004490 <HAL_I2C_Mem_Read+0x22c>)
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 faa4 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e11a      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
 8004486:	bf00      	nop
 8004488:	00100002 	.word	0x00100002
 800448c:	ffff0000 	.word	0xffff0000
 8004490:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004508:	e0c4      	b.n	8004694 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004510:	2200      	movs	r2, #0
 8004512:	496c      	ldr	r1, [pc, #432]	@ (80046c4 <HAL_I2C_Mem_Read+0x460>)
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fa55 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0cb      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456c:	2200      	movs	r2, #0
 800456e:	4955      	ldr	r1, [pc, #340]	@ (80046c4 <HAL_I2C_Mem_Read+0x460>)
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fa27 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e09d      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045f4:	e04e      	b.n	8004694 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fb8c 	bl	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e058      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d124      	bne.n	8004694 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464e:	2b03      	cmp	r3, #3
 8004650:	d107      	bne.n	8004662 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004660:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f aeb6 	bne.w	800440a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	@ 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	00010004 	.word	0x00010004

080046c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	460b      	mov	r3, r1
 80046dc:	813b      	strh	r3, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f960 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004718:	d103      	bne.n	8004722 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004720:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e05f      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	492d      	ldr	r1, [pc, #180]	@ (80047f0 <I2C_RequestMemoryWrite+0x128>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f9bb 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04c      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004764:	6a39      	ldr	r1, [r7, #32]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fa46 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e02b      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	e021      	b.n	80047e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b0:	6a39      	ldr	r1, [r7, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa20 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e005      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047da:	893b      	ldrh	r3, [r7, #8]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00010002 	.word	0x00010002

080047f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800481c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800482c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2200      	movs	r2, #0
 8004836:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f8c2 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004854:	d103      	bne.n	800485e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800485c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0aa      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	4952      	ldr	r1, [pc, #328]	@ (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f91d 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e097      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f9a8 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e076      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	e021      	b.n	8004920 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f982 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e050      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004916:	893b      	ldrh	r3, [r7, #8]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004922:	6a39      	ldr	r1, [r7, #32]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f967 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	2b04      	cmp	r3, #4
 8004936:	d107      	bne.n	8004948 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004946:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e035      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2200      	movs	r2, #0
 8004964:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f82b 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004982:	d103      	bne.n	800498c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e013      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	4906      	ldr	r1, [pc, #24]	@ (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f886 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	00010002 	.word	0x00010002

080049c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d4:	e048      	b.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049dc:	d044      	beq.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fe fb45 	bl	800306c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d139      	bne.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10d      	bne.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x56>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	43da      	mvns	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	e00c      	b.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d116      	bne.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e023      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d10d      	bne.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	e00c      	b.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	43da      	mvns	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d093      	beq.n	80049d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac6:	e071      	b.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad6:	d123      	bne.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	f043 0204 	orr.w	r2, r3, #4
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e067      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b26:	d041      	beq.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	f7fe faa0 	bl	800306c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d136      	bne.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d10c      	bne.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4013      	ands	r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e00b      	b.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e021      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10c      	bne.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e00b      	b.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf14      	ite	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2300      	moveq	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f47f af6d 	bne.w	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c04:	e034      	b.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8e3 	bl	8004dd2 <I2C_IsAcknowledgeFailed>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e034      	b.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c1c:	d028      	beq.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fe fa25 	bl	800306c <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11d      	bne.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b80      	cmp	r3, #128	@ 0x80
 8004c40:	d016      	beq.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e007      	b.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b80      	cmp	r3, #128	@ 0x80
 8004c7c:	d1c3      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c94:	e034      	b.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f89b 	bl	8004dd2 <I2C_IsAcknowledgeFailed>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e034      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cac:	d028      	beq.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fe f9dd 	bl	800306c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11d      	bne.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d016      	beq.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e007      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d1c3      	bne.n	8004c96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d24:	e049      	b.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d119      	bne.n	8004d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0210 	mvn.w	r2, #16
 8004d3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e030      	b.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fe f980 	bl	800306c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11d      	bne.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d016      	beq.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e007      	b.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d1ae      	bne.n	8004d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de8:	d11b      	bne.n	8004e22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004df2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e267      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d075      	beq.n	8004f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4e:	4b88      	ldr	r3, [pc, #544]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d00c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5a:	4b85      	ldr	r3, [pc, #532]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d112      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	4b82      	ldr	r3, [pc, #520]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	4b7e      	ldr	r3, [pc, #504]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05b      	beq.n	8004f38 <HAL_RCC_OscConfig+0x108>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d157      	bne.n	8004f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e242      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x74>
 8004e96:	4b76      	ldr	r3, [pc, #472]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a75      	ldr	r2, [pc, #468]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e01d      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x98>
 8004eae:	4b70      	ldr	r3, [pc, #448]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b6d      	ldr	r3, [pc, #436]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ec8:	4b69      	ldr	r3, [pc, #420]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a68      	ldr	r2, [pc, #416]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b66      	ldr	r3, [pc, #408]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fe f8c0 	bl	800306c <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fe f8bc 	bl	800306c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	@ 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e207      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b5b      	ldr	r3, [pc, #364]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xc0>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fe f8ac 	bl	800306c <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fe f8a8 	bl	800306c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	@ 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e1f3      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2a:	4b51      	ldr	r3, [pc, #324]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0xe8>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d063      	beq.n	800500e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f46:	4b4a      	ldr	r3, [pc, #296]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f52:	4b47      	ldr	r3, [pc, #284]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d11c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5e:	4b44      	ldr	r3, [pc, #272]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6a:	4b41      	ldr	r3, [pc, #260]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e1c7      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	4b3b      	ldr	r3, [pc, #236]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4937      	ldr	r1, [pc, #220]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	e03a      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa0:	4b34      	ldr	r3, [pc, #208]	@ (8005074 <HAL_RCC_OscConfig+0x244>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fe f861 	bl	800306c <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fae:	f7fe f85d 	bl	800306c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e1a8      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fcc:	4b28      	ldr	r3, [pc, #160]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4925      	ldr	r1, [pc, #148]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]
 8004fe0:	e015      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe2:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <HAL_RCC_OscConfig+0x244>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fe f840 	bl	800306c <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff0:	f7fe f83c 	bl	800306c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e187      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005002:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d036      	beq.n	8005088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005022:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <HAL_RCC_OscConfig+0x248>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fe f820 	bl	800306c <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005030:	f7fe f81c 	bl	800306c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e167      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005042:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCC_OscConfig+0x240>)
 8005044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x200>
 800504e:	e01b      	b.n	8005088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005050:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <HAL_RCC_OscConfig+0x248>)
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005056:	f7fe f809 	bl	800306c <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505c:	e00e      	b.n	800507c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505e:	f7fe f805 	bl	800306c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d907      	bls.n	800507c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e150      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
 8005070:	40023800 	.word	0x40023800
 8005074:	42470000 	.word	0x42470000
 8005078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507c:	4b88      	ldr	r3, [pc, #544]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800507e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ea      	bne.n	800505e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8097 	beq.w	80051c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509a:	4b81      	ldr	r3, [pc, #516]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10f      	bne.n	80050c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	4b7d      	ldr	r3, [pc, #500]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	4a7c      	ldr	r2, [pc, #496]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050b6:	4b7a      	ldr	r3, [pc, #488]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c6:	4b77      	ldr	r3, [pc, #476]	@ (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d118      	bne.n	8005104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d2:	4b74      	ldr	r3, [pc, #464]	@ (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a73      	ldr	r2, [pc, #460]	@ (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050de:	f7fd ffc5 	bl	800306c <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e6:	f7fd ffc1 	bl	800306c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e10c      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	4b6a      	ldr	r3, [pc, #424]	@ (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <HAL_RCC_OscConfig+0x2ea>
 800510c:	4b64      	ldr	r3, [pc, #400]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005110:	4a63      	ldr	r2, [pc, #396]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6713      	str	r3, [r2, #112]	@ 0x70
 8005118:	e01c      	b.n	8005154 <HAL_RCC_OscConfig+0x324>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b05      	cmp	r3, #5
 8005120:	d10c      	bne.n	800513c <HAL_RCC_OscConfig+0x30c>
 8005122:	4b5f      	ldr	r3, [pc, #380]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	4a5e      	ldr	r2, [pc, #376]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	6713      	str	r3, [r2, #112]	@ 0x70
 800512e:	4b5c      	ldr	r3, [pc, #368]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005132:	4a5b      	ldr	r2, [pc, #364]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	6713      	str	r3, [r2, #112]	@ 0x70
 800513a:	e00b      	b.n	8005154 <HAL_RCC_OscConfig+0x324>
 800513c:	4b58      	ldr	r3, [pc, #352]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005140:	4a57      	ldr	r2, [pc, #348]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	@ 0x70
 8005148:	4b55      	ldr	r3, [pc, #340]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514c:	4a54      	ldr	r2, [pc, #336]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800514e:	f023 0304 	bic.w	r3, r3, #4
 8005152:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fd ff86 	bl	800306c <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005164:	f7fd ff82 	bl	800306c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e0cb      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	4b49      	ldr	r3, [pc, #292]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ee      	beq.n	8005164 <HAL_RCC_OscConfig+0x334>
 8005186:	e014      	b.n	80051b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005188:	f7fd ff70 	bl	800306c <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fd ff6c 	bl	800306c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0b5      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a6:	4b3e      	ldr	r3, [pc, #248]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ee      	bne.n	8005190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b8:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	4a38      	ldr	r2, [pc, #224]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a1 	beq.w	8005310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ce:	4b34      	ldr	r3, [pc, #208]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d05c      	beq.n	8005294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d141      	bne.n	8005266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b31      	ldr	r3, [pc, #196]	@ (80052a8 <HAL_RCC_OscConfig+0x478>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fd ff40 	bl	800306c <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fd ff3c 	bl	800306c <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e087      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	3b01      	subs	r3, #1
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	491b      	ldr	r1, [pc, #108]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b1b      	ldr	r3, [pc, #108]	@ (80052a8 <HAL_RCC_OscConfig+0x478>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523e:	f7fd ff15 	bl	800306c <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005246:	f7fd ff11 	bl	800306c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e05c      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005258:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x416>
 8005264:	e054      	b.n	8005310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005266:	4b10      	ldr	r3, [pc, #64]	@ (80052a8 <HAL_RCC_OscConfig+0x478>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fd fefe 	bl	800306c <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005274:	f7fd fefa 	bl	800306c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e045      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x444>
 8005292:	e03d      	b.n	8005310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d107      	bne.n	80052ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e038      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x4ec>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d028      	beq.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d121      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d11a      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d111      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	3b01      	subs	r3, #1
 80052f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800

08005320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0cc      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b68      	ldr	r3, [pc, #416]	@ (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d90c      	bls.n	800535c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b65      	ldr	r3, [pc, #404]	@ (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b63      	ldr	r3, [pc, #396]	@ (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b8      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005374:	4b59      	ldr	r3, [pc, #356]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4a58      	ldr	r2, [pc, #352]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800537e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800538c:	4b53      	ldr	r3, [pc, #332]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a52      	ldr	r2, [pc, #328]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b50      	ldr	r3, [pc, #320]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	494d      	ldr	r1, [pc, #308]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d044      	beq.n	8005440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	4b47      	ldr	r3, [pc, #284]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d119      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d003      	beq.n	80053de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053de:	4b3f      	ldr	r3, [pc, #252]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e06f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ee:	4b3b      	ldr	r3, [pc, #236]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e067      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fe:	4b37      	ldr	r3, [pc, #220]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4934      	ldr	r1, [pc, #208]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005410:	f7fd fe2c 	bl	800306c <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	e00a      	b.n	800542e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005418:	f7fd fe28 	bl	800306c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e04f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	4b2b      	ldr	r3, [pc, #172]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 020c 	and.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	429a      	cmp	r2, r3
 800543e:	d1eb      	bne.n	8005418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005440:	4b25      	ldr	r3, [pc, #148]	@ (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20c      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b22      	ldr	r3, [pc, #136]	@ (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b20      	ldr	r3, [pc, #128]	@ (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e032      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005474:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4916      	ldr	r1, [pc, #88]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005492:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	490e      	ldr	r1, [pc, #56]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054a6:	f000 f821 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	490a      	ldr	r1, [pc, #40]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	5ccb      	ldrb	r3, [r1, r3]
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	4a09      	ldr	r2, [pc, #36]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd fc24 	bl	8002d14 <HAL_InitTick>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023c00 	.word	0x40023c00
 80054dc:	40023800 	.word	0x40023800
 80054e0:	0800e52c 	.word	0x0800e52c
 80054e4:	20000000 	.word	0x20000000
 80054e8:	20000004 	.word	0x20000004

080054ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f0:	b094      	sub	sp, #80	@ 0x50
 80054f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f8:	2300      	movs	r3, #0
 80054fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054fc:	2300      	movs	r3, #0
 80054fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005504:	4b79      	ldr	r3, [pc, #484]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	d00d      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x40>
 8005510:	2b08      	cmp	r3, #8
 8005512:	f200 80e1 	bhi.w	80056d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x34>
 800551a:	2b04      	cmp	r3, #4
 800551c:	d003      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x3a>
 800551e:	e0db      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005520:	4b73      	ldr	r3, [pc, #460]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005522:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005524:	e0db      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005526:	4b73      	ldr	r3, [pc, #460]	@ (80056f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800552a:	e0d8      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800552c:	4b6f      	ldr	r3, [pc, #444]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005536:	4b6d      	ldr	r3, [pc, #436]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d063      	beq.n	800560a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005542:	4b6a      	ldr	r3, [pc, #424]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	2200      	movs	r2, #0
 800554a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800554c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005554:	633b      	str	r3, [r7, #48]	@ 0x30
 8005556:	2300      	movs	r3, #0
 8005558:	637b      	str	r3, [r7, #52]	@ 0x34
 800555a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800555e:	4622      	mov	r2, r4
 8005560:	462b      	mov	r3, r5
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f04f 0100 	mov.w	r1, #0
 800556a:	0159      	lsls	r1, r3, #5
 800556c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005570:	0150      	lsls	r0, r2, #5
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4621      	mov	r1, r4
 8005578:	1a51      	subs	r1, r2, r1
 800557a:	6139      	str	r1, [r7, #16]
 800557c:	4629      	mov	r1, r5
 800557e:	eb63 0301 	sbc.w	r3, r3, r1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005590:	4659      	mov	r1, fp
 8005592:	018b      	lsls	r3, r1, #6
 8005594:	4651      	mov	r1, sl
 8005596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800559a:	4651      	mov	r1, sl
 800559c:	018a      	lsls	r2, r1, #6
 800559e:	4651      	mov	r1, sl
 80055a0:	ebb2 0801 	subs.w	r8, r2, r1
 80055a4:	4659      	mov	r1, fp
 80055a6:	eb63 0901 	sbc.w	r9, r3, r1
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055be:	4690      	mov	r8, r2
 80055c0:	4699      	mov	r9, r3
 80055c2:	4623      	mov	r3, r4
 80055c4:	eb18 0303 	adds.w	r3, r8, r3
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	462b      	mov	r3, r5
 80055cc:	eb49 0303 	adc.w	r3, r9, r3
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055de:	4629      	mov	r1, r5
 80055e0:	024b      	lsls	r3, r1, #9
 80055e2:	4621      	mov	r1, r4
 80055e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055e8:	4621      	mov	r1, r4
 80055ea:	024a      	lsls	r2, r1, #9
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055f2:	2200      	movs	r2, #0
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055fc:	f7fb fb44 	bl	8000c88 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4613      	mov	r3, r2
 8005606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005608:	e058      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560a:	4b38      	ldr	r3, [pc, #224]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	099b      	lsrs	r3, r3, #6
 8005610:	2200      	movs	r2, #0
 8005612:	4618      	mov	r0, r3
 8005614:	4611      	mov	r1, r2
 8005616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	2300      	movs	r3, #0
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	f04f 0000 	mov.w	r0, #0
 800562c:	f04f 0100 	mov.w	r1, #0
 8005630:	0159      	lsls	r1, r3, #5
 8005632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005636:	0150      	lsls	r0, r2, #5
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4641      	mov	r1, r8
 800563e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005642:	4649      	mov	r1, r9
 8005644:	eb63 0b01 	sbc.w	fp, r3, r1
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800565c:	ebb2 040a 	subs.w	r4, r2, sl
 8005660:	eb63 050b 	sbc.w	r5, r3, fp
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	00eb      	lsls	r3, r5, #3
 800566e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005672:	00e2      	lsls	r2, r4, #3
 8005674:	4614      	mov	r4, r2
 8005676:	461d      	mov	r5, r3
 8005678:	4643      	mov	r3, r8
 800567a:	18e3      	adds	r3, r4, r3
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	464b      	mov	r3, r9
 8005680:	eb45 0303 	adc.w	r3, r5, r3
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005692:	4629      	mov	r1, r5
 8005694:	028b      	lsls	r3, r1, #10
 8005696:	4621      	mov	r1, r4
 8005698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800569c:	4621      	mov	r1, r4
 800569e:	028a      	lsls	r2, r1, #10
 80056a0:	4610      	mov	r0, r2
 80056a2:	4619      	mov	r1, r3
 80056a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a6:	2200      	movs	r2, #0
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	61fa      	str	r2, [r7, #28]
 80056ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b0:	f7fb faea 	bl	8000c88 <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4613      	mov	r3, r2
 80056ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056bc:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	3301      	adds	r3, #1
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80056cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056d6:	e002      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3750      	adds	r7, #80	@ 0x50
 80056e4:	46bd      	mov	sp, r7
 80056e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	00f42400 	.word	0x00f42400
 80056f4:	007a1200 	.word	0x007a1200

080056f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056fc:	4b03      	ldr	r3, [pc, #12]	@ (800570c <HAL_RCC_GetHCLKFreq+0x14>)
 80056fe:	681b      	ldr	r3, [r3, #0]
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20000000 	.word	0x20000000

08005710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005714:	f7ff fff0 	bl	80056f8 <HAL_RCC_GetHCLKFreq>
 8005718:	4602      	mov	r2, r0
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	0a9b      	lsrs	r3, r3, #10
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	4903      	ldr	r1, [pc, #12]	@ (8005734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40023800 	.word	0x40023800
 8005734:	0800e53c 	.word	0x0800e53c

08005738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800573c:	f7ff ffdc 	bl	80056f8 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0b5b      	lsrs	r3, r3, #13
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4903      	ldr	r1, [pc, #12]	@ (800575c <HAL_RCC_GetPCLK2Freq+0x24>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	0800e53c 	.word	0x0800e53c

08005760 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	220f      	movs	r2, #15
 800576e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005770:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <HAL_RCC_GetClockConfig+0x5c>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0203 	and.w	r2, r3, #3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800577c:	4b0f      	ldr	r3, [pc, #60]	@ (80057bc <HAL_RCC_GetClockConfig+0x5c>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005788:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <HAL_RCC_GetClockConfig+0x5c>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005794:	4b09      	ldr	r3, [pc, #36]	@ (80057bc <HAL_RCC_GetClockConfig+0x5c>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	08db      	lsrs	r3, r3, #3
 800579a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057a2:	4b07      	ldr	r3, [pc, #28]	@ (80057c0 <HAL_RCC_GetClockConfig+0x60>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0207 	and.w	r2, r3, #7
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800
 80057c0:	40023c00 	.word	0x40023c00

080057c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e041      	b.n	800585a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fd f9c4 	bl	8002b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f000 fce0 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d001      	beq.n	800587c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e04e      	b.n	800591a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a23      	ldr	r2, [pc, #140]	@ (8005928 <HAL_TIM_Base_Start_IT+0xc4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d022      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x80>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a6:	d01d      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x80>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	@ (800592c <HAL_TIM_Base_Start_IT+0xc8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d018      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x80>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005930 <HAL_TIM_Base_Start_IT+0xcc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x80>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005934 <HAL_TIM_Base_Start_IT+0xd0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00e      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x80>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <HAL_TIM_Base_Start_IT+0xd4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x80>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a19      	ldr	r2, [pc, #100]	@ (800593c <HAL_TIM_Base_Start_IT+0xd8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x80>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a18      	ldr	r2, [pc, #96]	@ (8005940 <HAL_TIM_Base_Start_IT+0xdc>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d111      	bne.n	8005908 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b06      	cmp	r3, #6
 80058f4:	d010      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0201 	orr.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005906:	e007      	b.n	8005918 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800

08005944 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e041      	b.n	80059da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f839 	bl	80059e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f000 fc20 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_IC_Start_IT+0x1e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	e013      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x46>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d104      	bne.n	8005a26 <HAL_TIM_IC_Start_IT+0x2e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	e00b      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x46>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_IC_Start_IT+0x3e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	e003      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x46>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_TIM_IC_Start_IT+0x58>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	e013      	b.n	8005a78 <HAL_TIM_IC_Start_IT+0x80>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d104      	bne.n	8005a60 <HAL_TIM_IC_Start_IT+0x68>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e00b      	b.n	8005a78 <HAL_TIM_IC_Start_IT+0x80>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d104      	bne.n	8005a70 <HAL_TIM_IC_Start_IT+0x78>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e003      	b.n	8005a78 <HAL_TIM_IC_Start_IT+0x80>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a7a:	7bbb      	ldrb	r3, [r7, #14]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d102      	bne.n	8005a86 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a80:	7b7b      	ldrb	r3, [r7, #13]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d001      	beq.n	8005a8a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0cc      	b.n	8005c24 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_IC_Start_IT+0xa2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a98:	e013      	b.n	8005ac2 <HAL_TIM_IC_Start_IT+0xca>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_IC_Start_IT+0xb2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa8:	e00b      	b.n	8005ac2 <HAL_TIM_IC_Start_IT+0xca>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_IC_Start_IT+0xc2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ab8:	e003      	b.n	8005ac2 <HAL_TIM_IC_Start_IT+0xca>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_IC_Start_IT+0xda>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad0:	e013      	b.n	8005afa <HAL_TIM_IC_Start_IT+0x102>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_IC_Start_IT+0xea>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ae0:	e00b      	b.n	8005afa <HAL_TIM_IC_Start_IT+0x102>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_IC_Start_IT+0xfa>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af0:	e003      	b.n	8005afa <HAL_TIM_IC_Start_IT+0x102>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b0c      	cmp	r3, #12
 8005afe:	d841      	bhi.n	8005b84 <HAL_TIM_IC_Start_IT+0x18c>
 8005b00:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <HAL_TIM_IC_Start_IT+0x110>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b3d 	.word	0x08005b3d
 8005b0c:	08005b85 	.word	0x08005b85
 8005b10:	08005b85 	.word	0x08005b85
 8005b14:	08005b85 	.word	0x08005b85
 8005b18:	08005b4f 	.word	0x08005b4f
 8005b1c:	08005b85 	.word	0x08005b85
 8005b20:	08005b85 	.word	0x08005b85
 8005b24:	08005b85 	.word	0x08005b85
 8005b28:	08005b61 	.word	0x08005b61
 8005b2c:	08005b85 	.word	0x08005b85
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005b85 	.word	0x08005b85
 8005b38:	08005b73 	.word	0x08005b73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0202 	orr.w	r2, r2, #2
 8005b4a:	60da      	str	r2, [r3, #12]
      break;
 8005b4c:	e01d      	b.n	8005b8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0204 	orr.w	r2, r2, #4
 8005b5c:	60da      	str	r2, [r3, #12]
      break;
 8005b5e:	e014      	b.n	8005b8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0208 	orr.w	r2, r2, #8
 8005b6e:	60da      	str	r2, [r3, #12]
      break;
 8005b70:	e00b      	b.n	8005b8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0210 	orr.w	r2, r2, #16
 8005b80:	60da      	str	r2, [r3, #12]
      break;
 8005b82:	e002      	b.n	8005b8a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
      break;
 8005b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d148      	bne.n	8005c22 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2201      	movs	r2, #1
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fd85 	bl	80066a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a22      	ldr	r2, [pc, #136]	@ (8005c2c <HAL_TIM_IC_Start_IT+0x234>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_TIM_IC_Start_IT+0x1f6>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d01d      	beq.n	8005bee <HAL_TIM_IC_Start_IT+0x1f6>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c30 <HAL_TIM_IC_Start_IT+0x238>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_TIM_IC_Start_IT+0x1f6>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <HAL_TIM_IC_Start_IT+0x23c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_TIM_IC_Start_IT+0x1f6>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <HAL_TIM_IC_Start_IT+0x240>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_TIM_IC_Start_IT+0x1f6>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <HAL_TIM_IC_Start_IT+0x244>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_TIM_IC_Start_IT+0x1f6>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <HAL_TIM_IC_Start_IT+0x248>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIM_IC_Start_IT+0x1f6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a16      	ldr	r2, [pc, #88]	@ (8005c44 <HAL_TIM_IC_Start_IT+0x24c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d111      	bne.n	8005c12 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d010      	beq.n	8005c22 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c10:	e007      	b.n	8005c22 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40010400 	.word	0x40010400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40001800 	.word	0x40001800

08005c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d020      	beq.n	8005cac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0202 	mvn.w	r2, #2
 8005c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fc fe8a 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 8005c98:	e005      	b.n	8005ca6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fa76 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa7d 	bl	80061a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d020      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0204 	mvn.w	r2, #4
 8005cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fc fe64 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa50 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fa57 	bl	80061a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d020      	beq.n	8005d44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0208 	mvn.w	r2, #8
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fc fe3e 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa2a 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa31 	bl	80061a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d020      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01b      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0210 	mvn.w	r2, #16
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2208      	movs	r2, #8
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc fe18 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa04 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa0b 	bl	80061a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0201 	mvn.w	r2, #1
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9e2 	bl	8006178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fd14 	bl	8006800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9dc 	bl	80061b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0220 	mvn.w	r2, #32
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fce6 	bl	80067ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e088      	b.n	8005f58 <HAL_TIM_IC_ConfigChannel+0x130>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d11b      	bne.n	8005e8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005e64:	f000 fa5c 	bl	8006320 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 020c 	bic.w	r2, r2, #12
 8005e76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6999      	ldr	r1, [r3, #24]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	619a      	str	r2, [r3, #24]
 8005e8a:	e060      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d11c      	bne.n	8005ecc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ea2:	f000 fae0 	bl	8006466 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005eb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6999      	ldr	r1, [r3, #24]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	021a      	lsls	r2, r3, #8
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	619a      	str	r2, [r3, #24]
 8005eca:	e040      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d11b      	bne.n	8005f0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005ee2:	f000 fb2d 	bl	8006540 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 020c 	bic.w	r2, r2, #12
 8005ef4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69d9      	ldr	r1, [r3, #28]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	61da      	str	r2, [r3, #28]
 8005f08:	e021      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d11c      	bne.n	8005f4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005f20:	f000 fb4a 	bl	80065b8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69da      	ldr	r2, [r3, #28]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69d9      	ldr	r1, [r3, #28]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	61da      	str	r2, [r3, #28]
 8005f48:	e001      	b.n	8005f4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_TIM_ConfigClockSource+0x1c>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e0b4      	b.n	80060e6 <HAL_TIM_ConfigClockSource+0x186>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb4:	d03e      	beq.n	8006034 <HAL_TIM_ConfigClockSource+0xd4>
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fba:	f200 8087 	bhi.w	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc2:	f000 8086 	beq.w	80060d2 <HAL_TIM_ConfigClockSource+0x172>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fca:	d87f      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fcc:	2b70      	cmp	r3, #112	@ 0x70
 8005fce:	d01a      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xa6>
 8005fd0:	2b70      	cmp	r3, #112	@ 0x70
 8005fd2:	d87b      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b60      	cmp	r3, #96	@ 0x60
 8005fd6:	d050      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x11a>
 8005fd8:	2b60      	cmp	r3, #96	@ 0x60
 8005fda:	d877      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b50      	cmp	r3, #80	@ 0x50
 8005fde:	d03c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0xfa>
 8005fe0:	2b50      	cmp	r3, #80	@ 0x50
 8005fe2:	d873      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b40      	cmp	r3, #64	@ 0x40
 8005fe6:	d058      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x13a>
 8005fe8:	2b40      	cmp	r3, #64	@ 0x40
 8005fea:	d86f      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b30      	cmp	r3, #48	@ 0x30
 8005fee:	d064      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8005ff0:	2b30      	cmp	r3, #48	@ 0x30
 8005ff2:	d86b      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d060      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d867      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d05c      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d05a      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8006004:	e062      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006016:	f000 fb27 	bl	8006668 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	609a      	str	r2, [r3, #8]
      break;
 8006032:	e04f      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006044:	f000 fb10 	bl	8006668 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006056:	609a      	str	r2, [r3, #8]
      break;
 8006058:	e03c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	461a      	mov	r2, r3
 8006068:	f000 f9ce 	bl	8006408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2150      	movs	r1, #80	@ 0x50
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fadd 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8006078:	e02c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006086:	461a      	mov	r2, r3
 8006088:	f000 fa2a 	bl	80064e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2160      	movs	r1, #96	@ 0x60
 8006092:	4618      	mov	r0, r3
 8006094:	f000 facd 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 8006098:	e01c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 f9ae 	bl	8006408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2140      	movs	r1, #64	@ 0x40
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fabd 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f000 fab4 	bl	8006632 <TIM_ITRx_SetConfig>
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d831      	bhi.n	8006168 <HAL_TIM_ReadCapturedValue+0x78>
 8006104:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006141 	.word	0x08006141
 8006110:	08006169 	.word	0x08006169
 8006114:	08006169 	.word	0x08006169
 8006118:	08006169 	.word	0x08006169
 800611c:	0800614b 	.word	0x0800614b
 8006120:	08006169 	.word	0x08006169
 8006124:	08006169 	.word	0x08006169
 8006128:	08006169 	.word	0x08006169
 800612c:	08006155 	.word	0x08006155
 8006130:	08006169 	.word	0x08006169
 8006134:	08006169 	.word	0x08006169
 8006138:	08006169 	.word	0x08006169
 800613c:	0800615f 	.word	0x0800615f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006146:	60fb      	str	r3, [r7, #12]

      break;
 8006148:	e00f      	b.n	800616a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006150:	60fb      	str	r3, [r7, #12]

      break;
 8006152:	e00a      	b.n	800616a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615a:	60fb      	str	r3, [r7, #12]

      break;
 800615c:	e005      	b.n	800616a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006164:	60fb      	str	r3, [r7, #12]

      break;
 8006166:	e000      	b.n	800616a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006168:	bf00      	nop
  }

  return tmpreg;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a46      	ldr	r2, [pc, #280]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d013      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d00f      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a43      	ldr	r2, [pc, #268]	@ (80062f8 <TIM_Base_SetConfig+0x130>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00b      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a42      	ldr	r2, [pc, #264]	@ (80062fc <TIM_Base_SetConfig+0x134>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a41      	ldr	r2, [pc, #260]	@ (8006300 <TIM_Base_SetConfig+0x138>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a40      	ldr	r2, [pc, #256]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d108      	bne.n	800621a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a35      	ldr	r2, [pc, #212]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006228:	d027      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a32      	ldr	r2, [pc, #200]	@ (80062f8 <TIM_Base_SetConfig+0x130>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d023      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a31      	ldr	r2, [pc, #196]	@ (80062fc <TIM_Base_SetConfig+0x134>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a30      	ldr	r2, [pc, #192]	@ (8006300 <TIM_Base_SetConfig+0x138>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2f      	ldr	r2, [pc, #188]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d017      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2e      	ldr	r2, [pc, #184]	@ (8006308 <TIM_Base_SetConfig+0x140>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2d      	ldr	r2, [pc, #180]	@ (800630c <TIM_Base_SetConfig+0x144>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00f      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2c      	ldr	r2, [pc, #176]	@ (8006310 <TIM_Base_SetConfig+0x148>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2b      	ldr	r2, [pc, #172]	@ (8006314 <TIM_Base_SetConfig+0x14c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2a      	ldr	r2, [pc, #168]	@ (8006318 <TIM_Base_SetConfig+0x150>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a29      	ldr	r2, [pc, #164]	@ (800631c <TIM_Base_SetConfig+0x154>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d108      	bne.n	800628c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a10      	ldr	r2, [pc, #64]	@ (80062f4 <TIM_Base_SetConfig+0x12c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_Base_SetConfig+0xf8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a12      	ldr	r2, [pc, #72]	@ (8006304 <TIM_Base_SetConfig+0x13c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d103      	bne.n	80062c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d105      	bne.n	80062e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f023 0201 	bic.w	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	611a      	str	r2, [r3, #16]
  }
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40010400 	.word	0x40010400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800
 8006314:	40001800 	.word	0x40001800
 8006318:	40001c00 	.word	0x40001c00
 800631c:	40002000 	.word	0x40002000

08006320 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f023 0201 	bic.w	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a28      	ldr	r2, [pc, #160]	@ (80063ec <TIM_TI1_SetConfig+0xcc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01b      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006354:	d017      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a25      	ldr	r2, [pc, #148]	@ (80063f0 <TIM_TI1_SetConfig+0xd0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a24      	ldr	r2, [pc, #144]	@ (80063f4 <TIM_TI1_SetConfig+0xd4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a23      	ldr	r2, [pc, #140]	@ (80063f8 <TIM_TI1_SetConfig+0xd8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a22      	ldr	r2, [pc, #136]	@ (80063fc <TIM_TI1_SetConfig+0xdc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a21      	ldr	r2, [pc, #132]	@ (8006400 <TIM_TI1_SetConfig+0xe0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_TI1_SetConfig+0x66>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a20      	ldr	r2, [pc, #128]	@ (8006404 <TIM_TI1_SetConfig+0xe4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <TIM_TI1_SetConfig+0x6a>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <TIM_TI1_SetConfig+0x6c>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e003      	b.n	80063aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f023 030a 	bic.w	r3, r3, #10
 80063c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f003 030a 	and.w	r3, r3, #10
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800

08006408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f023 0201 	bic.w	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 030a 	bic.w	r3, r3, #10
 8006444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006466:	b480      	push	{r7}
 8006468:	b087      	sub	sp, #28
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0210 	bic.w	r2, r3, #16
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f023 0210 	bic.w	r2, r3, #16
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800650a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	031b      	lsls	r3, r3, #12
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800651c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	621a      	str	r2, [r3, #32]
}
 8006534:	bf00      	nop
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 0303 	bic.w	r3, r3, #3
 800656c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800657c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	b2db      	uxtb	r3, r3
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006590:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	621a      	str	r2, [r3, #32]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	031b      	lsls	r3, r3, #12
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800660a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	031b      	lsls	r3, r3, #12
 8006610:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	f043 0307 	orr.w	r3, r3, #7
 8006654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	021a      	lsls	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	431a      	orrs	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4313      	orrs	r3, r2
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	609a      	str	r2, [r3, #8]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2201      	movs	r2, #1
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1a      	ldr	r2, [r3, #32]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	43db      	mvns	r3, r3
 80066ca:	401a      	ands	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a1a      	ldr	r2, [r3, #32]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	431a      	orrs	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
	...

080066f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e05a      	b.n	80067c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a21      	ldr	r2, [pc, #132]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006758:	d01d      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	@ (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1a      	ldr	r2, [pc, #104]	@ (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a17      	ldr	r2, [pc, #92]	@ (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10c      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800679c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40010400 	.word	0x40010400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40001800 	.word	0x40001800

080067ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e042      	b.n	80068ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fc f9ec 	bl	8002c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2224      	movs	r2, #36	@ 0x24
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f973 	bl	8006b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800686c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800687c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800688c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	@ 0x28
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d175      	bne.n	80069c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_UART_Transmit+0x2c>
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e06e      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2221      	movs	r2, #33	@ 0x21
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068f2:	f7fc fbbb 	bl	800306c <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690c:	d108      	bne.n	8006920 <HAL_UART_Transmit+0x6c>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	e003      	b.n	8006928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006928:	e02e      	b.n	8006988 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2180      	movs	r1, #128	@ 0x80
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f848 	bl	80069ca <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e03a      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	3302      	adds	r3, #2
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e007      	b.n	800697a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	3301      	adds	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1cb      	bne.n	800692a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2200      	movs	r2, #0
 800699a:	2140      	movs	r1, #64	@ 0x40
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f814 	bl	80069ca <UART_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e006      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e000      	b.n	80069c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
  }
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	4613      	mov	r3, r2
 80069d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069da:	e03b      	b.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e2:	d037      	beq.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e4:	f7fc fb42 	bl	800306c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	6a3a      	ldr	r2, [r7, #32]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d302      	bcc.n	80069fa <UART_WaitOnFlagUntilTimeout+0x30>
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e03a      	b.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d023      	beq.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b80      	cmp	r3, #128	@ 0x80
 8006a10:	d020      	beq.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b40      	cmp	r3, #64	@ 0x40
 8006a16:	d01d      	beq.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d116      	bne.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f81d 	bl	8006a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2208      	movs	r2, #8
 8006a46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e00f      	b.n	8006a74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	bf0c      	ite	eq
 8006a64:	2301      	moveq	r3, #1
 8006a66:	2300      	movne	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d0b4      	beq.n	80069dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b095      	sub	sp, #84	@ 0x54
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aa4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e5      	bne.n	8006a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3314      	adds	r3, #20
 8006abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d119      	bne.n	8006b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f023 0310 	bic.w	r3, r3, #16
 8006b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b14:	61ba      	str	r2, [r7, #24]
 8006b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6979      	ldr	r1, [r7, #20]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	613b      	str	r3, [r7, #16]
   return(result);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e5      	bne.n	8006af4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b36:	bf00      	nop
 8006b38:	3754      	adds	r7, #84	@ 0x54
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b48:	b0c0      	sub	sp, #256	@ 0x100
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	68d9      	ldr	r1, [r3, #12]
 8006b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	ea40 0301 	orr.w	r3, r0, r1
 8006b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b9c:	f021 010c 	bic.w	r1, r1, #12
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006baa:	430b      	orrs	r3, r1
 8006bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbe:	6999      	ldr	r1, [r3, #24]
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	ea40 0301 	orr.w	r3, r0, r1
 8006bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e10 <UART_SetConfig+0x2cc>)
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d005      	beq.n	8006be4 <UART_SetConfig+0xa0>
 8006bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b8d      	ldr	r3, [pc, #564]	@ (8006e14 <UART_SetConfig+0x2d0>)
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d104      	bne.n	8006bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006be4:	f7fe fda8 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 8006be8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bec:	e003      	b.n	8006bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bee:	f7fe fd8f 	bl	8005710 <HAL_RCC_GetPCLK1Freq>
 8006bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c00:	f040 810c 	bne.w	8006e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c16:	4622      	mov	r2, r4
 8006c18:	462b      	mov	r3, r5
 8006c1a:	1891      	adds	r1, r2, r2
 8006c1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c1e:	415b      	adcs	r3, r3
 8006c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c26:	4621      	mov	r1, r4
 8006c28:	eb12 0801 	adds.w	r8, r2, r1
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	eb43 0901 	adc.w	r9, r3, r1
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c46:	4690      	mov	r8, r2
 8006c48:	4699      	mov	r9, r3
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	eb18 0303 	adds.w	r3, r8, r3
 8006c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c54:	462b      	mov	r3, r5
 8006c56:	eb49 0303 	adc.w	r3, r9, r3
 8006c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c72:	460b      	mov	r3, r1
 8006c74:	18db      	adds	r3, r3, r3
 8006c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c78:	4613      	mov	r3, r2
 8006c7a:	eb42 0303 	adc.w	r3, r2, r3
 8006c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c88:	f7f9 fffe 	bl	8000c88 <__aeabi_uldivmod>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4b61      	ldr	r3, [pc, #388]	@ (8006e18 <UART_SetConfig+0x2d4>)
 8006c92:	fba3 2302 	umull	r2, r3, r3, r2
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	011c      	lsls	r4, r3, #4
 8006c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	1891      	adds	r1, r2, r2
 8006cb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006cb4:	415b      	adcs	r3, r3
 8006cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cdc:	4692      	mov	sl, r2
 8006cde:	469b      	mov	fp, r3
 8006ce0:	4643      	mov	r3, r8
 8006ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cea:	464b      	mov	r3, r9
 8006cec:	eb4b 0303 	adc.w	r3, fp, r3
 8006cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	18db      	adds	r3, r3, r3
 8006d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d0e:	4613      	mov	r3, r2
 8006d10:	eb42 0303 	adc.w	r3, r2, r3
 8006d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d1e:	f7f9 ffb3 	bl	8000c88 <__aeabi_uldivmod>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	4b3b      	ldr	r3, [pc, #236]	@ (8006e18 <UART_SetConfig+0x2d4>)
 8006d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	2264      	movs	r2, #100	@ 0x64
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
 8006d36:	1acb      	subs	r3, r1, r3
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d3e:	4b36      	ldr	r3, [pc, #216]	@ (8006e18 <UART_SetConfig+0x2d4>)
 8006d40:	fba3 2302 	umull	r2, r3, r3, r2
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d4c:	441c      	add	r4, r3
 8006d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d60:	4642      	mov	r2, r8
 8006d62:	464b      	mov	r3, r9
 8006d64:	1891      	adds	r1, r2, r2
 8006d66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d68:	415b      	adcs	r3, r3
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d70:	4641      	mov	r1, r8
 8006d72:	1851      	adds	r1, r2, r1
 8006d74:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d76:	4649      	mov	r1, r9
 8006d78:	414b      	adcs	r3, r1
 8006d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d88:	4659      	mov	r1, fp
 8006d8a:	00cb      	lsls	r3, r1, #3
 8006d8c:	4651      	mov	r1, sl
 8006d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d92:	4651      	mov	r1, sl
 8006d94:	00ca      	lsls	r2, r1, #3
 8006d96:	4610      	mov	r0, r2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	189b      	adds	r3, r3, r2
 8006da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006da4:	464b      	mov	r3, r9
 8006da6:	460a      	mov	r2, r1
 8006da8:	eb42 0303 	adc.w	r3, r2, r3
 8006dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	18db      	adds	r3, r3, r3
 8006dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dca:	4613      	mov	r3, r2
 8006dcc:	eb42 0303 	adc.w	r3, r2, r3
 8006dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006dda:	f7f9 ff55 	bl	8000c88 <__aeabi_uldivmod>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e18 <UART_SetConfig+0x2d4>)
 8006de4:	fba3 1302 	umull	r1, r3, r3, r2
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	2164      	movs	r1, #100	@ 0x64
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	3332      	adds	r3, #50	@ 0x32
 8006df6:	4a08      	ldr	r2, [pc, #32]	@ (8006e18 <UART_SetConfig+0x2d4>)
 8006df8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	f003 0207 	and.w	r2, r3, #7
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4422      	add	r2, r4
 8006e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e0c:	e106      	b.n	800701c <UART_SetConfig+0x4d8>
 8006e0e:	bf00      	nop
 8006e10:	40011000 	.word	0x40011000
 8006e14:	40011400 	.word	0x40011400
 8006e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e2e:	4642      	mov	r2, r8
 8006e30:	464b      	mov	r3, r9
 8006e32:	1891      	adds	r1, r2, r2
 8006e34:	6239      	str	r1, [r7, #32]
 8006e36:	415b      	adcs	r3, r3
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e3e:	4641      	mov	r1, r8
 8006e40:	1854      	adds	r4, r2, r1
 8006e42:	4649      	mov	r1, r9
 8006e44:	eb43 0501 	adc.w	r5, r3, r1
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	00eb      	lsls	r3, r5, #3
 8006e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e56:	00e2      	lsls	r2, r4, #3
 8006e58:	4614      	mov	r4, r2
 8006e5a:	461d      	mov	r5, r3
 8006e5c:	4643      	mov	r3, r8
 8006e5e:	18e3      	adds	r3, r4, r3
 8006e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e64:	464b      	mov	r3, r9
 8006e66:	eb45 0303 	adc.w	r3, r5, r3
 8006e6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	008b      	lsls	r3, r1, #2
 8006e8e:	4621      	mov	r1, r4
 8006e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e94:	4621      	mov	r1, r4
 8006e96:	008a      	lsls	r2, r1, #2
 8006e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e9c:	f7f9 fef4 	bl	8000c88 <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4b60      	ldr	r3, [pc, #384]	@ (8007028 <UART_SetConfig+0x4e4>)
 8006ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	011c      	lsls	r4, r3, #4
 8006eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006eb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	1891      	adds	r1, r2, r2
 8006ec6:	61b9      	str	r1, [r7, #24]
 8006ec8:	415b      	adcs	r3, r3
 8006eca:	61fb      	str	r3, [r7, #28]
 8006ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	1851      	adds	r1, r2, r1
 8006ed4:	6139      	str	r1, [r7, #16]
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	414b      	adcs	r3, r1
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee8:	4659      	mov	r1, fp
 8006eea:	00cb      	lsls	r3, r1, #3
 8006eec:	4651      	mov	r1, sl
 8006eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	00ca      	lsls	r2, r1, #3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	4642      	mov	r2, r8
 8006efe:	189b      	adds	r3, r3, r2
 8006f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f04:	464b      	mov	r3, r9
 8006f06:	460a      	mov	r2, r1
 8006f08:	eb42 0303 	adc.w	r3, r2, r3
 8006f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f28:	4649      	mov	r1, r9
 8006f2a:	008b      	lsls	r3, r1, #2
 8006f2c:	4641      	mov	r1, r8
 8006f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f32:	4641      	mov	r1, r8
 8006f34:	008a      	lsls	r2, r1, #2
 8006f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f3a:	f7f9 fea5 	bl	8000c88 <__aeabi_uldivmod>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	4b38      	ldr	r3, [pc, #224]	@ (8007028 <UART_SetConfig+0x4e4>)
 8006f46:	fba3 2301 	umull	r2, r3, r3, r1
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	2264      	movs	r2, #100	@ 0x64
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
 8006f52:	1acb      	subs	r3, r1, r3
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	3332      	adds	r3, #50	@ 0x32
 8006f58:	4a33      	ldr	r2, [pc, #204]	@ (8007028 <UART_SetConfig+0x4e4>)
 8006f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f64:	441c      	add	r4, r3
 8006f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f74:	4642      	mov	r2, r8
 8006f76:	464b      	mov	r3, r9
 8006f78:	1891      	adds	r1, r2, r2
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	415b      	adcs	r3, r3
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f84:	4641      	mov	r1, r8
 8006f86:	1851      	adds	r1, r2, r1
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	414b      	adcs	r3, r1
 8006f8e:	607b      	str	r3, [r7, #4]
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f9c:	4659      	mov	r1, fp
 8006f9e:	00cb      	lsls	r3, r1, #3
 8006fa0:	4651      	mov	r1, sl
 8006fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fa6:	4651      	mov	r1, sl
 8006fa8:	00ca      	lsls	r2, r1, #3
 8006faa:	4610      	mov	r0, r2
 8006fac:	4619      	mov	r1, r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	460a      	mov	r2, r1
 8006fba:	eb42 0303 	adc.w	r3, r2, r3
 8006fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fca:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fd8:	4649      	mov	r1, r9
 8006fda:	008b      	lsls	r3, r1, #2
 8006fdc:	4641      	mov	r1, r8
 8006fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	008a      	lsls	r2, r1, #2
 8006fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fea:	f7f9 fe4d 	bl	8000c88 <__aeabi_uldivmod>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8007028 <UART_SetConfig+0x4e4>)
 8006ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	2164      	movs	r1, #100	@ 0x64
 8006ffc:	fb01 f303 	mul.w	r3, r1, r3
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	3332      	adds	r3, #50	@ 0x32
 8007006:	4a08      	ldr	r2, [pc, #32]	@ (8007028 <UART_SetConfig+0x4e4>)
 8007008:	fba2 2303 	umull	r2, r3, r2, r3
 800700c:	095b      	lsrs	r3, r3, #5
 800700e:	f003 020f 	and.w	r2, r3, #15
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4422      	add	r2, r4
 800701a:	609a      	str	r2, [r3, #8]
}
 800701c:	bf00      	nop
 800701e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007028:	51eb851f 	.word	0x51eb851f

0800702c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800703a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800703e:	2b84      	cmp	r3, #132	@ 0x84
 8007040:	d005      	beq.n	800704e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007042:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	3303      	adds	r3, #3
 800704c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800704e:	68fb      	ldr	r3, [r7, #12]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007060:	f001 f810 	bl	8008084 <vTaskStartScheduler>
  
  return osOK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	bd80      	pop	{r7, pc}

0800706a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800706a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800706c:	b089      	sub	sp, #36	@ 0x24
 800706e:	af04      	add	r7, sp, #16
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d020      	beq.n	80070be <osThreadCreate+0x54>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01c      	beq.n	80070be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685c      	ldr	r4, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691e      	ldr	r6, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff ffc8 	bl	800702c <makeFreeRtosPriority>
 800709c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070a6:	9202      	str	r2, [sp, #8]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	9100      	str	r1, [sp, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	4632      	mov	r2, r6
 80070b0:	4629      	mov	r1, r5
 80070b2:	4620      	mov	r0, r4
 80070b4:	f000 fd56 	bl	8007b64 <xTaskCreateStatic>
 80070b8:	4603      	mov	r3, r0
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e01c      	b.n	80070f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685c      	ldr	r4, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff ffaa 	bl	800702c <makeFreeRtosPriority>
 80070d8:	4602      	mov	r2, r0
 80070da:	f107 030c 	add.w	r3, r7, #12
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	9200      	str	r2, [sp, #0]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	4632      	mov	r2, r6
 80070e6:	4629      	mov	r1, r5
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fd9d 	bl	8007c28 <xTaskCreate>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d001      	beq.n	80070f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80070f8:	68fb      	ldr	r3, [r7, #12]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <osDelay+0x16>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	e000      	b.n	800711a <osDelay+0x18>
 8007118:	2301      	movs	r3, #1
 800711a:	4618      	mov	r0, r3
 800711c:	f000 ff7c 	bl	8008018 <vTaskDelay>
  
  return osOK;
 8007120:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f103 0208 	add.w	r2, r3, #8
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007142:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f103 0208 	add.w	r2, r3, #8
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f103 0208 	add.w	r2, r3, #8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	601a      	str	r2, [r3, #0]
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071e2:	d103      	bne.n	80071ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e00c      	b.n	8007206 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3308      	adds	r3, #8
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e002      	b.n	80071fa <vListInsert+0x2e>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	429a      	cmp	r2, r3
 8007204:	d2f6      	bcs.n	80071f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6892      	ldr	r2, [r2, #8]
 8007254:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6852      	ldr	r2, [r2, #4]
 800725e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d103      	bne.n	8007272 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	1e5a      	subs	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
	...

08007294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072ba:	bf00      	nop
 80072bc:	bf00      	nop
 80072be:	e7fd      	b.n	80072bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072c0:	f001 fe6a 	bl	8008f98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072cc:	68f9      	ldr	r1, [r7, #12]
 80072ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	3b01      	subs	r3, #1
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	441a      	add	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	22ff      	movs	r2, #255	@ 0xff
 8007304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	22ff      	movs	r2, #255	@ 0xff
 800730c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d114      	bne.n	8007340 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01a      	beq.n	8007354 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3310      	adds	r3, #16
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f918 	bl	8008558 <xTaskRemoveFromEventList>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d012      	beq.n	8007354 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800732e:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <xQueueGenericReset+0xd0>)
 8007330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	e009      	b.n	8007354 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3310      	adds	r3, #16
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fef0 	bl	800712a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3324      	adds	r3, #36	@ 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff feeb 	bl	800712a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007354:	f001 fe52 	bl	8008ffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007358:	2301      	movs	r3, #1
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	@ 0x28
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4613      	mov	r3, r2
 8007374:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <xQueueGenericCreate+0x2c>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	613b      	str	r3, [r7, #16]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	fb02 f303 	mul.w	r3, r2, r3
 800739c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	3348      	adds	r3, #72	@ 0x48
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 ff1a 	bl	80091dc <pvPortMalloc>
 80073a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d011      	beq.n	80073d4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	3348      	adds	r3, #72	@ 0x48
 80073b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073c2:	79fa      	ldrb	r2, [r7, #7]
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f805 	bl	80073de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073d4:	69bb      	ldr	r3, [r7, #24]
	}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e002      	b.n	8007400 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800740c:	2101      	movs	r1, #1
 800740e:	69b8      	ldr	r0, [r7, #24]
 8007410:	f7ff ff40 	bl	8007294 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	@ 0x38
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <xQueueGenericSend+0x34>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <xQueueGenericSend+0x42>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <xQueueGenericSend+0x46>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueGenericSend+0x48>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <xQueueGenericSend+0x64>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d103      	bne.n	800748e <xQueueGenericSend+0x72>
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <xQueueGenericSend+0x76>
 800748e:	2301      	movs	r3, #1
 8007490:	e000      	b.n	8007494 <xQueueGenericSend+0x78>
 8007492:	2300      	movs	r3, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <xQueueGenericSend+0x94>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	623b      	str	r3, [r7, #32]
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	e7fd      	b.n	80074ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b0:	f001 fa18 	bl	80088e4 <xTaskGetSchedulerState>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <xQueueGenericSend+0xa4>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <xQueueGenericSend+0xa8>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <xQueueGenericSend+0xaa>
 80074c4:	2300      	movs	r3, #0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	61fb      	str	r3, [r7, #28]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074e2:	f001 fd59 	bl	8008f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <xQueueGenericSend+0xdc>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d129      	bne.n	800754c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074fe:	f000 fa47 	bl	8007990 <prvCopyDataToQueue>
 8007502:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	d010      	beq.n	800752e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	3324      	adds	r3, #36	@ 0x24
 8007510:	4618      	mov	r0, r3
 8007512:	f001 f821 	bl	8008558 <xTaskRemoveFromEventList>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d013      	beq.n	8007544 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800751c:	4b3f      	ldr	r3, [pc, #252]	@ (800761c <xQueueGenericSend+0x200>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	e00a      	b.n	8007544 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007534:	4b39      	ldr	r3, [pc, #228]	@ (800761c <xQueueGenericSend+0x200>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007544:	f001 fd5a 	bl	8008ffc <vPortExitCritical>
				return pdPASS;
 8007548:	2301      	movs	r3, #1
 800754a:	e063      	b.n	8007614 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007552:	f001 fd53 	bl	8008ffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007556:	2300      	movs	r3, #0
 8007558:	e05c      	b.n	8007614 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800755a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007560:	f107 0314 	add.w	r3, r7, #20
 8007564:	4618      	mov	r0, r3
 8007566:	f001 f85b 	bl	8008620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800756a:	2301      	movs	r3, #1
 800756c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800756e:	f001 fd45 	bl	8008ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007572:	f000 fdf1 	bl	8008158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007576:	f001 fd0f 	bl	8008f98 <vPortEnterCritical>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007580:	b25b      	sxtb	r3, r3
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007586:	d103      	bne.n	8007590 <xQueueGenericSend+0x174>
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007596:	b25b      	sxtb	r3, r3
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800759c:	d103      	bne.n	80075a6 <xQueueGenericSend+0x18a>
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075a6:	f001 fd29 	bl	8008ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075aa:	1d3a      	adds	r2, r7, #4
 80075ac:	f107 0314 	add.w	r3, r7, #20
 80075b0:	4611      	mov	r1, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 f84a 	bl	800864c <xTaskCheckForTimeOut>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d124      	bne.n	8007608 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075c0:	f000 fab8 	bl	8007b34 <prvIsQueueFull>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	3310      	adds	r3, #16
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 ff9a 	bl	800850c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075da:	f000 fa43 	bl	8007a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075de:	f000 fdc9 	bl	8008174 <xTaskResumeAll>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f47f af7c 	bne.w	80074e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075ea:	4b0c      	ldr	r3, [pc, #48]	@ (800761c <xQueueGenericSend+0x200>)
 80075ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	e772      	b.n	80074e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075fe:	f000 fa31 	bl	8007a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007602:	f000 fdb7 	bl	8008174 <xTaskResumeAll>
 8007606:	e76c      	b.n	80074e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800760a:	f000 fa2b 	bl	8007a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800760e:	f000 fdb1 	bl	8008174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007612:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007614:	4618      	mov	r0, r3
 8007616:	3738      	adds	r7, #56	@ 0x38
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08e      	sub	sp, #56	@ 0x38
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10b      	bne.n	800764c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	623b      	str	r3, [r7, #32]
}
 8007646:	bf00      	nop
 8007648:	bf00      	nop
 800764a:	e7fd      	b.n	8007648 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	61fb      	str	r3, [r7, #28]
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	e7fd      	b.n	8007668 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <xQueueGiveFromISR+0x5c>
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <xQueueGiveFromISR+0x60>
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <xQueueGiveFromISR+0x62>
 8007680:	2300      	movs	r3, #0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	61bb      	str	r3, [r7, #24]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800769e:	f001 fd5b 	bl	8009158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076a2:	f3ef 8211 	mrs	r2, BASEPRI
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	617a      	str	r2, [r7, #20]
 80076b8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d22b      	bcs.n	8007726 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076e8:	d112      	bne.n	8007710 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d016      	beq.n	8007720 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	3324      	adds	r3, #36	@ 0x24
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 ff2e 	bl	8008558 <xTaskRemoveFromEventList>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e007      	b.n	8007720 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007714:	3301      	adds	r3, #1
 8007716:	b2db      	uxtb	r3, r3
 8007718:	b25a      	sxtb	r2, r3
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007720:	2301      	movs	r3, #1
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
 8007724:	e001      	b.n	800772a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007726:	2300      	movs	r3, #0
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007734:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007738:	4618      	mov	r0, r3
 800773a:	3738      	adds	r7, #56	@ 0x38
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08e      	sub	sp, #56	@ 0x38
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800774a:	2300      	movs	r3, #0
 800774c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10b      	bne.n	8007774 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	623b      	str	r3, [r7, #32]
}
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	e7fd      	b.n	8007770 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	61fb      	str	r3, [r7, #28]
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	e7fd      	b.n	8007790 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007794:	f001 f8a6 	bl	80088e4 <xTaskGetSchedulerState>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <xQueueSemaphoreTake+0x64>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <xQueueSemaphoreTake+0x68>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <xQueueSemaphoreTake+0x6a>
 80077a8:	2300      	movs	r3, #0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61bb      	str	r3, [r7, #24]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077c6:	f001 fbe7 	bl	8008f98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d024      	beq.n	8007820 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	1e5a      	subs	r2, r3, #1
 80077da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d104      	bne.n	80077f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077e6:	f001 fa29 	bl	8008c3c <pvTaskIncrementMutexHeldCount>
 80077ea:	4602      	mov	r2, r0
 80077ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00f      	beq.n	8007818 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fa:	3310      	adds	r3, #16
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 feab 	bl	8008558 <xTaskRemoveFromEventList>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007808:	4b54      	ldr	r3, [pc, #336]	@ (800795c <xQueueSemaphoreTake+0x21c>)
 800780a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007818:	f001 fbf0 	bl	8008ffc <vPortExitCritical>
				return pdPASS;
 800781c:	2301      	movs	r3, #1
 800781e:	e098      	b.n	8007952 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d112      	bne.n	800784c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	617b      	str	r3, [r7, #20]
}
 800783e:	bf00      	nop
 8007840:	bf00      	nop
 8007842:	e7fd      	b.n	8007840 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007844:	f001 fbda 	bl	8008ffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007848:	2300      	movs	r3, #0
 800784a:	e082      	b.n	8007952 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800784c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fee2 	bl	8008620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007860:	f001 fbcc 	bl	8008ffc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007864:	f000 fc78 	bl	8008158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007868:	f001 fb96 	bl	8008f98 <vPortEnterCritical>
 800786c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007872:	b25b      	sxtb	r3, r3
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007878:	d103      	bne.n	8007882 <xQueueSemaphoreTake+0x142>
 800787a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007888:	b25b      	sxtb	r3, r3
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800788e:	d103      	bne.n	8007898 <xQueueSemaphoreTake+0x158>
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007898:	f001 fbb0 	bl	8008ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800789c:	463a      	mov	r2, r7
 800789e:	f107 030c 	add.w	r3, r7, #12
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fed1 	bl	800864c <xTaskCheckForTimeOut>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d132      	bne.n	8007916 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078b2:	f000 f929 	bl	8007b08 <prvIsQueueEmpty>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d026      	beq.n	800790a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80078c4:	f001 fb68 	bl	8008f98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 f827 	bl	8008920 <xTaskPriorityInherit>
 80078d2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80078d4:	f001 fb92 	bl	8008ffc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078da:	3324      	adds	r3, #36	@ 0x24
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fe13 	bl	800850c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078e8:	f000 f8bc 	bl	8007a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078ec:	f000 fc42 	bl	8008174 <xTaskResumeAll>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f af67 	bne.w	80077c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80078f8:	4b18      	ldr	r3, [pc, #96]	@ (800795c <xQueueSemaphoreTake+0x21c>)
 80078fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	e75d      	b.n	80077c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800790a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800790c:	f000 f8aa 	bl	8007a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007910:	f000 fc30 	bl	8008174 <xTaskResumeAll>
 8007914:	e757      	b.n	80077c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007916:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007918:	f000 f8a4 	bl	8007a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791c:	f000 fc2a 	bl	8008174 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007922:	f000 f8f1 	bl	8007b08 <prvIsQueueEmpty>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	f43f af4c 	beq.w	80077c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00d      	beq.n	8007950 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007934:	f001 fb30 	bl	8008f98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800793a:	f000 f811 	bl	8007960 <prvGetDisinheritPriorityAfterTimeout>
 800793e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f001 f8e8 	bl	8008b1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800794c:	f001 fb56 	bl	8008ffc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007952:	4618      	mov	r0, r3
 8007954:	3738      	adds	r7, #56	@ 0x38
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f1c3 0307 	rsb	r3, r3, #7
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	e001      	b.n	8007982 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007982:	68fb      	ldr	r3, [r7, #12]
	}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10d      	bne.n	80079ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d14d      	bne.n	8007a52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f001 f826 	bl	8008a0c <xTaskPriorityDisinherit>
 80079c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	e043      	b.n	8007a52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d119      	bne.n	8007a04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6858      	ldr	r0, [r3, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d8:	461a      	mov	r2, r3
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	f002 f806 	bl	80099ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d32b      	bcc.n	8007a52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	e026      	b.n	8007a52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68d8      	ldr	r0, [r3, #12]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	f001 ffec 	bl	80099ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1c:	425b      	negs	r3, r3
 8007a1e:	441a      	add	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d207      	bcs.n	8007a40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a38:	425b      	negs	r3, r3
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d105      	bne.n	8007a52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007a5a:	697b      	ldr	r3, [r7, #20]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a6c:	f001 fa94 	bl	8008f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a78:	e011      	b.n	8007a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d012      	beq.n	8007aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3324      	adds	r3, #36	@ 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fd66 	bl	8008558 <xTaskRemoveFromEventList>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a92:	f000 fe3f 	bl	8008714 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dce9      	bgt.n	8007a7a <prvUnlockQueue+0x16>
 8007aa6:	e000      	b.n	8007aaa <prvUnlockQueue+0x46>
					break;
 8007aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	22ff      	movs	r2, #255	@ 0xff
 8007aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ab2:	f001 faa3 	bl	8008ffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ab6:	f001 fa6f 	bl	8008f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ac2:	e011      	b.n	8007ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d012      	beq.n	8007af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3310      	adds	r3, #16
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fd41 	bl	8008558 <xTaskRemoveFromEventList>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007adc:	f000 fe1a 	bl	8008714 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dce9      	bgt.n	8007ac4 <prvUnlockQueue+0x60>
 8007af0:	e000      	b.n	8007af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	22ff      	movs	r2, #255	@ 0xff
 8007af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007afc:	f001 fa7e 	bl	8008ffc <vPortExitCritical>
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b10:	f001 fa42 	bl	8008f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e001      	b.n	8007b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b26:	f001 fa69 	bl	8008ffc <vPortExitCritical>

	return xReturn;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b3c:	f001 fa2c 	bl	8008f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d102      	bne.n	8007b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	e001      	b.n	8007b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b56:	f001 fa51 	bl	8008ffc <vPortExitCritical>

	return xReturn;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08e      	sub	sp, #56	@ 0x38
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	623b      	str	r3, [r7, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	61fb      	str	r3, [r7, #28]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007bae:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8007bb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 8007bba:	d00b      	beq.n	8007bd4 <xTaskCreateStatic+0x70>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	61bb      	str	r3, [r7, #24]
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01e      	beq.n	8007c1a <xTaskCreateStatic+0xb6>
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01b      	beq.n	8007c1a <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 2175 	strb.w	r2, [r3, #373]	@ 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f851 	bl	8007cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c14:	f000 f916 	bl	8007e44 <prvAddNewTaskToReadyList>
 8007c18:	e001      	b.n	8007c1e <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c1e:	697b      	ldr	r3, [r7, #20]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3728      	adds	r7, #40	@ 0x28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08c      	sub	sp, #48	@ 0x30
 8007c2c:	af04      	add	r7, sp, #16
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 facd 	bl	80091dc <pvPortMalloc>
 8007c42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00f      	beq.n	8007c6a <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c4a:	f44f 70bc 	mov.w	r0, #376	@ 0x178
 8007c4e:	f001 fac5 	bl	80091dc <pvPortMalloc>
 8007c52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c60:	e005      	b.n	8007c6e <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c62:	6978      	ldr	r0, [r7, #20]
 8007c64:	f001 fb88 	bl	8009378 <vPortFree>
 8007c68:	e001      	b.n	8007c6e <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d017      	beq.n	8007ca4 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2175 	strb.w	r2, [r3, #373]	@ 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c7c:	88fa      	ldrh	r2, [r7, #6]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9303      	str	r3, [sp, #12]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f80e 	bl	8007cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c98:	69f8      	ldr	r0, [r7, #28]
 8007c9a:	f000 f8d3 	bl	8007e44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61bb      	str	r3, [r7, #24]
 8007ca2:	e002      	b.n	8007caa <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007caa:	69bb      	ldr	r3, [r7, #24]
	}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	617b      	str	r3, [r7, #20]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01f      	beq.n	8007d44 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d04:	2300      	movs	r3, #0
 8007d06:	61fb      	str	r3, [r7, #28]
 8007d08:	e012      	b.n	8007d30 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	4413      	add	r3, r2
 8007d10:	7819      	ldrb	r1, [r3, #0]
 8007d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	4413      	add	r3, r2
 8007d18:	3334      	adds	r3, #52	@ 0x34
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	4413      	add	r3, r2
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d006      	beq.n	8007d38 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b0f      	cmp	r3, #15
 8007d34:	d9e9      	bls.n	8007d0a <prvInitialiseNewTask+0x56>
 8007d36:	e000      	b.n	8007d3a <prvInitialiseNewTask+0x86>
			{
				break;
 8007d38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d42:	e003      	b.n	8007d4c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4e:	2b06      	cmp	r3, #6
 8007d50:	d901      	bls.n	8007d56 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d52:	2306      	movs	r3, #6
 8007d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d60:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	2200      	movs	r2, #0
 8007d66:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff f9fc 	bl	800716a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	3318      	adds	r3, #24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff f9f7 	bl	800716a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d84:	f1c3 0207 	rsb	r2, r3, #7
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	3350      	adds	r3, #80	@ 0x50
 8007da6:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f001 fd75 	bl	800989c <memset>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	4a20      	ldr	r2, [pc, #128]	@ (8007e38 <prvInitialiseNewTask+0x184>)
 8007db6:	655a      	str	r2, [r3, #84]	@ 0x54
 8007db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dba:	4a20      	ldr	r2, [pc, #128]	@ (8007e3c <prvInitialiseNewTask+0x188>)
 8007dbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e40 <prvInitialiseNewTask+0x18c>)
 8007dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007dc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dc6:	f04f 0201 	mov.w	r2, #1
 8007dca:	f04f 0300 	mov.w	r3, #0
 8007dce:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	f243 320e 	movw	r2, #13070	@ 0x330e
 8007dd8:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8007de2:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
 8007de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de8:	f241 2234 	movw	r2, #4660	@ 0x1234
 8007dec:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 8007df6:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 8007e00:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	2205      	movs	r2, #5
 8007e08:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	220b      	movs	r2, #11
 8007e10:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	68f9      	ldr	r1, [r7, #12]
 8007e18:	69b8      	ldr	r0, [r7, #24]
 8007e1a:	f000 ff89 	bl	8008d30 <pxPortInitialiseStack>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <prvInitialiseNewTask+0x17c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e30:	bf00      	nop
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20004a90 	.word	0x20004a90
 8007e3c:	20004af8 	.word	0x20004af8
 8007e40:	20004b60 	.word	0x20004b60

08007e44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e4c:	f001 f8a4 	bl	8008f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e50:	4b2a      	ldr	r3, [pc, #168]	@ (8007efc <prvAddNewTaskToReadyList+0xb8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	4a29      	ldr	r2, [pc, #164]	@ (8007efc <prvAddNewTaskToReadyList+0xb8>)
 8007e58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e5a:	4b29      	ldr	r3, [pc, #164]	@ (8007f00 <prvAddNewTaskToReadyList+0xbc>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e62:	4a27      	ldr	r2, [pc, #156]	@ (8007f00 <prvAddNewTaskToReadyList+0xbc>)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e68:	4b24      	ldr	r3, [pc, #144]	@ (8007efc <prvAddNewTaskToReadyList+0xb8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d110      	bne.n	8007e92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e70:	f000 fc74 	bl	800875c <prvInitialiseTaskLists>
 8007e74:	e00d      	b.n	8007e92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e76:	4b23      	ldr	r3, [pc, #140]	@ (8007f04 <prvAddNewTaskToReadyList+0xc0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d109      	bne.n	8007e92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e7e:	4b20      	ldr	r3, [pc, #128]	@ (8007f00 <prvAddNewTaskToReadyList+0xbc>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d802      	bhi.n	8007e92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007f00 <prvAddNewTaskToReadyList+0xbc>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e92:	4b1d      	ldr	r3, [pc, #116]	@ (8007f08 <prvAddNewTaskToReadyList+0xc4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3301      	adds	r3, #1
 8007e98:	4a1b      	ldr	r2, [pc, #108]	@ (8007f08 <prvAddNewTaskToReadyList+0xc4>)
 8007e9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	409a      	lsls	r2, r3
 8007ea4:	4b19      	ldr	r3, [pc, #100]	@ (8007f0c <prvAddNewTaskToReadyList+0xc8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	4a18      	ldr	r2, [pc, #96]	@ (8007f0c <prvAddNewTaskToReadyList+0xc8>)
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4a15      	ldr	r2, [pc, #84]	@ (8007f10 <prvAddNewTaskToReadyList+0xcc>)
 8007ebc:	441a      	add	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	f7ff f95d 	bl	8007184 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007eca:	f001 f897 	bl	8008ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ece:	4b0d      	ldr	r3, [pc, #52]	@ (8007f04 <prvAddNewTaskToReadyList+0xc0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00e      	beq.n	8007ef4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f00 <prvAddNewTaskToReadyList+0xbc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d207      	bcs.n	8007ef4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <prvAddNewTaskToReadyList+0xd0>)
 8007ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20000e3c 	.word	0x20000e3c
 8007f00:	20000d3c 	.word	0x20000d3c
 8007f04:	20000e48 	.word	0x20000e48
 8007f08:	20000e58 	.word	0x20000e58
 8007f0c:	20000e44 	.word	0x20000e44
 8007f10:	20000d40 	.word	0x20000d40
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08a      	sub	sp, #40	@ 0x28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007f22:	2300      	movs	r3, #0
 8007f24:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10b      	bne.n	8007f44 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	617b      	str	r3, [r7, #20]
}
 8007f3e:	bf00      	nop
 8007f40:	bf00      	nop
 8007f42:	e7fd      	b.n	8007f40 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10b      	bne.n	8007f62 <vTaskDelayUntil+0x4a>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	613b      	str	r3, [r7, #16]
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007f62:	4b2a      	ldr	r3, [pc, #168]	@ (800800c <vTaskDelayUntil+0xf4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <vTaskDelayUntil+0x6a>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	60fb      	str	r3, [r7, #12]
}
 8007f7c:	bf00      	nop
 8007f7e:	bf00      	nop
 8007f80:	e7fd      	b.n	8007f7e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007f82:	f000 f8e9 	bl	8008158 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f86:	4b22      	ldr	r3, [pc, #136]	@ (8008010 <vTaskDelayUntil+0xf8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	4413      	add	r3, r2
 8007f94:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6a3a      	ldr	r2, [r7, #32]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d20b      	bcs.n	8007fb8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d211      	bcs.n	8007fce <vTaskDelayUntil+0xb6>
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d90d      	bls.n	8007fce <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb6:	e00a      	b.n	8007fce <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d303      	bcc.n	8007fca <vTaskDelayUntil+0xb2>
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d901      	bls.n	8007fce <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d006      	beq.n	8007fe8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fe3e 	bl	8008c64 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007fe8:	f000 f8c4 	bl	8008174 <xTaskResumeAll>
 8007fec:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d107      	bne.n	8008004 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007ff4:	4b07      	ldr	r3, [pc, #28]	@ (8008014 <vTaskDelayUntil+0xfc>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008004:	bf00      	nop
 8008006:	3728      	adds	r7, #40	@ 0x28
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20000e64 	.word	0x20000e64
 8008010:	20000e40 	.word	0x20000e40
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800802a:	4b14      	ldr	r3, [pc, #80]	@ (800807c <vTaskDelay+0x64>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <vTaskDelay+0x32>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	60bb      	str	r3, [r7, #8]
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop
 8008048:	e7fd      	b.n	8008046 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800804a:	f000 f885 	bl	8008158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800804e:	2100      	movs	r1, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fe07 	bl	8008c64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008056:	f000 f88d 	bl	8008174 <xTaskResumeAll>
 800805a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d107      	bne.n	8008072 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008062:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <vTaskDelay+0x68>)
 8008064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000e64 	.word	0x20000e64
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	@ 0x28
 8008088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008092:	463a      	mov	r2, r7
 8008094:	1d39      	adds	r1, r7, #4
 8008096:	f107 0308 	add.w	r3, r7, #8
 800809a:	4618      	mov	r0, r3
 800809c:	f7f9 fe36 	bl	8001d0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	9202      	str	r2, [sp, #8]
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	2300      	movs	r3, #0
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	2300      	movs	r3, #0
 80080b0:	460a      	mov	r2, r1
 80080b2:	4921      	ldr	r1, [pc, #132]	@ (8008138 <vTaskStartScheduler+0xb4>)
 80080b4:	4821      	ldr	r0, [pc, #132]	@ (800813c <vTaskStartScheduler+0xb8>)
 80080b6:	f7ff fd55 	bl	8007b64 <xTaskCreateStatic>
 80080ba:	4603      	mov	r3, r0
 80080bc:	4a20      	ldr	r2, [pc, #128]	@ (8008140 <vTaskStartScheduler+0xbc>)
 80080be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008140 <vTaskStartScheduler+0xbc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080c8:	2301      	movs	r3, #1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	e001      	b.n	80080d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d11b      	bne.n	8008110 <vTaskStartScheduler+0x8c>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	613b      	str	r3, [r7, #16]
}
 80080ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080ec:	4b15      	ldr	r3, [pc, #84]	@ (8008144 <vTaskStartScheduler+0xc0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3350      	adds	r3, #80	@ 0x50
 80080f2:	4a15      	ldr	r2, [pc, #84]	@ (8008148 <vTaskStartScheduler+0xc4>)
 80080f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080f6:	4b15      	ldr	r3, [pc, #84]	@ (800814c <vTaskStartScheduler+0xc8>)
 80080f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080fe:	4b14      	ldr	r3, [pc, #80]	@ (8008150 <vTaskStartScheduler+0xcc>)
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008104:	4b13      	ldr	r3, [pc, #76]	@ (8008154 <vTaskStartScheduler+0xd0>)
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800810a:	f000 fea1 	bl	8008e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800810e:	e00f      	b.n	8008130 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008116:	d10b      	bne.n	8008130 <vTaskStartScheduler+0xac>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	60fb      	str	r3, [r7, #12]
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	e7fd      	b.n	800812c <vTaskStartScheduler+0xa8>
}
 8008130:	bf00      	nop
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	0800e524 	.word	0x0800e524
 800813c:	0800872d 	.word	0x0800872d
 8008140:	20000e60 	.word	0x20000e60
 8008144:	20000d3c 	.word	0x20000d3c
 8008148:	20000018 	.word	0x20000018
 800814c:	20000e5c 	.word	0x20000e5c
 8008150:	20000e48 	.word	0x20000e48
 8008154:	20000e40 	.word	0x20000e40

08008158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800815c:	4b04      	ldr	r3, [pc, #16]	@ (8008170 <vTaskSuspendAll+0x18>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3301      	adds	r3, #1
 8008162:	4a03      	ldr	r2, [pc, #12]	@ (8008170 <vTaskSuspendAll+0x18>)
 8008164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008166:	bf00      	nop
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20000e64 	.word	0x20000e64

08008174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008182:	4b42      	ldr	r3, [pc, #264]	@ (800828c <xTaskResumeAll+0x118>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10b      	bne.n	80081a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	603b      	str	r3, [r7, #0]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081a2:	f000 fef9 	bl	8008f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081a6:	4b39      	ldr	r3, [pc, #228]	@ (800828c <xTaskResumeAll+0x118>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a37      	ldr	r2, [pc, #220]	@ (800828c <xTaskResumeAll+0x118>)
 80081ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b0:	4b36      	ldr	r3, [pc, #216]	@ (800828c <xTaskResumeAll+0x118>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d161      	bne.n	800827c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081b8:	4b35      	ldr	r3, [pc, #212]	@ (8008290 <xTaskResumeAll+0x11c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d05d      	beq.n	800827c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081c0:	e02e      	b.n	8008220 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c2:	4b34      	ldr	r3, [pc, #208]	@ (8008294 <xTaskResumeAll+0x120>)
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3318      	adds	r3, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff f835 	bl	800723e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff f830 	bl	800723e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e2:	2201      	movs	r2, #1
 80081e4:	409a      	lsls	r2, r3
 80081e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008298 <xTaskResumeAll+0x124>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008298 <xTaskResumeAll+0x124>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a27      	ldr	r2, [pc, #156]	@ (800829c <xTaskResumeAll+0x128>)
 80081fe:	441a      	add	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe ffbc 	bl	8007184 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008210:	4b23      	ldr	r3, [pc, #140]	@ (80082a0 <xTaskResumeAll+0x12c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800821a:	4b22      	ldr	r3, [pc, #136]	@ (80082a4 <xTaskResumeAll+0x130>)
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008220:	4b1c      	ldr	r3, [pc, #112]	@ (8008294 <xTaskResumeAll+0x120>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1cc      	bne.n	80081c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800822e:	f000 fb39 	bl	80088a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008232:	4b1d      	ldr	r3, [pc, #116]	@ (80082a8 <xTaskResumeAll+0x134>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d010      	beq.n	8008260 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800823e:	f000 f847 	bl	80082d0 <xTaskIncrementTick>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008248:	4b16      	ldr	r3, [pc, #88]	@ (80082a4 <xTaskResumeAll+0x130>)
 800824a:	2201      	movs	r2, #1
 800824c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3b01      	subs	r3, #1
 8008252:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f1      	bne.n	800823e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800825a:	4b13      	ldr	r3, [pc, #76]	@ (80082a8 <xTaskResumeAll+0x134>)
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008260:	4b10      	ldr	r3, [pc, #64]	@ (80082a4 <xTaskResumeAll+0x130>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d009      	beq.n	800827c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008268:	2301      	movs	r3, #1
 800826a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800826c:	4b0f      	ldr	r3, [pc, #60]	@ (80082ac <xTaskResumeAll+0x138>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800827c:	f000 febe 	bl	8008ffc <vPortExitCritical>

	return xAlreadyYielded;
 8008280:	68bb      	ldr	r3, [r7, #8]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000e64 	.word	0x20000e64
 8008290:	20000e3c 	.word	0x20000e3c
 8008294:	20000dfc 	.word	0x20000dfc
 8008298:	20000e44 	.word	0x20000e44
 800829c:	20000d40 	.word	0x20000d40
 80082a0:	20000d3c 	.word	0x20000d3c
 80082a4:	20000e50 	.word	0x20000e50
 80082a8:	20000e4c 	.word	0x20000e4c
 80082ac:	e000ed04 	.word	0xe000ed04

080082b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082b6:	4b05      	ldr	r3, [pc, #20]	@ (80082cc <xTaskGetTickCount+0x1c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082bc:	687b      	ldr	r3, [r7, #4]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	20000e40 	.word	0x20000e40

080082d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082da:	4b4f      	ldr	r3, [pc, #316]	@ (8008418 <xTaskIncrementTick+0x148>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f040 808f 	bne.w	8008402 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082e4:	4b4d      	ldr	r3, [pc, #308]	@ (800841c <xTaskIncrementTick+0x14c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3301      	adds	r3, #1
 80082ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082ec:	4a4b      	ldr	r2, [pc, #300]	@ (800841c <xTaskIncrementTick+0x14c>)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d121      	bne.n	800833c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80082f8:	4b49      	ldr	r3, [pc, #292]	@ (8008420 <xTaskIncrementTick+0x150>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	603b      	str	r3, [r7, #0]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <xTaskIncrementTick+0x46>
 800831a:	4b41      	ldr	r3, [pc, #260]	@ (8008420 <xTaskIncrementTick+0x150>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	4b40      	ldr	r3, [pc, #256]	@ (8008424 <xTaskIncrementTick+0x154>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a3e      	ldr	r2, [pc, #248]	@ (8008420 <xTaskIncrementTick+0x150>)
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	4a3e      	ldr	r2, [pc, #248]	@ (8008424 <xTaskIncrementTick+0x154>)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	4b3e      	ldr	r3, [pc, #248]	@ (8008428 <xTaskIncrementTick+0x158>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3301      	adds	r3, #1
 8008334:	4a3c      	ldr	r2, [pc, #240]	@ (8008428 <xTaskIncrementTick+0x158>)
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	f000 fab4 	bl	80088a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800833c:	4b3b      	ldr	r3, [pc, #236]	@ (800842c <xTaskIncrementTick+0x15c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	429a      	cmp	r2, r3
 8008344:	d348      	bcc.n	80083d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008346:	4b36      	ldr	r3, [pc, #216]	@ (8008420 <xTaskIncrementTick+0x150>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008350:	4b36      	ldr	r3, [pc, #216]	@ (800842c <xTaskIncrementTick+0x15c>)
 8008352:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008356:	601a      	str	r2, [r3, #0]
					break;
 8008358:	e03e      	b.n	80083d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835a:	4b31      	ldr	r3, [pc, #196]	@ (8008420 <xTaskIncrementTick+0x150>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	429a      	cmp	r2, r3
 8008370:	d203      	bcs.n	800837a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008372:	4a2e      	ldr	r2, [pc, #184]	@ (800842c <xTaskIncrementTick+0x15c>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008378:	e02e      	b.n	80083d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3304      	adds	r3, #4
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe ff5d 	bl	800723e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3318      	adds	r3, #24
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe ff54 	bl	800723e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	2201      	movs	r2, #1
 800839c:	409a      	lsls	r2, r3
 800839e:	4b24      	ldr	r3, [pc, #144]	@ (8008430 <xTaskIncrementTick+0x160>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	4a22      	ldr	r2, [pc, #136]	@ (8008430 <xTaskIncrementTick+0x160>)
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008434 <xTaskIncrementTick+0x164>)
 80083b6:	441a      	add	r2, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f7fe fee0 	bl	8007184 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008438 <xTaskIncrementTick+0x168>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d3b9      	bcc.n	8008346 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083d2:	2301      	movs	r3, #1
 80083d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d6:	e7b6      	b.n	8008346 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083d8:	4b17      	ldr	r3, [pc, #92]	@ (8008438 <xTaskIncrementTick+0x168>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083de:	4915      	ldr	r1, [pc, #84]	@ (8008434 <xTaskIncrementTick+0x164>)
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d901      	bls.n	80083f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80083f0:	2301      	movs	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083f4:	4b11      	ldr	r3, [pc, #68]	@ (800843c <xTaskIncrementTick+0x16c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80083fc:	2301      	movs	r3, #1
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e004      	b.n	800840c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008402:	4b0f      	ldr	r3, [pc, #60]	@ (8008440 <xTaskIncrementTick+0x170>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3301      	adds	r3, #1
 8008408:	4a0d      	ldr	r2, [pc, #52]	@ (8008440 <xTaskIncrementTick+0x170>)
 800840a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800840c:	697b      	ldr	r3, [r7, #20]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000e64 	.word	0x20000e64
 800841c:	20000e40 	.word	0x20000e40
 8008420:	20000df4 	.word	0x20000df4
 8008424:	20000df8 	.word	0x20000df8
 8008428:	20000e54 	.word	0x20000e54
 800842c:	20000e5c 	.word	0x20000e5c
 8008430:	20000e44 	.word	0x20000e44
 8008434:	20000d40 	.word	0x20000d40
 8008438:	20000d3c 	.word	0x20000d3c
 800843c:	20000e50 	.word	0x20000e50
 8008440:	20000e4c 	.word	0x20000e4c

08008444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800844a:	4b2a      	ldr	r3, [pc, #168]	@ (80084f4 <vTaskSwitchContext+0xb0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008452:	4b29      	ldr	r3, [pc, #164]	@ (80084f8 <vTaskSwitchContext+0xb4>)
 8008454:	2201      	movs	r2, #1
 8008456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008458:	e045      	b.n	80084e6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800845a:	4b27      	ldr	r3, [pc, #156]	@ (80084f8 <vTaskSwitchContext+0xb4>)
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008460:	4b26      	ldr	r3, [pc, #152]	@ (80084fc <vTaskSwitchContext+0xb8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	fab3 f383 	clz	r3, r3
 800846c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800846e:	7afb      	ldrb	r3, [r7, #11]
 8008470:	f1c3 031f 	rsb	r3, r3, #31
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	4922      	ldr	r1, [pc, #136]	@ (8008500 <vTaskSwitchContext+0xbc>)
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10b      	bne.n	80084a2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	607b      	str	r3, [r7, #4]
}
 800849c:	bf00      	nop
 800849e:	bf00      	nop
 80084a0:	e7fd      	b.n	800849e <vTaskSwitchContext+0x5a>
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4a14      	ldr	r2, [pc, #80]	@ (8008500 <vTaskSwitchContext+0xbc>)
 80084ae:	4413      	add	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	605a      	str	r2, [r3, #4]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3308      	adds	r3, #8
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d104      	bne.n	80084d2 <vTaskSwitchContext+0x8e>
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008504 <vTaskSwitchContext+0xc0>)
 80084da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084dc:	4b09      	ldr	r3, [pc, #36]	@ (8008504 <vTaskSwitchContext+0xc0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3350      	adds	r3, #80	@ 0x50
 80084e2:	4a09      	ldr	r2, [pc, #36]	@ (8008508 <vTaskSwitchContext+0xc4>)
 80084e4:	6013      	str	r3, [r2, #0]
}
 80084e6:	bf00      	nop
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000e64 	.word	0x20000e64
 80084f8:	20000e50 	.word	0x20000e50
 80084fc:	20000e44 	.word	0x20000e44
 8008500:	20000d40 	.word	0x20000d40
 8008504:	20000d3c 	.word	0x20000d3c
 8008508:	20000018 	.word	0x20000018

0800850c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60fb      	str	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008534:	4b07      	ldr	r3, [pc, #28]	@ (8008554 <vTaskPlaceOnEventList+0x48>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3318      	adds	r3, #24
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fe fe45 	bl	80071cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008542:	2101      	movs	r1, #1
 8008544:	6838      	ldr	r0, [r7, #0]
 8008546:	f000 fb8d 	bl	8008c64 <prvAddCurrentTaskToDelayedList>
}
 800854a:	bf00      	nop
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000d3c 	.word	0x20000d3c

08008558 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10b      	bne.n	8008586 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	60fb      	str	r3, [r7, #12]
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	e7fd      	b.n	8008582 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3318      	adds	r3, #24
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fe57 	bl	800723e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008590:	4b1d      	ldr	r3, [pc, #116]	@ (8008608 <xTaskRemoveFromEventList+0xb0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d11c      	bne.n	80085d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3304      	adds	r3, #4
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe fe4e 	bl	800723e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a6:	2201      	movs	r2, #1
 80085a8:	409a      	lsls	r2, r3
 80085aa:	4b18      	ldr	r3, [pc, #96]	@ (800860c <xTaskRemoveFromEventList+0xb4>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	4a16      	ldr	r2, [pc, #88]	@ (800860c <xTaskRemoveFromEventList+0xb4>)
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4a13      	ldr	r2, [pc, #76]	@ (8008610 <xTaskRemoveFromEventList+0xb8>)
 80085c2:	441a      	add	r2, r3
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7fe fdda 	bl	8007184 <vListInsertEnd>
 80085d0:	e005      	b.n	80085de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	3318      	adds	r3, #24
 80085d6:	4619      	mov	r1, r3
 80085d8:	480e      	ldr	r0, [pc, #56]	@ (8008614 <xTaskRemoveFromEventList+0xbc>)
 80085da:	f7fe fdd3 	bl	8007184 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008618 <xTaskRemoveFromEventList+0xc0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d905      	bls.n	80085f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085ec:	2301      	movs	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085f0:	4b0a      	ldr	r3, [pc, #40]	@ (800861c <xTaskRemoveFromEventList+0xc4>)
 80085f2:	2201      	movs	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	e001      	b.n	80085fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085fc:	697b      	ldr	r3, [r7, #20]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000e64 	.word	0x20000e64
 800860c:	20000e44 	.word	0x20000e44
 8008610:	20000d40 	.word	0x20000d40
 8008614:	20000dfc 	.word	0x20000dfc
 8008618:	20000d3c 	.word	0x20000d3c
 800861c:	20000e50 	.word	0x20000e50

08008620 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008628:	4b06      	ldr	r3, [pc, #24]	@ (8008644 <vTaskInternalSetTimeOutState+0x24>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008630:	4b05      	ldr	r3, [pc, #20]	@ (8008648 <vTaskInternalSetTimeOutState+0x28>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	20000e54 	.word	0x20000e54
 8008648:	20000e40 	.word	0x20000e40

0800864c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10b      	bne.n	8008674 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	613b      	str	r3, [r7, #16]
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	60fb      	str	r3, [r7, #12]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008692:	f000 fc81 	bl	8008f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008696:	4b1d      	ldr	r3, [pc, #116]	@ (800870c <xTaskCheckForTimeOut+0xc0>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086ae:	d102      	bne.n	80086b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
 80086b4:	e023      	b.n	80086fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <xTaskCheckForTimeOut+0xc4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d007      	beq.n	80086d2 <xTaskCheckForTimeOut+0x86>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d302      	bcc.n	80086d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e015      	b.n	80086fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d20b      	bcs.n	80086f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	1ad2      	subs	r2, r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff ff99 	bl	8008620 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	e004      	b.n	80086fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086fa:	2301      	movs	r3, #1
 80086fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086fe:	f000 fc7d 	bl	8008ffc <vPortExitCritical>

	return xReturn;
 8008702:	69fb      	ldr	r3, [r7, #28]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000e40 	.word	0x20000e40
 8008710:	20000e54 	.word	0x20000e54

08008714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008718:	4b03      	ldr	r3, [pc, #12]	@ (8008728 <vTaskMissedYield+0x14>)
 800871a:	2201      	movs	r2, #1
 800871c:	601a      	str	r2, [r3, #0]
}
 800871e:	bf00      	nop
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	20000e50 	.word	0x20000e50

0800872c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008734:	f000 f852 	bl	80087dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008738:	4b06      	ldr	r3, [pc, #24]	@ (8008754 <prvIdleTask+0x28>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d9f9      	bls.n	8008734 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008740:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <prvIdleTask+0x2c>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008750:	e7f0      	b.n	8008734 <prvIdleTask+0x8>
 8008752:	bf00      	nop
 8008754:	20000d40 	.word	0x20000d40
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008762:	2300      	movs	r3, #0
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	e00c      	b.n	8008782 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4a12      	ldr	r2, [pc, #72]	@ (80087bc <prvInitialiseTaskLists+0x60>)
 8008774:	4413      	add	r3, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fcd7 	bl	800712a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3301      	adds	r3, #1
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b06      	cmp	r3, #6
 8008786:	d9ef      	bls.n	8008768 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008788:	480d      	ldr	r0, [pc, #52]	@ (80087c0 <prvInitialiseTaskLists+0x64>)
 800878a:	f7fe fcce 	bl	800712a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800878e:	480d      	ldr	r0, [pc, #52]	@ (80087c4 <prvInitialiseTaskLists+0x68>)
 8008790:	f7fe fccb 	bl	800712a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008794:	480c      	ldr	r0, [pc, #48]	@ (80087c8 <prvInitialiseTaskLists+0x6c>)
 8008796:	f7fe fcc8 	bl	800712a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800879a:	480c      	ldr	r0, [pc, #48]	@ (80087cc <prvInitialiseTaskLists+0x70>)
 800879c:	f7fe fcc5 	bl	800712a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087a0:	480b      	ldr	r0, [pc, #44]	@ (80087d0 <prvInitialiseTaskLists+0x74>)
 80087a2:	f7fe fcc2 	bl	800712a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087a6:	4b0b      	ldr	r3, [pc, #44]	@ (80087d4 <prvInitialiseTaskLists+0x78>)
 80087a8:	4a05      	ldr	r2, [pc, #20]	@ (80087c0 <prvInitialiseTaskLists+0x64>)
 80087aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087ac:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <prvInitialiseTaskLists+0x7c>)
 80087ae:	4a05      	ldr	r2, [pc, #20]	@ (80087c4 <prvInitialiseTaskLists+0x68>)
 80087b0:	601a      	str	r2, [r3, #0]
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000d40 	.word	0x20000d40
 80087c0:	20000dcc 	.word	0x20000dcc
 80087c4:	20000de0 	.word	0x20000de0
 80087c8:	20000dfc 	.word	0x20000dfc
 80087cc:	20000e10 	.word	0x20000e10
 80087d0:	20000e28 	.word	0x20000e28
 80087d4:	20000df4 	.word	0x20000df4
 80087d8:	20000df8 	.word	0x20000df8

080087dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087e2:	e019      	b.n	8008818 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087e4:	f000 fbd8 	bl	8008f98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e8:	4b10      	ldr	r3, [pc, #64]	@ (800882c <prvCheckTasksWaitingTermination+0x50>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fd22 	bl	800723e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008830 <prvCheckTasksWaitingTermination+0x54>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3b01      	subs	r3, #1
 8008800:	4a0b      	ldr	r2, [pc, #44]	@ (8008830 <prvCheckTasksWaitingTermination+0x54>)
 8008802:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008804:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <prvCheckTasksWaitingTermination+0x58>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3b01      	subs	r3, #1
 800880a:	4a0a      	ldr	r2, [pc, #40]	@ (8008834 <prvCheckTasksWaitingTermination+0x58>)
 800880c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800880e:	f000 fbf5 	bl	8008ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f810 	bl	8008838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008818:	4b06      	ldr	r3, [pc, #24]	@ (8008834 <prvCheckTasksWaitingTermination+0x58>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e1      	bne.n	80087e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000e10 	.word	0x20000e10
 8008830:	20000e3c 	.word	0x20000e3c
 8008834:	20000e24 	.word	0x20000e24

08008838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3350      	adds	r3, #80	@ 0x50
 8008844:	4618      	mov	r0, r3
 8008846:	f001 f841 	bl	80098cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3175 	ldrb.w	r3, [r3, #373]	@ 0x175
 8008850:	2b00      	cmp	r3, #0
 8008852:	d108      	bne.n	8008866 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fd8d 	bl	8009378 <vPortFree>
				vPortFree( pxTCB );
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fd8a 	bl	8009378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008864:	e019      	b.n	800889a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 3175 	ldrb.w	r3, [r3, #373]	@ 0x175
 800886c:	2b01      	cmp	r3, #1
 800886e:	d103      	bne.n	8008878 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fd81 	bl	8009378 <vPortFree>
	}
 8008876:	e010      	b.n	800889a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3175 	ldrb.w	r3, [r3, #373]	@ 0x175
 800887e:	2b02      	cmp	r3, #2
 8008880:	d00b      	beq.n	800889a <prvDeleteTCB+0x62>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	60fb      	str	r3, [r7, #12]
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	e7fd      	b.n	8008896 <prvDeleteTCB+0x5e>
	}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088aa:	4b0c      	ldr	r3, [pc, #48]	@ (80088dc <prvResetNextTaskUnblockTime+0x38>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d104      	bne.n	80088be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088b4:	4b0a      	ldr	r3, [pc, #40]	@ (80088e0 <prvResetNextTaskUnblockTime+0x3c>)
 80088b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088bc:	e008      	b.n	80088d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088be:	4b07      	ldr	r3, [pc, #28]	@ (80088dc <prvResetNextTaskUnblockTime+0x38>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	4a04      	ldr	r2, [pc, #16]	@ (80088e0 <prvResetNextTaskUnblockTime+0x3c>)
 80088ce:	6013      	str	r3, [r2, #0]
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	20000df4 	.word	0x20000df4
 80088e0:	20000e5c 	.word	0x20000e5c

080088e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008918 <xTaskGetSchedulerState+0x34>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088f2:	2301      	movs	r3, #1
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	e008      	b.n	800890a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f8:	4b08      	ldr	r3, [pc, #32]	@ (800891c <xTaskGetSchedulerState+0x38>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008900:	2302      	movs	r3, #2
 8008902:	607b      	str	r3, [r7, #4]
 8008904:	e001      	b.n	800890a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008906:	2300      	movs	r3, #0
 8008908:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800890a:	687b      	ldr	r3, [r7, #4]
	}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000e48 	.word	0x20000e48
 800891c:	20000e64 	.word	0x20000e64

08008920 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800892c:	2300      	movs	r3, #0
 800892e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d05e      	beq.n	80089f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893a:	4b31      	ldr	r3, [pc, #196]	@ (8008a00 <xTaskPriorityInherit+0xe0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	429a      	cmp	r2, r3
 8008942:	d24e      	bcs.n	80089e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	2b00      	cmp	r3, #0
 800894a:	db06      	blt.n	800895a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800894c:	4b2c      	ldr	r3, [pc, #176]	@ (8008a00 <xTaskPriorityInherit+0xe0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008952:	f1c3 0207 	rsb	r2, r3, #7
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6959      	ldr	r1, [r3, #20]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4a26      	ldr	r2, [pc, #152]	@ (8008a04 <xTaskPriorityInherit+0xe4>)
 800896c:	4413      	add	r3, r2
 800896e:	4299      	cmp	r1, r3
 8008970:	d12f      	bne.n	80089d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	3304      	adds	r3, #4
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fc61 	bl	800723e <uxListRemove>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	2201      	movs	r2, #1
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	43da      	mvns	r2, r3
 800898e:	4b1e      	ldr	r3, [pc, #120]	@ (8008a08 <xTaskPriorityInherit+0xe8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4013      	ands	r3, r2
 8008994:	4a1c      	ldr	r2, [pc, #112]	@ (8008a08 <xTaskPriorityInherit+0xe8>)
 8008996:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008998:	4b19      	ldr	r3, [pc, #100]	@ (8008a00 <xTaskPriorityInherit+0xe0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a6:	2201      	movs	r2, #1
 80089a8:	409a      	lsls	r2, r3
 80089aa:	4b17      	ldr	r3, [pc, #92]	@ (8008a08 <xTaskPriorityInherit+0xe8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	4a15      	ldr	r2, [pc, #84]	@ (8008a08 <xTaskPriorityInherit+0xe8>)
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b8:	4613      	mov	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4a10      	ldr	r2, [pc, #64]	@ (8008a04 <xTaskPriorityInherit+0xe4>)
 80089c2:	441a      	add	r2, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3304      	adds	r3, #4
 80089c8:	4619      	mov	r1, r3
 80089ca:	4610      	mov	r0, r2
 80089cc:	f7fe fbda 	bl	8007184 <vListInsertEnd>
 80089d0:	e004      	b.n	80089dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008a00 <xTaskPriorityInherit+0xe0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80089dc:	2301      	movs	r3, #1
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e008      	b.n	80089f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089e6:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <xTaskPriorityInherit+0xe0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d201      	bcs.n	80089f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089f4:	68fb      	ldr	r3, [r7, #12]
	}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000d3c 	.word	0x20000d3c
 8008a04:	20000d40 	.word	0x20000d40
 8008a08:	20000e44 	.word	0x20000e44

08008a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d070      	beq.n	8008b04 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a22:	4b3b      	ldr	r3, [pc, #236]	@ (8008b10 <xTaskPriorityDisinherit+0x104>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d00b      	beq.n	8008a44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	60fb      	str	r3, [r7, #12]
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10b      	bne.n	8008a64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	60bb      	str	r3, [r7, #8]
}
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
 8008a62:	e7fd      	b.n	8008a60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a68:	1e5a      	subs	r2, r3, #1
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d044      	beq.n	8008b04 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d140      	bne.n	8008b04 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fbd9 	bl	800723e <uxListRemove>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d115      	bne.n	8008abe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a96:	491f      	ldr	r1, [pc, #124]	@ (8008b14 <xTaskPriorityDisinherit+0x108>)
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <xTaskPriorityDisinherit+0xb2>
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	2201      	movs	r2, #1
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	43da      	mvns	r2, r3
 8008ab4:	4b18      	ldr	r3, [pc, #96]	@ (8008b18 <xTaskPriorityDisinherit+0x10c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	4a17      	ldr	r2, [pc, #92]	@ (8008b18 <xTaskPriorityDisinherit+0x10c>)
 8008abc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aca:	f1c3 0207 	rsb	r2, r3, #7
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	409a      	lsls	r2, r3
 8008ada:	4b0f      	ldr	r3, [pc, #60]	@ (8008b18 <xTaskPriorityDisinherit+0x10c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8008b18 <xTaskPriorityDisinherit+0x10c>)
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4a08      	ldr	r2, [pc, #32]	@ (8008b14 <xTaskPriorityDisinherit+0x108>)
 8008af2:	441a      	add	r2, r3
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f7fe fb42 	bl	8007184 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b04:	697b      	ldr	r3, [r7, #20]
	}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000d3c 	.word	0x20000d3c
 8008b14:	20000d40 	.word	0x20000d40
 8008b18:	20000e44 	.word	0x20000e44

08008b1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d079      	beq.n	8008c28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10b      	bne.n	8008b54 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60fb      	str	r3, [r7, #12]
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	e7fd      	b.n	8008b50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d902      	bls.n	8008b64 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	e002      	b.n	8008b6a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b68:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d059      	beq.n	8008c28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d154      	bne.n	8008c28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b7e:	4b2c      	ldr	r3, [pc, #176]	@ (8008c30 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d10b      	bne.n	8008ba0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	60bb      	str	r3, [r7, #8]
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	db04      	blt.n	8008bbe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	f1c3 0207 	rsb	r2, r3, #7
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	6959      	ldr	r1, [r3, #20]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4a19      	ldr	r2, [pc, #100]	@ (8008c34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008bce:	4413      	add	r3, r2
 8008bd0:	4299      	cmp	r1, r3
 8008bd2:	d129      	bne.n	8008c28 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fe fb30 	bl	800723e <uxListRemove>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be8:	2201      	movs	r2, #1
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	43da      	mvns	r2, r3
 8008bf0:	4b11      	ldr	r3, [pc, #68]	@ (8008c38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	4a10      	ldr	r2, [pc, #64]	@ (8008c38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008bf8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	2201      	movs	r2, #1
 8008c00:	409a      	lsls	r2, r3
 8008c02:	4b0d      	ldr	r3, [pc, #52]	@ (8008c38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	4a0b      	ldr	r2, [pc, #44]	@ (8008c38 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4a06      	ldr	r2, [pc, #24]	@ (8008c34 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c1a:	441a      	add	r2, r3
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7fe faae 	bl	8007184 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c28:	bf00      	nop
 8008c2a:	3720      	adds	r7, #32
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000d3c 	.word	0x20000d3c
 8008c34:	20000d40 	.word	0x20000d40
 8008c38:	20000e44 	.word	0x20000e44

08008c3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c40:	4b07      	ldr	r3, [pc, #28]	@ (8008c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d004      	beq.n	8008c52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c4e:	3201      	adds	r2, #1
 8008c50:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008c52:	4b03      	ldr	r3, [pc, #12]	@ (8008c60 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c54:	681b      	ldr	r3, [r3, #0]
	}
 8008c56:	4618      	mov	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	20000d3c 	.word	0x20000d3c

08008c64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c6e:	4b29      	ldr	r3, [pc, #164]	@ (8008d14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c74:	4b28      	ldr	r3, [pc, #160]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fadf 	bl	800723e <uxListRemove>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10b      	bne.n	8008c9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c86:	4b24      	ldr	r3, [pc, #144]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	43da      	mvns	r2, r3
 8008c94:	4b21      	ldr	r3, [pc, #132]	@ (8008d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4013      	ands	r3, r2
 8008c9a:	4a20      	ldr	r2, [pc, #128]	@ (8008d1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ca4:	d10a      	bne.n	8008cbc <prvAddCurrentTaskToDelayedList+0x58>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cac:	4b1a      	ldr	r3, [pc, #104]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	481a      	ldr	r0, [pc, #104]	@ (8008d20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cb6:	f7fe fa65 	bl	8007184 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cba:	e026      	b.n	8008d0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cc4:	4b14      	ldr	r3, [pc, #80]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d209      	bcs.n	8008ce8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cd4:	4b13      	ldr	r3, [pc, #76]	@ (8008d24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f7fe fa73 	bl	80071cc <vListInsert>
}
 8008ce6:	e010      	b.n	8008d0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	4b0a      	ldr	r3, [pc, #40]	@ (8008d18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	f7fe fa69 	bl	80071cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d202      	bcs.n	8008d0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d04:	4a09      	ldr	r2, [pc, #36]	@ (8008d2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6013      	str	r3, [r2, #0]
}
 8008d0a:	bf00      	nop
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000e40 	.word	0x20000e40
 8008d18:	20000d3c 	.word	0x20000d3c
 8008d1c:	20000e44 	.word	0x20000e44
 8008d20:	20000e28 	.word	0x20000e28
 8008d24:	20000df8 	.word	0x20000df8
 8008d28:	20000df4 	.word	0x20000df4
 8008d2c:	20000e5c 	.word	0x20000e5c

08008d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3b04      	subs	r3, #4
 8008d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3b04      	subs	r3, #4
 8008d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f023 0201 	bic.w	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3b04      	subs	r3, #4
 8008d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d60:	4a0c      	ldr	r2, [pc, #48]	@ (8008d94 <pxPortInitialiseStack+0x64>)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3b14      	subs	r3, #20
 8008d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3b04      	subs	r3, #4
 8008d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f06f 0202 	mvn.w	r2, #2
 8008d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3b20      	subs	r3, #32
 8008d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d86:	68fb      	ldr	r3, [r7, #12]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	08008d99 	.word	0x08008d99

08008d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008da2:	4b13      	ldr	r3, [pc, #76]	@ (8008df0 <prvTaskExitError+0x58>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008daa:	d00b      	beq.n	8008dc4 <prvTaskExitError+0x2c>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	60fb      	str	r3, [r7, #12]
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <prvTaskExitError+0x28>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	60bb      	str	r3, [r7, #8]
}
 8008dd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dd8:	bf00      	nop
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0fc      	beq.n	8008dda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000008 	.word	0x20000008
	...

08008e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e00:	4b07      	ldr	r3, [pc, #28]	@ (8008e20 <pxCurrentTCBConst2>)
 8008e02:	6819      	ldr	r1, [r3, #0]
 8008e04:	6808      	ldr	r0, [r1, #0]
 8008e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	f380 8809 	msr	PSP, r0
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f380 8811 	msr	BASEPRI, r0
 8008e1a:	4770      	bx	lr
 8008e1c:	f3af 8000 	nop.w

08008e20 <pxCurrentTCBConst2>:
 8008e20:	20000d3c 	.word	0x20000d3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop

08008e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e28:	4808      	ldr	r0, [pc, #32]	@ (8008e4c <prvPortStartFirstTask+0x24>)
 8008e2a:	6800      	ldr	r0, [r0, #0]
 8008e2c:	6800      	ldr	r0, [r0, #0]
 8008e2e:	f380 8808 	msr	MSP, r0
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8814 	msr	CONTROL, r0
 8008e3a:	b662      	cpsie	i
 8008e3c:	b661      	cpsie	f
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	df00      	svc	0
 8008e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e4a:	bf00      	nop
 8008e4c:	e000ed08 	.word	0xe000ed08

08008e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e56:	4b47      	ldr	r3, [pc, #284]	@ (8008f74 <xPortStartScheduler+0x124>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a47      	ldr	r2, [pc, #284]	@ (8008f78 <xPortStartScheduler+0x128>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d10b      	bne.n	8008e78 <xPortStartScheduler+0x28>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	613b      	str	r3, [r7, #16]
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	e7fd      	b.n	8008e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e78:	4b3e      	ldr	r3, [pc, #248]	@ (8008f74 <xPortStartScheduler+0x124>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f7c <xPortStartScheduler+0x12c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d10b      	bne.n	8008e9a <xPortStartScheduler+0x4a>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60fb      	str	r3, [r7, #12]
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop
 8008e98:	e7fd      	b.n	8008e96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e9a:	4b39      	ldr	r3, [pc, #228]	@ (8008f80 <xPortStartScheduler+0x130>)
 8008e9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	22ff      	movs	r2, #255	@ 0xff
 8008eaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	4b31      	ldr	r3, [pc, #196]	@ (8008f84 <xPortStartScheduler+0x134>)
 8008ec0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ec2:	4b31      	ldr	r3, [pc, #196]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008ec4:	2207      	movs	r2, #7
 8008ec6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ec8:	e009      	b.n	8008ede <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008eca:	4b2f      	ldr	r3, [pc, #188]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008ed2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee6:	2b80      	cmp	r3, #128	@ 0x80
 8008ee8:	d0ef      	beq.n	8008eca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008eea:	4b27      	ldr	r3, [pc, #156]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1c3 0307 	rsb	r3, r3, #7
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d00b      	beq.n	8008f0e <xPortStartScheduler+0xbe>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	60bb      	str	r3, [r7, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	e7fd      	b.n	8008f0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	4a1c      	ldr	r2, [pc, #112]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f18:	4b1b      	ldr	r3, [pc, #108]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f20:	4a19      	ldr	r2, [pc, #100]	@ (8008f88 <xPortStartScheduler+0x138>)
 8008f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f2c:	4b17      	ldr	r3, [pc, #92]	@ (8008f8c <xPortStartScheduler+0x13c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a16      	ldr	r2, [pc, #88]	@ (8008f8c <xPortStartScheduler+0x13c>)
 8008f32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f38:	4b14      	ldr	r3, [pc, #80]	@ (8008f8c <xPortStartScheduler+0x13c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a13      	ldr	r2, [pc, #76]	@ (8008f8c <xPortStartScheduler+0x13c>)
 8008f3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f44:	f000 f8da 	bl	80090fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f48:	4b11      	ldr	r3, [pc, #68]	@ (8008f90 <xPortStartScheduler+0x140>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f4e:	f000 f8f9 	bl	8009144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f52:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <xPortStartScheduler+0x144>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a0f      	ldr	r2, [pc, #60]	@ (8008f94 <xPortStartScheduler+0x144>)
 8008f58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008f5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f5e:	f7ff ff63 	bl	8008e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f62:	f7ff fa6f 	bl	8008444 <vTaskSwitchContext>
	prvTaskExitError();
 8008f66:	f7ff ff17 	bl	8008d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	e000ed00 	.word	0xe000ed00
 8008f78:	410fc271 	.word	0x410fc271
 8008f7c:	410fc270 	.word	0x410fc270
 8008f80:	e000e400 	.word	0xe000e400
 8008f84:	20000e68 	.word	0x20000e68
 8008f88:	20000e6c 	.word	0x20000e6c
 8008f8c:	e000ed20 	.word	0xe000ed20
 8008f90:	20000008 	.word	0x20000008
 8008f94:	e000ef34 	.word	0xe000ef34

08008f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	607b      	str	r3, [r7, #4]
}
 8008fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ff4 <vPortEnterCritical+0x5c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff4 <vPortEnterCritical+0x5c>)
 8008fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff4 <vPortEnterCritical+0x5c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d110      	bne.n	8008fe6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff8 <vPortEnterCritical+0x60>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00b      	beq.n	8008fe6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	603b      	str	r3, [r7, #0]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <vPortEnterCritical+0x4a>
	}
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000008 	.word	0x20000008
 8008ff8:	e000ed04 	.word	0xe000ed04

08008ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009002:	4b12      	ldr	r3, [pc, #72]	@ (800904c <vPortExitCritical+0x50>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10b      	bne.n	8009022 <vPortExitCritical+0x26>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	607b      	str	r3, [r7, #4]
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	e7fd      	b.n	800901e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009022:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <vPortExitCritical+0x50>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3b01      	subs	r3, #1
 8009028:	4a08      	ldr	r2, [pc, #32]	@ (800904c <vPortExitCritical+0x50>)
 800902a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800902c:	4b07      	ldr	r3, [pc, #28]	@ (800904c <vPortExitCritical+0x50>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d105      	bne.n	8009040 <vPortExitCritical+0x44>
 8009034:	2300      	movs	r3, #0
 8009036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	f383 8811 	msr	BASEPRI, r3
}
 800903e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	20000008 	.word	0x20000008

08009050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009050:	f3ef 8009 	mrs	r0, PSP
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	4b15      	ldr	r3, [pc, #84]	@ (80090b0 <pxCurrentTCBConst>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	f01e 0f10 	tst.w	lr, #16
 8009060:	bf08      	it	eq
 8009062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906a:	6010      	str	r0, [r2, #0]
 800906c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009074:	f380 8811 	msr	BASEPRI, r0
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f7ff f9e0 	bl	8008444 <vTaskSwitchContext>
 8009084:	f04f 0000 	mov.w	r0, #0
 8009088:	f380 8811 	msr	BASEPRI, r0
 800908c:	bc09      	pop	{r0, r3}
 800908e:	6819      	ldr	r1, [r3, #0]
 8009090:	6808      	ldr	r0, [r1, #0]
 8009092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009096:	f01e 0f10 	tst.w	lr, #16
 800909a:	bf08      	it	eq
 800909c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090a0:	f380 8809 	msr	PSP, r0
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	f3af 8000 	nop.w

080090b0 <pxCurrentTCBConst>:
 80090b0:	20000d3c 	.word	0x20000d3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop

080090b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	607b      	str	r3, [r7, #4]
}
 80090d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090d2:	f7ff f8fd 	bl	80082d0 <xTaskIncrementTick>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090dc:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <SysTick_Handler+0x40>)
 80090de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	2300      	movs	r3, #0
 80090e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f383 8811 	msr	BASEPRI, r3
}
 80090ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009100:	4b0b      	ldr	r3, [pc, #44]	@ (8009130 <vPortSetupTimerInterrupt+0x34>)
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009106:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <vPortSetupTimerInterrupt+0x38>)
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800910c:	4b0a      	ldr	r3, [pc, #40]	@ (8009138 <vPortSetupTimerInterrupt+0x3c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a0a      	ldr	r2, [pc, #40]	@ (800913c <vPortSetupTimerInterrupt+0x40>)
 8009112:	fba2 2303 	umull	r2, r3, r2, r3
 8009116:	099b      	lsrs	r3, r3, #6
 8009118:	4a09      	ldr	r2, [pc, #36]	@ (8009140 <vPortSetupTimerInterrupt+0x44>)
 800911a:	3b01      	subs	r3, #1
 800911c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800911e:	4b04      	ldr	r3, [pc, #16]	@ (8009130 <vPortSetupTimerInterrupt+0x34>)
 8009120:	2207      	movs	r2, #7
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	e000e010 	.word	0xe000e010
 8009134:	e000e018 	.word	0xe000e018
 8009138:	20000000 	.word	0x20000000
 800913c:	10624dd3 	.word	0x10624dd3
 8009140:	e000e014 	.word	0xe000e014

08009144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009154 <vPortEnableVFP+0x10>
 8009148:	6801      	ldr	r1, [r0, #0]
 800914a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800914e:	6001      	str	r1, [r0, #0]
 8009150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009152:	bf00      	nop
 8009154:	e000ed88 	.word	0xe000ed88

08009158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800915e:	f3ef 8305 	mrs	r3, IPSR
 8009162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2b0f      	cmp	r3, #15
 8009168:	d915      	bls.n	8009196 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800916a:	4a18      	ldr	r2, [pc, #96]	@ (80091cc <vPortValidateInterruptPriority+0x74>)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009174:	4b16      	ldr	r3, [pc, #88]	@ (80091d0 <vPortValidateInterruptPriority+0x78>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	7afa      	ldrb	r2, [r7, #11]
 800917a:	429a      	cmp	r2, r3
 800917c:	d20b      	bcs.n	8009196 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	607b      	str	r3, [r7, #4]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009196:	4b0f      	ldr	r3, [pc, #60]	@ (80091d4 <vPortValidateInterruptPriority+0x7c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800919e:	4b0e      	ldr	r3, [pc, #56]	@ (80091d8 <vPortValidateInterruptPriority+0x80>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d90b      	bls.n	80091be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	603b      	str	r3, [r7, #0]
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	e7fd      	b.n	80091ba <vPortValidateInterruptPriority+0x62>
	}
 80091be:	bf00      	nop
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	e000e3f0 	.word	0xe000e3f0
 80091d0:	20000e68 	.word	0x20000e68
 80091d4:	e000ed0c 	.word	0xe000ed0c
 80091d8:	20000e6c 	.word	0x20000e6c

080091dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	@ 0x28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091e8:	f7fe ffb6 	bl	8008158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009360 <pvPortMalloc+0x184>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091f4:	f000 f924 	bl	8009440 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009364 <pvPortMalloc+0x188>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4013      	ands	r3, r2
 8009200:	2b00      	cmp	r3, #0
 8009202:	f040 8095 	bne.w	8009330 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01e      	beq.n	800924a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800920c:	2208      	movs	r2, #8
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4413      	add	r3, r2
 8009212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	2b00      	cmp	r3, #0
 800921c:	d015      	beq.n	800924a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f023 0307 	bic.w	r3, r3, #7
 8009224:	3308      	adds	r3, #8
 8009226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <pvPortMalloc+0x6e>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	617b      	str	r3, [r7, #20]
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop
 8009248:	e7fd      	b.n	8009246 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d06f      	beq.n	8009330 <pvPortMalloc+0x154>
 8009250:	4b45      	ldr	r3, [pc, #276]	@ (8009368 <pvPortMalloc+0x18c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	429a      	cmp	r2, r3
 8009258:	d86a      	bhi.n	8009330 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800925a:	4b44      	ldr	r3, [pc, #272]	@ (800936c <pvPortMalloc+0x190>)
 800925c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800925e:	4b43      	ldr	r3, [pc, #268]	@ (800936c <pvPortMalloc+0x190>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009264:	e004      	b.n	8009270 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d903      	bls.n	8009282 <pvPortMalloc+0xa6>
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f1      	bne.n	8009266 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009282:	4b37      	ldr	r3, [pc, #220]	@ (8009360 <pvPortMalloc+0x184>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009288:	429a      	cmp	r2, r3
 800928a:	d051      	beq.n	8009330 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2208      	movs	r2, #8
 8009292:	4413      	add	r3, r2
 8009294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800929e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	1ad2      	subs	r2, r2, r3
 80092a6:	2308      	movs	r3, #8
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d920      	bls.n	80092f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4413      	add	r3, r2
 80092b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <pvPortMalloc+0xfc>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	613b      	str	r3, [r7, #16]
}
 80092d2:	bf00      	nop
 80092d4:	bf00      	nop
 80092d6:	e7fd      	b.n	80092d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092ea:	69b8      	ldr	r0, [r7, #24]
 80092ec:	f000 f90a 	bl	8009504 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009368 <pvPortMalloc+0x18c>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009368 <pvPortMalloc+0x18c>)
 80092fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009368 <pvPortMalloc+0x18c>)
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	4b1b      	ldr	r3, [pc, #108]	@ (8009370 <pvPortMalloc+0x194>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d203      	bcs.n	8009312 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800930a:	4b17      	ldr	r3, [pc, #92]	@ (8009368 <pvPortMalloc+0x18c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a18      	ldr	r2, [pc, #96]	@ (8009370 <pvPortMalloc+0x194>)
 8009310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	4b13      	ldr	r3, [pc, #76]	@ (8009364 <pvPortMalloc+0x188>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	431a      	orrs	r2, r3
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009326:	4b13      	ldr	r3, [pc, #76]	@ (8009374 <pvPortMalloc+0x198>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3301      	adds	r3, #1
 800932c:	4a11      	ldr	r2, [pc, #68]	@ (8009374 <pvPortMalloc+0x198>)
 800932e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009330:	f7fe ff20 	bl	8008174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <pvPortMalloc+0x17a>
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	60fb      	str	r3, [r7, #12]
}
 8009350:	bf00      	nop
 8009352:	bf00      	nop
 8009354:	e7fd      	b.n	8009352 <pvPortMalloc+0x176>
	return pvReturn;
 8009356:	69fb      	ldr	r3, [r7, #28]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3728      	adds	r7, #40	@ 0x28
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20004a78 	.word	0x20004a78
 8009364:	20004a8c 	.word	0x20004a8c
 8009368:	20004a7c 	.word	0x20004a7c
 800936c:	20004a70 	.word	0x20004a70
 8009370:	20004a80 	.word	0x20004a80
 8009374:	20004a84 	.word	0x20004a84

08009378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d04f      	beq.n	800942a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800938a:	2308      	movs	r3, #8
 800938c:	425b      	negs	r3, r3
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	4413      	add	r3, r2
 8009392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	4b25      	ldr	r3, [pc, #148]	@ (8009434 <vPortFree+0xbc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4013      	ands	r3, r2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10b      	bne.n	80093be <vPortFree+0x46>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60fb      	str	r3, [r7, #12]
}
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
 80093bc:	e7fd      	b.n	80093ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00b      	beq.n	80093de <vPortFree+0x66>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	60bb      	str	r3, [r7, #8]
}
 80093d8:	bf00      	nop
 80093da:	bf00      	nop
 80093dc:	e7fd      	b.n	80093da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	4b14      	ldr	r3, [pc, #80]	@ (8009434 <vPortFree+0xbc>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4013      	ands	r3, r2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d01e      	beq.n	800942a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d11a      	bne.n	800942a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009434 <vPortFree+0xbc>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	43db      	mvns	r3, r3
 80093fe:	401a      	ands	r2, r3
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009404:	f7fe fea8 	bl	8008158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	4b0a      	ldr	r3, [pc, #40]	@ (8009438 <vPortFree+0xc0>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4413      	add	r3, r2
 8009412:	4a09      	ldr	r2, [pc, #36]	@ (8009438 <vPortFree+0xc0>)
 8009414:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009416:	6938      	ldr	r0, [r7, #16]
 8009418:	f000 f874 	bl	8009504 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <vPortFree+0xc4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3301      	adds	r3, #1
 8009422:	4a06      	ldr	r2, [pc, #24]	@ (800943c <vPortFree+0xc4>)
 8009424:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009426:	f7fe fea5 	bl	8008174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800942a:	bf00      	nop
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20004a8c 	.word	0x20004a8c
 8009438:	20004a7c 	.word	0x20004a7c
 800943c:	20004a88 	.word	0x20004a88

08009440 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009446:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800944a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800944c:	4b27      	ldr	r3, [pc, #156]	@ (80094ec <prvHeapInit+0xac>)
 800944e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00c      	beq.n	8009474 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3307      	adds	r3, #7
 800945e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 0307 	bic.w	r3, r3, #7
 8009466:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	4a1f      	ldr	r2, [pc, #124]	@ (80094ec <prvHeapInit+0xac>)
 8009470:	4413      	add	r3, r2
 8009472:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009478:	4a1d      	ldr	r2, [pc, #116]	@ (80094f0 <prvHeapInit+0xb0>)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800947e:	4b1c      	ldr	r3, [pc, #112]	@ (80094f0 <prvHeapInit+0xb0>)
 8009480:	2200      	movs	r2, #0
 8009482:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	4413      	add	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800948c:	2208      	movs	r2, #8
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1a9b      	subs	r3, r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0307 	bic.w	r3, r3, #7
 800949a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4a15      	ldr	r2, [pc, #84]	@ (80094f4 <prvHeapInit+0xb4>)
 80094a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094a2:	4b14      	ldr	r3, [pc, #80]	@ (80094f4 <prvHeapInit+0xb4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2200      	movs	r2, #0
 80094a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094aa:	4b12      	ldr	r3, [pc, #72]	@ (80094f4 <prvHeapInit+0xb4>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	1ad2      	subs	r2, r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094c0:	4b0c      	ldr	r3, [pc, #48]	@ (80094f4 <prvHeapInit+0xb4>)
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4a0a      	ldr	r2, [pc, #40]	@ (80094f8 <prvHeapInit+0xb8>)
 80094ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	4a09      	ldr	r2, [pc, #36]	@ (80094fc <prvHeapInit+0xbc>)
 80094d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094d8:	4b09      	ldr	r3, [pc, #36]	@ (8009500 <prvHeapInit+0xc0>)
 80094da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80094de:	601a      	str	r2, [r3, #0]
}
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20000e70 	.word	0x20000e70
 80094f0:	20004a70 	.word	0x20004a70
 80094f4:	20004a78 	.word	0x20004a78
 80094f8:	20004a80 	.word	0x20004a80
 80094fc:	20004a7c 	.word	0x20004a7c
 8009500:	20004a8c 	.word	0x20004a8c

08009504 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800950c:	4b28      	ldr	r3, [pc, #160]	@ (80095b0 <prvInsertBlockIntoFreeList+0xac>)
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e002      	b.n	8009518 <prvInsertBlockIntoFreeList+0x14>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	429a      	cmp	r2, r3
 8009520:	d8f7      	bhi.n	8009512 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	429a      	cmp	r2, r3
 8009532:	d108      	bne.n	8009546 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	441a      	add	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	441a      	add	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d118      	bne.n	800958c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	4b15      	ldr	r3, [pc, #84]	@ (80095b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d00d      	beq.n	8009582 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	441a      	add	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	e008      	b.n	8009594 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009582:	4b0c      	ldr	r3, [pc, #48]	@ (80095b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	e003      	b.n	8009594 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	d002      	beq.n	80095a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	20004a70 	.word	0x20004a70
 80095b4:	20004a78 	.word	0x20004a78

080095b8 <std>:
 80095b8:	2300      	movs	r3, #0
 80095ba:	b510      	push	{r4, lr}
 80095bc:	4604      	mov	r4, r0
 80095be:	e9c0 3300 	strd	r3, r3, [r0]
 80095c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095c6:	6083      	str	r3, [r0, #8]
 80095c8:	8181      	strh	r1, [r0, #12]
 80095ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80095cc:	81c2      	strh	r2, [r0, #14]
 80095ce:	6183      	str	r3, [r0, #24]
 80095d0:	4619      	mov	r1, r3
 80095d2:	2208      	movs	r2, #8
 80095d4:	305c      	adds	r0, #92	@ 0x5c
 80095d6:	f000 f961 	bl	800989c <memset>
 80095da:	4b0d      	ldr	r3, [pc, #52]	@ (8009610 <std+0x58>)
 80095dc:	6223      	str	r3, [r4, #32]
 80095de:	4b0d      	ldr	r3, [pc, #52]	@ (8009614 <std+0x5c>)
 80095e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80095e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009618 <std+0x60>)
 80095e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095e6:	4b0d      	ldr	r3, [pc, #52]	@ (800961c <std+0x64>)
 80095e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <std+0x68>)
 80095ec:	61e4      	str	r4, [r4, #28]
 80095ee:	429c      	cmp	r4, r3
 80095f0:	d006      	beq.n	8009600 <std+0x48>
 80095f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095f6:	4294      	cmp	r4, r2
 80095f8:	d002      	beq.n	8009600 <std+0x48>
 80095fa:	33d0      	adds	r3, #208	@ 0xd0
 80095fc:	429c      	cmp	r4, r3
 80095fe:	d105      	bne.n	800960c <std+0x54>
 8009600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009608:	f000 b9ec 	b.w	80099e4 <__retarget_lock_init_recursive>
 800960c:	bd10      	pop	{r4, pc}
 800960e:	bf00      	nop
 8009610:	080097a5 	.word	0x080097a5
 8009614:	080097c7 	.word	0x080097c7
 8009618:	080097ff 	.word	0x080097ff
 800961c:	08009823 	.word	0x08009823
 8009620:	20004a90 	.word	0x20004a90

08009624 <stdio_exit_handler>:
 8009624:	4a02      	ldr	r2, [pc, #8]	@ (8009630 <stdio_exit_handler+0xc>)
 8009626:	4903      	ldr	r1, [pc, #12]	@ (8009634 <stdio_exit_handler+0x10>)
 8009628:	4803      	ldr	r0, [pc, #12]	@ (8009638 <stdio_exit_handler+0x14>)
 800962a:	f000 b869 	b.w	8009700 <_fwalk_sglue>
 800962e:	bf00      	nop
 8009630:	2000000c 	.word	0x2000000c
 8009634:	0800b49d 	.word	0x0800b49d
 8009638:	20000020 	.word	0x20000020

0800963c <cleanup_stdio>:
 800963c:	6841      	ldr	r1, [r0, #4]
 800963e:	4b0c      	ldr	r3, [pc, #48]	@ (8009670 <cleanup_stdio+0x34>)
 8009640:	4299      	cmp	r1, r3
 8009642:	b510      	push	{r4, lr}
 8009644:	4604      	mov	r4, r0
 8009646:	d001      	beq.n	800964c <cleanup_stdio+0x10>
 8009648:	f001 ff28 	bl	800b49c <_fclose_r>
 800964c:	68a1      	ldr	r1, [r4, #8]
 800964e:	4b09      	ldr	r3, [pc, #36]	@ (8009674 <cleanup_stdio+0x38>)
 8009650:	4299      	cmp	r1, r3
 8009652:	d002      	beq.n	800965a <cleanup_stdio+0x1e>
 8009654:	4620      	mov	r0, r4
 8009656:	f001 ff21 	bl	800b49c <_fclose_r>
 800965a:	68e1      	ldr	r1, [r4, #12]
 800965c:	4b06      	ldr	r3, [pc, #24]	@ (8009678 <cleanup_stdio+0x3c>)
 800965e:	4299      	cmp	r1, r3
 8009660:	d004      	beq.n	800966c <cleanup_stdio+0x30>
 8009662:	4620      	mov	r0, r4
 8009664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009668:	f001 bf18 	b.w	800b49c <_fclose_r>
 800966c:	bd10      	pop	{r4, pc}
 800966e:	bf00      	nop
 8009670:	20004a90 	.word	0x20004a90
 8009674:	20004af8 	.word	0x20004af8
 8009678:	20004b60 	.word	0x20004b60

0800967c <global_stdio_init.part.0>:
 800967c:	b510      	push	{r4, lr}
 800967e:	4b0b      	ldr	r3, [pc, #44]	@ (80096ac <global_stdio_init.part.0+0x30>)
 8009680:	4c0b      	ldr	r4, [pc, #44]	@ (80096b0 <global_stdio_init.part.0+0x34>)
 8009682:	4a0c      	ldr	r2, [pc, #48]	@ (80096b4 <global_stdio_init.part.0+0x38>)
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	4620      	mov	r0, r4
 8009688:	2200      	movs	r2, #0
 800968a:	2104      	movs	r1, #4
 800968c:	f7ff ff94 	bl	80095b8 <std>
 8009690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009694:	2201      	movs	r2, #1
 8009696:	2109      	movs	r1, #9
 8009698:	f7ff ff8e 	bl	80095b8 <std>
 800969c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096a0:	2202      	movs	r2, #2
 80096a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a6:	2112      	movs	r1, #18
 80096a8:	f7ff bf86 	b.w	80095b8 <std>
 80096ac:	20004bc8 	.word	0x20004bc8
 80096b0:	20004a90 	.word	0x20004a90
 80096b4:	08009625 	.word	0x08009625

080096b8 <__sfp_lock_acquire>:
 80096b8:	4801      	ldr	r0, [pc, #4]	@ (80096c0 <__sfp_lock_acquire+0x8>)
 80096ba:	f000 b995 	b.w	80099e8 <__retarget_lock_acquire_recursive>
 80096be:	bf00      	nop
 80096c0:	20004bd2 	.word	0x20004bd2

080096c4 <__sfp_lock_release>:
 80096c4:	4801      	ldr	r0, [pc, #4]	@ (80096cc <__sfp_lock_release+0x8>)
 80096c6:	f000 b990 	b.w	80099ea <__retarget_lock_release_recursive>
 80096ca:	bf00      	nop
 80096cc:	20004bd2 	.word	0x20004bd2

080096d0 <__sinit>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	f7ff fff0 	bl	80096b8 <__sfp_lock_acquire>
 80096d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096da:	b11b      	cbz	r3, 80096e4 <__sinit+0x14>
 80096dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e0:	f7ff bff0 	b.w	80096c4 <__sfp_lock_release>
 80096e4:	4b04      	ldr	r3, [pc, #16]	@ (80096f8 <__sinit+0x28>)
 80096e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80096e8:	4b04      	ldr	r3, [pc, #16]	@ (80096fc <__sinit+0x2c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1f5      	bne.n	80096dc <__sinit+0xc>
 80096f0:	f7ff ffc4 	bl	800967c <global_stdio_init.part.0>
 80096f4:	e7f2      	b.n	80096dc <__sinit+0xc>
 80096f6:	bf00      	nop
 80096f8:	0800963d 	.word	0x0800963d
 80096fc:	20004bc8 	.word	0x20004bc8

08009700 <_fwalk_sglue>:
 8009700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009704:	4607      	mov	r7, r0
 8009706:	4688      	mov	r8, r1
 8009708:	4614      	mov	r4, r2
 800970a:	2600      	movs	r6, #0
 800970c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009710:	f1b9 0901 	subs.w	r9, r9, #1
 8009714:	d505      	bpl.n	8009722 <_fwalk_sglue+0x22>
 8009716:	6824      	ldr	r4, [r4, #0]
 8009718:	2c00      	cmp	r4, #0
 800971a:	d1f7      	bne.n	800970c <_fwalk_sglue+0xc>
 800971c:	4630      	mov	r0, r6
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d907      	bls.n	8009738 <_fwalk_sglue+0x38>
 8009728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800972c:	3301      	adds	r3, #1
 800972e:	d003      	beq.n	8009738 <_fwalk_sglue+0x38>
 8009730:	4629      	mov	r1, r5
 8009732:	4638      	mov	r0, r7
 8009734:	47c0      	blx	r8
 8009736:	4306      	orrs	r6, r0
 8009738:	3568      	adds	r5, #104	@ 0x68
 800973a:	e7e9      	b.n	8009710 <_fwalk_sglue+0x10>

0800973c <snprintf>:
 800973c:	b40c      	push	{r2, r3}
 800973e:	b530      	push	{r4, r5, lr}
 8009740:	4b17      	ldr	r3, [pc, #92]	@ (80097a0 <snprintf+0x64>)
 8009742:	1e0c      	subs	r4, r1, #0
 8009744:	681d      	ldr	r5, [r3, #0]
 8009746:	b09d      	sub	sp, #116	@ 0x74
 8009748:	da08      	bge.n	800975c <snprintf+0x20>
 800974a:	238b      	movs	r3, #139	@ 0x8b
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009752:	b01d      	add	sp, #116	@ 0x74
 8009754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009758:	b002      	add	sp, #8
 800975a:	4770      	bx	lr
 800975c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009760:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009764:	bf14      	ite	ne
 8009766:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800976a:	4623      	moveq	r3, r4
 800976c:	9304      	str	r3, [sp, #16]
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009774:	9002      	str	r0, [sp, #8]
 8009776:	9006      	str	r0, [sp, #24]
 8009778:	f8ad 3016 	strh.w	r3, [sp, #22]
 800977c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800977e:	ab21      	add	r3, sp, #132	@ 0x84
 8009780:	a902      	add	r1, sp, #8
 8009782:	4628      	mov	r0, r5
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	f000 fcab 	bl	800a0e0 <_svfprintf_r>
 800978a:	1c43      	adds	r3, r0, #1
 800978c:	bfbc      	itt	lt
 800978e:	238b      	movlt	r3, #139	@ 0x8b
 8009790:	602b      	strlt	r3, [r5, #0]
 8009792:	2c00      	cmp	r4, #0
 8009794:	d0dd      	beq.n	8009752 <snprintf+0x16>
 8009796:	9b02      	ldr	r3, [sp, #8]
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	e7d9      	b.n	8009752 <snprintf+0x16>
 800979e:	bf00      	nop
 80097a0:	20000018 	.word	0x20000018

080097a4 <__sread>:
 80097a4:	b510      	push	{r4, lr}
 80097a6:	460c      	mov	r4, r1
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	f000 f8cc 	bl	8009948 <_read_r>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	bfab      	itete	ge
 80097b4:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80097b6:	89a3      	ldrhlt	r3, [r4, #12]
 80097b8:	181b      	addge	r3, r3, r0
 80097ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097be:	bfac      	ite	ge
 80097c0:	6523      	strge	r3, [r4, #80]	@ 0x50
 80097c2:	81a3      	strhlt	r3, [r4, #12]
 80097c4:	bd10      	pop	{r4, pc}

080097c6 <__swrite>:
 80097c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	461f      	mov	r7, r3
 80097cc:	898b      	ldrh	r3, [r1, #12]
 80097ce:	05db      	lsls	r3, r3, #23
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	4616      	mov	r6, r2
 80097d6:	d505      	bpl.n	80097e4 <__swrite+0x1e>
 80097d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097dc:	2302      	movs	r3, #2
 80097de:	2200      	movs	r2, #0
 80097e0:	f000 f8a0 	bl	8009924 <_lseek_r>
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	4632      	mov	r2, r6
 80097f2:	463b      	mov	r3, r7
 80097f4:	4628      	mov	r0, r5
 80097f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097fa:	f000 b8b7 	b.w	800996c <_write_r>

080097fe <__sseek>:
 80097fe:	b510      	push	{r4, lr}
 8009800:	460c      	mov	r4, r1
 8009802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009806:	f000 f88d 	bl	8009924 <_lseek_r>
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	bf15      	itete	ne
 8009810:	6520      	strne	r0, [r4, #80]	@ 0x50
 8009812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800981a:	81a3      	strheq	r3, [r4, #12]
 800981c:	bf18      	it	ne
 800981e:	81a3      	strhne	r3, [r4, #12]
 8009820:	bd10      	pop	{r4, pc}

08009822 <__sclose>:
 8009822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009826:	f000 b841 	b.w	80098ac <_close_r>

0800982a <_vsnprintf_r>:
 800982a:	b530      	push	{r4, r5, lr}
 800982c:	4614      	mov	r4, r2
 800982e:	2c00      	cmp	r4, #0
 8009830:	b09b      	sub	sp, #108	@ 0x6c
 8009832:	4605      	mov	r5, r0
 8009834:	461a      	mov	r2, r3
 8009836:	da05      	bge.n	8009844 <_vsnprintf_r+0x1a>
 8009838:	238b      	movs	r3, #139	@ 0x8b
 800983a:	6003      	str	r3, [r0, #0]
 800983c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009840:	b01b      	add	sp, #108	@ 0x6c
 8009842:	bd30      	pop	{r4, r5, pc}
 8009844:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009848:	f8ad 300c 	strh.w	r3, [sp, #12]
 800984c:	bf14      	ite	ne
 800984e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009852:	4623      	moveq	r3, r4
 8009854:	9302      	str	r3, [sp, #8]
 8009856:	9305      	str	r3, [sp, #20]
 8009858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800985c:	9100      	str	r1, [sp, #0]
 800985e:	9104      	str	r1, [sp, #16]
 8009860:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009864:	4669      	mov	r1, sp
 8009866:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009868:	f000 fc3a 	bl	800a0e0 <_svfprintf_r>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	bfbc      	itt	lt
 8009870:	238b      	movlt	r3, #139	@ 0x8b
 8009872:	602b      	strlt	r3, [r5, #0]
 8009874:	2c00      	cmp	r4, #0
 8009876:	d0e3      	beq.n	8009840 <_vsnprintf_r+0x16>
 8009878:	9b00      	ldr	r3, [sp, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	e7df      	b.n	8009840 <_vsnprintf_r+0x16>

08009880 <vsnprintf>:
 8009880:	b507      	push	{r0, r1, r2, lr}
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	4613      	mov	r3, r2
 8009886:	460a      	mov	r2, r1
 8009888:	4601      	mov	r1, r0
 800988a:	4803      	ldr	r0, [pc, #12]	@ (8009898 <vsnprintf+0x18>)
 800988c:	6800      	ldr	r0, [r0, #0]
 800988e:	f7ff ffcc 	bl	800982a <_vsnprintf_r>
 8009892:	b003      	add	sp, #12
 8009894:	f85d fb04 	ldr.w	pc, [sp], #4
 8009898:	20000018 	.word	0x20000018

0800989c <memset>:
 800989c:	4402      	add	r2, r0
 800989e:	4603      	mov	r3, r0
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d100      	bne.n	80098a6 <memset+0xa>
 80098a4:	4770      	bx	lr
 80098a6:	f803 1b01 	strb.w	r1, [r3], #1
 80098aa:	e7f9      	b.n	80098a0 <memset+0x4>

080098ac <_close_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d06      	ldr	r5, [pc, #24]	@ (80098c8 <_close_r+0x1c>)
 80098b0:	2300      	movs	r3, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	f7f9 fb10 	bl	8002edc <_close>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_close_r+0x1a>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_close_r+0x1a>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20004bcc 	.word	0x20004bcc

080098cc <_reclaim_reent>:
 80098cc:	4b14      	ldr	r3, [pc, #80]	@ (8009920 <_reclaim_reent+0x54>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4283      	cmp	r3, r0
 80098d2:	b570      	push	{r4, r5, r6, lr}
 80098d4:	4604      	mov	r4, r0
 80098d6:	d022      	beq.n	800991e <_reclaim_reent+0x52>
 80098d8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80098da:	b153      	cbz	r3, 80098f2 <_reclaim_reent+0x26>
 80098dc:	2500      	movs	r5, #0
 80098de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80098e0:	5959      	ldr	r1, [r3, r5]
 80098e2:	b9b1      	cbnz	r1, 8009912 <_reclaim_reent+0x46>
 80098e4:	3504      	adds	r5, #4
 80098e6:	2d80      	cmp	r5, #128	@ 0x80
 80098e8:	d1f9      	bne.n	80098de <_reclaim_reent+0x12>
 80098ea:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f8f1 	bl	8009ad4 <_free_r>
 80098f2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80098f4:	b111      	cbz	r1, 80098fc <_reclaim_reent+0x30>
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f8ec 	bl	8009ad4 <_free_r>
 80098fc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80098fe:	b111      	cbz	r1, 8009906 <_reclaim_reent+0x3a>
 8009900:	4620      	mov	r0, r4
 8009902:	f000 f8e7 	bl	8009ad4 <_free_r>
 8009906:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009908:	b14b      	cbz	r3, 800991e <_reclaim_reent+0x52>
 800990a:	4620      	mov	r0, r4
 800990c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009910:	4718      	bx	r3
 8009912:	680e      	ldr	r6, [r1, #0]
 8009914:	4620      	mov	r0, r4
 8009916:	f000 f8dd 	bl	8009ad4 <_free_r>
 800991a:	4631      	mov	r1, r6
 800991c:	e7e1      	b.n	80098e2 <_reclaim_reent+0x16>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	20000018 	.word	0x20000018

08009924 <_lseek_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d07      	ldr	r5, [pc, #28]	@ (8009944 <_lseek_r+0x20>)
 8009928:	4604      	mov	r4, r0
 800992a:	4608      	mov	r0, r1
 800992c:	4611      	mov	r1, r2
 800992e:	2200      	movs	r2, #0
 8009930:	602a      	str	r2, [r5, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	f7f9 faf9 	bl	8002f2a <_lseek>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	d102      	bne.n	8009942 <_lseek_r+0x1e>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	b103      	cbz	r3, 8009942 <_lseek_r+0x1e>
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	20004bcc 	.word	0x20004bcc

08009948 <_read_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	@ (8009968 <_read_r+0x20>)
 800994c:	4604      	mov	r4, r0
 800994e:	4608      	mov	r0, r1
 8009950:	4611      	mov	r1, r2
 8009952:	2200      	movs	r2, #0
 8009954:	602a      	str	r2, [r5, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f7f9 faa3 	bl	8002ea2 <_read>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_read_r+0x1e>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_read_r+0x1e>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	20004bcc 	.word	0x20004bcc

0800996c <_write_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d07      	ldr	r5, [pc, #28]	@ (800998c <_write_r+0x20>)
 8009970:	4604      	mov	r4, r0
 8009972:	4608      	mov	r0, r1
 8009974:	4611      	mov	r1, r2
 8009976:	2200      	movs	r2, #0
 8009978:	602a      	str	r2, [r5, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	f7f8 f9e0 	bl	8001d40 <_write>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_write_r+0x1e>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_write_r+0x1e>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	20004bcc 	.word	0x20004bcc

08009990 <__errno>:
 8009990:	4b01      	ldr	r3, [pc, #4]	@ (8009998 <__errno+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	20000018 	.word	0x20000018

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4d0d      	ldr	r5, [pc, #52]	@ (80099d4 <__libc_init_array+0x38>)
 80099a0:	4c0d      	ldr	r4, [pc, #52]	@ (80099d8 <__libc_init_array+0x3c>)
 80099a2:	1b64      	subs	r4, r4, r5
 80099a4:	10a4      	asrs	r4, r4, #2
 80099a6:	2600      	movs	r6, #0
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	4d0b      	ldr	r5, [pc, #44]	@ (80099dc <__libc_init_array+0x40>)
 80099ae:	4c0c      	ldr	r4, [pc, #48]	@ (80099e0 <__libc_init_array+0x44>)
 80099b0:	f004 fba2 	bl	800e0f8 <_init>
 80099b4:	1b64      	subs	r4, r4, r5
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	2600      	movs	r6, #0
 80099ba:	42a6      	cmp	r6, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c4:	4798      	blx	r3
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ce:	4798      	blx	r3
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	0800e8d8 	.word	0x0800e8d8
 80099d8:	0800e8d8 	.word	0x0800e8d8
 80099dc:	0800e8d8 	.word	0x0800e8d8
 80099e0:	0800e8e0 	.word	0x0800e8e0

080099e4 <__retarget_lock_init_recursive>:
 80099e4:	4770      	bx	lr

080099e6 <__retarget_lock_close_recursive>:
 80099e6:	4770      	bx	lr

080099e8 <__retarget_lock_acquire_recursive>:
 80099e8:	4770      	bx	lr

080099ea <__retarget_lock_release_recursive>:
 80099ea:	4770      	bx	lr

080099ec <memcpy>:
 80099ec:	440a      	add	r2, r1
 80099ee:	4291      	cmp	r1, r2
 80099f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80099f4:	d100      	bne.n	80099f8 <memcpy+0xc>
 80099f6:	4770      	bx	lr
 80099f8:	b510      	push	{r4, lr}
 80099fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a02:	4291      	cmp	r1, r2
 8009a04:	d1f9      	bne.n	80099fa <memcpy+0xe>
 8009a06:	bd10      	pop	{r4, pc}

08009a08 <register_fini>:
 8009a08:	4b02      	ldr	r3, [pc, #8]	@ (8009a14 <register_fini+0xc>)
 8009a0a:	b113      	cbz	r3, 8009a12 <register_fini+0xa>
 8009a0c:	4802      	ldr	r0, [pc, #8]	@ (8009a18 <register_fini+0x10>)
 8009a0e:	f000 b805 	b.w	8009a1c <atexit>
 8009a12:	4770      	bx	lr
 8009a14:	00000000 	.word	0x00000000
 8009a18:	0800b6f1 	.word	0x0800b6f1

08009a1c <atexit>:
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4601      	mov	r1, r0
 8009a20:	461a      	mov	r2, r3
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 beba 	b.w	800b79c <__register_exitproc>

08009a28 <_malloc_trim_r>:
 8009a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	2008      	movs	r0, #8
 8009a30:	4689      	mov	r9, r1
 8009a32:	f001 fe71 	bl	800b718 <sysconf>
 8009a36:	4f24      	ldr	r7, [pc, #144]	@ (8009ac8 <_malloc_trim_r+0xa0>)
 8009a38:	4680      	mov	r8, r0
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f000 fb44 	bl	800a0c8 <__malloc_lock>
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	685d      	ldr	r5, [r3, #4]
 8009a44:	f025 0503 	bic.w	r5, r5, #3
 8009a48:	f1a5 0411 	sub.w	r4, r5, #17
 8009a4c:	eba4 0409 	sub.w	r4, r4, r9
 8009a50:	4444      	add	r4, r8
 8009a52:	fbb4 f4f8 	udiv	r4, r4, r8
 8009a56:	3c01      	subs	r4, #1
 8009a58:	fb08 f404 	mul.w	r4, r8, r4
 8009a5c:	45a0      	cmp	r8, r4
 8009a5e:	dd05      	ble.n	8009a6c <_malloc_trim_r+0x44>
 8009a60:	4630      	mov	r0, r6
 8009a62:	f000 fb37 	bl	800a0d4 <__malloc_unlock>
 8009a66:	2000      	movs	r0, #0
 8009a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f001 fe2e 	bl	800b6d0 <_sbrk_r>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	442b      	add	r3, r5
 8009a78:	4298      	cmp	r0, r3
 8009a7a:	d1f1      	bne.n	8009a60 <_malloc_trim_r+0x38>
 8009a7c:	4261      	negs	r1, r4
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f001 fe26 	bl	800b6d0 <_sbrk_r>
 8009a84:	3001      	adds	r0, #1
 8009a86:	d110      	bne.n	8009aaa <_malloc_trim_r+0x82>
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f001 fe20 	bl	800b6d0 <_sbrk_r>
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	1a83      	subs	r3, r0, r2
 8009a94:	2b0f      	cmp	r3, #15
 8009a96:	dde3      	ble.n	8009a60 <_malloc_trim_r+0x38>
 8009a98:	490c      	ldr	r1, [pc, #48]	@ (8009acc <_malloc_trim_r+0xa4>)
 8009a9a:	6809      	ldr	r1, [r1, #0]
 8009a9c:	1a40      	subs	r0, r0, r1
 8009a9e:	490c      	ldr	r1, [pc, #48]	@ (8009ad0 <_malloc_trim_r+0xa8>)
 8009aa0:	f043 0301 	orr.w	r3, r3, #1
 8009aa4:	6008      	str	r0, [r1, #0]
 8009aa6:	6053      	str	r3, [r2, #4]
 8009aa8:	e7da      	b.n	8009a60 <_malloc_trim_r+0x38>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4a08      	ldr	r2, [pc, #32]	@ (8009ad0 <_malloc_trim_r+0xa8>)
 8009aae:	1b2d      	subs	r5, r5, r4
 8009ab0:	f045 0501 	orr.w	r5, r5, #1
 8009ab4:	605d      	str	r5, [r3, #4]
 8009ab6:	6813      	ldr	r3, [r2, #0]
 8009ab8:	4630      	mov	r0, r6
 8009aba:	1b1b      	subs	r3, r3, r4
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	f000 fb09 	bl	800a0d4 <__malloc_unlock>
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	e7d0      	b.n	8009a68 <_malloc_trim_r+0x40>
 8009ac6:	bf00      	nop
 8009ac8:	2000014c 	.word	0x2000014c
 8009acc:	20000144 	.word	0x20000144
 8009ad0:	20004bd8 	.word	0x20004bd8

08009ad4 <_free_r>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	2900      	cmp	r1, #0
 8009adc:	f000 80b1 	beq.w	8009c42 <_free_r+0x16e>
 8009ae0:	f000 faf2 	bl	800a0c8 <__malloc_lock>
 8009ae4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009ae8:	4d56      	ldr	r5, [pc, #344]	@ (8009c44 <_free_r+0x170>)
 8009aea:	f022 0001 	bic.w	r0, r2, #1
 8009aee:	f1a7 0308 	sub.w	r3, r7, #8
 8009af2:	eb03 0c00 	add.w	ip, r3, r0
 8009af6:	68a9      	ldr	r1, [r5, #8]
 8009af8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009afc:	4561      	cmp	r1, ip
 8009afe:	f026 0603 	bic.w	r6, r6, #3
 8009b02:	f002 0201 	and.w	r2, r2, #1
 8009b06:	d11b      	bne.n	8009b40 <_free_r+0x6c>
 8009b08:	4406      	add	r6, r0
 8009b0a:	b93a      	cbnz	r2, 8009b1c <_free_r+0x48>
 8009b0c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8009b10:	1a9b      	subs	r3, r3, r2
 8009b12:	4416      	add	r6, r2
 8009b14:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8009b18:	60ca      	str	r2, [r1, #12]
 8009b1a:	6091      	str	r1, [r2, #8]
 8009b1c:	f046 0201 	orr.w	r2, r6, #1
 8009b20:	605a      	str	r2, [r3, #4]
 8009b22:	60ab      	str	r3, [r5, #8]
 8009b24:	4b48      	ldr	r3, [pc, #288]	@ (8009c48 <_free_r+0x174>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	42b3      	cmp	r3, r6
 8009b2a:	d804      	bhi.n	8009b36 <_free_r+0x62>
 8009b2c:	4b47      	ldr	r3, [pc, #284]	@ (8009c4c <_free_r+0x178>)
 8009b2e:	4620      	mov	r0, r4
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	f7ff ff79 	bl	8009a28 <_malloc_trim_r>
 8009b36:	4620      	mov	r0, r4
 8009b38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b3c:	f000 baca 	b.w	800a0d4 <__malloc_unlock>
 8009b40:	f8cc 6004 	str.w	r6, [ip, #4]
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	d138      	bne.n	8009bba <_free_r+0xe6>
 8009b48:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8009b4c:	1a5b      	subs	r3, r3, r1
 8009b4e:	4408      	add	r0, r1
 8009b50:	6899      	ldr	r1, [r3, #8]
 8009b52:	f105 0708 	add.w	r7, r5, #8
 8009b56:	42b9      	cmp	r1, r7
 8009b58:	d031      	beq.n	8009bbe <_free_r+0xea>
 8009b5a:	68df      	ldr	r7, [r3, #12]
 8009b5c:	60cf      	str	r7, [r1, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	eb0c 0106 	add.w	r1, ip, r6
 8009b64:	6849      	ldr	r1, [r1, #4]
 8009b66:	07c9      	lsls	r1, r1, #31
 8009b68:	d40b      	bmi.n	8009b82 <_free_r+0xae>
 8009b6a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009b6e:	4430      	add	r0, r6
 8009b70:	bb3a      	cbnz	r2, 8009bc2 <_free_r+0xee>
 8009b72:	4e37      	ldr	r6, [pc, #220]	@ (8009c50 <_free_r+0x17c>)
 8009b74:	42b1      	cmp	r1, r6
 8009b76:	d124      	bne.n	8009bc2 <_free_r+0xee>
 8009b78:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8009b7c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f040 0101 	orr.w	r1, r0, #1
 8009b86:	6059      	str	r1, [r3, #4]
 8009b88:	5018      	str	r0, [r3, r0]
 8009b8a:	2a00      	cmp	r2, #0
 8009b8c:	d1d3      	bne.n	8009b36 <_free_r+0x62>
 8009b8e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8009b92:	d21b      	bcs.n	8009bcc <_free_r+0xf8>
 8009b94:	08c2      	lsrs	r2, r0, #3
 8009b96:	2101      	movs	r1, #1
 8009b98:	0940      	lsrs	r0, r0, #5
 8009b9a:	4081      	lsls	r1, r0
 8009b9c:	6868      	ldr	r0, [r5, #4]
 8009b9e:	3201      	adds	r2, #1
 8009ba0:	4301      	orrs	r1, r0
 8009ba2:	6069      	str	r1, [r5, #4]
 8009ba4:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8009ba8:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8009bac:	3908      	subs	r1, #8
 8009bae:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009bb2:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8009bb6:	60c3      	str	r3, [r0, #12]
 8009bb8:	e7bd      	b.n	8009b36 <_free_r+0x62>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	e7d0      	b.n	8009b60 <_free_r+0x8c>
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	e7ce      	b.n	8009b60 <_free_r+0x8c>
 8009bc2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8009bc6:	60ce      	str	r6, [r1, #12]
 8009bc8:	60b1      	str	r1, [r6, #8]
 8009bca:	e7da      	b.n	8009b82 <_free_r+0xae>
 8009bcc:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8009bd0:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8009bd4:	d214      	bcs.n	8009c00 <_free_r+0x12c>
 8009bd6:	0982      	lsrs	r2, r0, #6
 8009bd8:	3238      	adds	r2, #56	@ 0x38
 8009bda:	1c51      	adds	r1, r2, #1
 8009bdc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009be0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009be4:	428e      	cmp	r6, r1
 8009be6:	d125      	bne.n	8009c34 <_free_r+0x160>
 8009be8:	2001      	movs	r0, #1
 8009bea:	1092      	asrs	r2, r2, #2
 8009bec:	fa00 f202 	lsl.w	r2, r0, r2
 8009bf0:	6868      	ldr	r0, [r5, #4]
 8009bf2:	4302      	orrs	r2, r0
 8009bf4:	606a      	str	r2, [r5, #4]
 8009bf6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8009bfa:	60b3      	str	r3, [r6, #8]
 8009bfc:	60cb      	str	r3, [r1, #12]
 8009bfe:	e79a      	b.n	8009b36 <_free_r+0x62>
 8009c00:	2a14      	cmp	r2, #20
 8009c02:	d801      	bhi.n	8009c08 <_free_r+0x134>
 8009c04:	325b      	adds	r2, #91	@ 0x5b
 8009c06:	e7e8      	b.n	8009bda <_free_r+0x106>
 8009c08:	2a54      	cmp	r2, #84	@ 0x54
 8009c0a:	d802      	bhi.n	8009c12 <_free_r+0x13e>
 8009c0c:	0b02      	lsrs	r2, r0, #12
 8009c0e:	326e      	adds	r2, #110	@ 0x6e
 8009c10:	e7e3      	b.n	8009bda <_free_r+0x106>
 8009c12:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8009c16:	d802      	bhi.n	8009c1e <_free_r+0x14a>
 8009c18:	0bc2      	lsrs	r2, r0, #15
 8009c1a:	3277      	adds	r2, #119	@ 0x77
 8009c1c:	e7dd      	b.n	8009bda <_free_r+0x106>
 8009c1e:	f240 5154 	movw	r1, #1364	@ 0x554
 8009c22:	428a      	cmp	r2, r1
 8009c24:	bf9a      	itte	ls
 8009c26:	0c82      	lsrls	r2, r0, #18
 8009c28:	327c      	addls	r2, #124	@ 0x7c
 8009c2a:	227e      	movhi	r2, #126	@ 0x7e
 8009c2c:	e7d5      	b.n	8009bda <_free_r+0x106>
 8009c2e:	6889      	ldr	r1, [r1, #8]
 8009c30:	428e      	cmp	r6, r1
 8009c32:	d004      	beq.n	8009c3e <_free_r+0x16a>
 8009c34:	684a      	ldr	r2, [r1, #4]
 8009c36:	f022 0203 	bic.w	r2, r2, #3
 8009c3a:	4282      	cmp	r2, r0
 8009c3c:	d8f7      	bhi.n	8009c2e <_free_r+0x15a>
 8009c3e:	68ce      	ldr	r6, [r1, #12]
 8009c40:	e7d9      	b.n	8009bf6 <_free_r+0x122>
 8009c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c44:	2000014c 	.word	0x2000014c
 8009c48:	20000148 	.word	0x20000148
 8009c4c:	20004c08 	.word	0x20004c08
 8009c50:	20000154 	.word	0x20000154

08009c54 <_malloc_r>:
 8009c54:	f101 030b 	add.w	r3, r1, #11
 8009c58:	2b16      	cmp	r3, #22
 8009c5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5e:	4605      	mov	r5, r0
 8009c60:	d906      	bls.n	8009c70 <_malloc_r+0x1c>
 8009c62:	f033 0707 	bics.w	r7, r3, #7
 8009c66:	d504      	bpl.n	8009c72 <_malloc_r+0x1e>
 8009c68:	230c      	movs	r3, #12
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	2400      	movs	r4, #0
 8009c6e:	e1a3      	b.n	8009fb8 <_malloc_r+0x364>
 8009c70:	2710      	movs	r7, #16
 8009c72:	42b9      	cmp	r1, r7
 8009c74:	d8f8      	bhi.n	8009c68 <_malloc_r+0x14>
 8009c76:	4628      	mov	r0, r5
 8009c78:	f000 fa26 	bl	800a0c8 <__malloc_lock>
 8009c7c:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8009c80:	4eaf      	ldr	r6, [pc, #700]	@ (8009f40 <_malloc_r+0x2ec>)
 8009c82:	d237      	bcs.n	8009cf4 <_malloc_r+0xa0>
 8009c84:	f107 0208 	add.w	r2, r7, #8
 8009c88:	4432      	add	r2, r6
 8009c8a:	f1a2 0108 	sub.w	r1, r2, #8
 8009c8e:	6854      	ldr	r4, [r2, #4]
 8009c90:	428c      	cmp	r4, r1
 8009c92:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8009c96:	d102      	bne.n	8009c9e <_malloc_r+0x4a>
 8009c98:	68d4      	ldr	r4, [r2, #12]
 8009c9a:	42a2      	cmp	r2, r4
 8009c9c:	d010      	beq.n	8009cc0 <_malloc_r+0x6c>
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009ca4:	f023 0303 	bic.w	r3, r3, #3
 8009ca8:	60ca      	str	r2, [r1, #12]
 8009caa:	4423      	add	r3, r4
 8009cac:	6091      	str	r1, [r2, #8]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	f042 0201 	orr.w	r2, r2, #1
 8009cb4:	605a      	str	r2, [r3, #4]
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 fa0c 	bl	800a0d4 <__malloc_unlock>
 8009cbc:	3408      	adds	r4, #8
 8009cbe:	e17b      	b.n	8009fb8 <_malloc_r+0x364>
 8009cc0:	3302      	adds	r3, #2
 8009cc2:	6934      	ldr	r4, [r6, #16]
 8009cc4:	499f      	ldr	r1, [pc, #636]	@ (8009f44 <_malloc_r+0x2f0>)
 8009cc6:	428c      	cmp	r4, r1
 8009cc8:	d077      	beq.n	8009dba <_malloc_r+0x166>
 8009cca:	6862      	ldr	r2, [r4, #4]
 8009ccc:	f022 0c03 	bic.w	ip, r2, #3
 8009cd0:	ebac 0007 	sub.w	r0, ip, r7
 8009cd4:	280f      	cmp	r0, #15
 8009cd6:	dd48      	ble.n	8009d6a <_malloc_r+0x116>
 8009cd8:	19e2      	adds	r2, r4, r7
 8009cda:	f040 0301 	orr.w	r3, r0, #1
 8009cde:	f047 0701 	orr.w	r7, r7, #1
 8009ce2:	6067      	str	r7, [r4, #4]
 8009ce4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009ce8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009cec:	6053      	str	r3, [r2, #4]
 8009cee:	f844 000c 	str.w	r0, [r4, ip]
 8009cf2:	e7e0      	b.n	8009cb6 <_malloc_r+0x62>
 8009cf4:	0a7b      	lsrs	r3, r7, #9
 8009cf6:	d02a      	beq.n	8009d4e <_malloc_r+0xfa>
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d812      	bhi.n	8009d22 <_malloc_r+0xce>
 8009cfc:	09bb      	lsrs	r3, r7, #6
 8009cfe:	3338      	adds	r3, #56	@ 0x38
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8009d06:	f1a2 0c08 	sub.w	ip, r2, #8
 8009d0a:	6854      	ldr	r4, [r2, #4]
 8009d0c:	4564      	cmp	r4, ip
 8009d0e:	d006      	beq.n	8009d1e <_malloc_r+0xca>
 8009d10:	6862      	ldr	r2, [r4, #4]
 8009d12:	f022 0203 	bic.w	r2, r2, #3
 8009d16:	1bd0      	subs	r0, r2, r7
 8009d18:	280f      	cmp	r0, #15
 8009d1a:	dd1c      	ble.n	8009d56 <_malloc_r+0x102>
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	3301      	adds	r3, #1
 8009d20:	e7cf      	b.n	8009cc2 <_malloc_r+0x6e>
 8009d22:	2b14      	cmp	r3, #20
 8009d24:	d801      	bhi.n	8009d2a <_malloc_r+0xd6>
 8009d26:	335b      	adds	r3, #91	@ 0x5b
 8009d28:	e7ea      	b.n	8009d00 <_malloc_r+0xac>
 8009d2a:	2b54      	cmp	r3, #84	@ 0x54
 8009d2c:	d802      	bhi.n	8009d34 <_malloc_r+0xe0>
 8009d2e:	0b3b      	lsrs	r3, r7, #12
 8009d30:	336e      	adds	r3, #110	@ 0x6e
 8009d32:	e7e5      	b.n	8009d00 <_malloc_r+0xac>
 8009d34:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8009d38:	d802      	bhi.n	8009d40 <_malloc_r+0xec>
 8009d3a:	0bfb      	lsrs	r3, r7, #15
 8009d3c:	3377      	adds	r3, #119	@ 0x77
 8009d3e:	e7df      	b.n	8009d00 <_malloc_r+0xac>
 8009d40:	f240 5254 	movw	r2, #1364	@ 0x554
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d804      	bhi.n	8009d52 <_malloc_r+0xfe>
 8009d48:	0cbb      	lsrs	r3, r7, #18
 8009d4a:	337c      	adds	r3, #124	@ 0x7c
 8009d4c:	e7d8      	b.n	8009d00 <_malloc_r+0xac>
 8009d4e:	233f      	movs	r3, #63	@ 0x3f
 8009d50:	e7d6      	b.n	8009d00 <_malloc_r+0xac>
 8009d52:	237e      	movs	r3, #126	@ 0x7e
 8009d54:	e7d4      	b.n	8009d00 <_malloc_r+0xac>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	68e1      	ldr	r1, [r4, #12]
 8009d5a:	db04      	blt.n	8009d66 <_malloc_r+0x112>
 8009d5c:	68a3      	ldr	r3, [r4, #8]
 8009d5e:	60d9      	str	r1, [r3, #12]
 8009d60:	608b      	str	r3, [r1, #8]
 8009d62:	18a3      	adds	r3, r4, r2
 8009d64:	e7a3      	b.n	8009cae <_malloc_r+0x5a>
 8009d66:	460c      	mov	r4, r1
 8009d68:	e7d0      	b.n	8009d0c <_malloc_r+0xb8>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009d70:	db07      	blt.n	8009d82 <_malloc_r+0x12e>
 8009d72:	44a4      	add	ip, r4
 8009d74:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	f8cc 3004 	str.w	r3, [ip, #4]
 8009d80:	e799      	b.n	8009cb6 <_malloc_r+0x62>
 8009d82:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8009d86:	6870      	ldr	r0, [r6, #4]
 8009d88:	f080 8095 	bcs.w	8009eb6 <_malloc_r+0x262>
 8009d8c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009d90:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009d94:	f04f 0c01 	mov.w	ip, #1
 8009d98:	3201      	adds	r2, #1
 8009d9a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009d9e:	ea4c 0000 	orr.w	r0, ip, r0
 8009da2:	6070      	str	r0, [r6, #4]
 8009da4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009da8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009dac:	3808      	subs	r0, #8
 8009dae:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009db2:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8009db6:	f8cc 400c 	str.w	r4, [ip, #12]
 8009dba:	1098      	asrs	r0, r3, #2
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	4082      	lsls	r2, r0
 8009dc0:	6870      	ldr	r0, [r6, #4]
 8009dc2:	4290      	cmp	r0, r2
 8009dc4:	d326      	bcc.n	8009e14 <_malloc_r+0x1c0>
 8009dc6:	4210      	tst	r0, r2
 8009dc8:	d106      	bne.n	8009dd8 <_malloc_r+0x184>
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	0052      	lsls	r2, r2, #1
 8009dd0:	4210      	tst	r0, r2
 8009dd2:	f103 0304 	add.w	r3, r3, #4
 8009dd6:	d0fa      	beq.n	8009dce <_malloc_r+0x17a>
 8009dd8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009ddc:	46c1      	mov	r9, r8
 8009dde:	469e      	mov	lr, r3
 8009de0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009de4:	454c      	cmp	r4, r9
 8009de6:	f040 80b9 	bne.w	8009f5c <_malloc_r+0x308>
 8009dea:	f10e 0e01 	add.w	lr, lr, #1
 8009dee:	f01e 0f03 	tst.w	lr, #3
 8009df2:	f109 0908 	add.w	r9, r9, #8
 8009df6:	d1f3      	bne.n	8009de0 <_malloc_r+0x18c>
 8009df8:	0798      	lsls	r0, r3, #30
 8009dfa:	f040 80e3 	bne.w	8009fc4 <_malloc_r+0x370>
 8009dfe:	6873      	ldr	r3, [r6, #4]
 8009e00:	ea23 0302 	bic.w	r3, r3, r2
 8009e04:	6073      	str	r3, [r6, #4]
 8009e06:	6870      	ldr	r0, [r6, #4]
 8009e08:	0052      	lsls	r2, r2, #1
 8009e0a:	4290      	cmp	r0, r2
 8009e0c:	d302      	bcc.n	8009e14 <_malloc_r+0x1c0>
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	f040 80e5 	bne.w	8009fde <_malloc_r+0x38a>
 8009e14:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8009e18:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e1c:	f023 0903 	bic.w	r9, r3, #3
 8009e20:	45b9      	cmp	r9, r7
 8009e22:	d304      	bcc.n	8009e2e <_malloc_r+0x1da>
 8009e24:	eba9 0207 	sub.w	r2, r9, r7
 8009e28:	2a0f      	cmp	r2, #15
 8009e2a:	f300 8141 	bgt.w	800a0b0 <_malloc_r+0x45c>
 8009e2e:	4b46      	ldr	r3, [pc, #280]	@ (8009f48 <_malloc_r+0x2f4>)
 8009e30:	6819      	ldr	r1, [r3, #0]
 8009e32:	3110      	adds	r1, #16
 8009e34:	4439      	add	r1, r7
 8009e36:	2008      	movs	r0, #8
 8009e38:	9101      	str	r1, [sp, #4]
 8009e3a:	f001 fc6d 	bl	800b718 <sysconf>
 8009e3e:	4a43      	ldr	r2, [pc, #268]	@ (8009f4c <_malloc_r+0x2f8>)
 8009e40:	9901      	ldr	r1, [sp, #4]
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	3301      	adds	r3, #1
 8009e46:	bf1f      	itttt	ne
 8009e48:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8009e4c:	1809      	addne	r1, r1, r0
 8009e4e:	4243      	negne	r3, r0
 8009e50:	4019      	andne	r1, r3
 8009e52:	4680      	mov	r8, r0
 8009e54:	4628      	mov	r0, r5
 8009e56:	9101      	str	r1, [sp, #4]
 8009e58:	f001 fc3a 	bl	800b6d0 <_sbrk_r>
 8009e5c:	1c42      	adds	r2, r0, #1
 8009e5e:	eb0a 0b09 	add.w	fp, sl, r9
 8009e62:	4604      	mov	r4, r0
 8009e64:	f000 80f7 	beq.w	800a056 <_malloc_r+0x402>
 8009e68:	4583      	cmp	fp, r0
 8009e6a:	9901      	ldr	r1, [sp, #4]
 8009e6c:	4a37      	ldr	r2, [pc, #220]	@ (8009f4c <_malloc_r+0x2f8>)
 8009e6e:	d902      	bls.n	8009e76 <_malloc_r+0x222>
 8009e70:	45b2      	cmp	sl, r6
 8009e72:	f040 80f0 	bne.w	800a056 <_malloc_r+0x402>
 8009e76:	4b36      	ldr	r3, [pc, #216]	@ (8009f50 <_malloc_r+0x2fc>)
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	45a3      	cmp	fp, r4
 8009e7c:	eb00 0e01 	add.w	lr, r0, r1
 8009e80:	f8c3 e000 	str.w	lr, [r3]
 8009e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8009e88:	f040 80ab 	bne.w	8009fe2 <_malloc_r+0x38e>
 8009e8c:	ea1b 0f0c 	tst.w	fp, ip
 8009e90:	f040 80a7 	bne.w	8009fe2 <_malloc_r+0x38e>
 8009e94:	68b2      	ldr	r2, [r6, #8]
 8009e96:	4449      	add	r1, r9
 8009e98:	f041 0101 	orr.w	r1, r1, #1
 8009e9c:	6051      	str	r1, [r2, #4]
 8009e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8009f54 <_malloc_r+0x300>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6811      	ldr	r1, [r2, #0]
 8009ea4:	428b      	cmp	r3, r1
 8009ea6:	bf88      	it	hi
 8009ea8:	6013      	strhi	r3, [r2, #0]
 8009eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8009f58 <_malloc_r+0x304>)
 8009eac:	6811      	ldr	r1, [r2, #0]
 8009eae:	428b      	cmp	r3, r1
 8009eb0:	bf88      	it	hi
 8009eb2:	6013      	strhi	r3, [r2, #0]
 8009eb4:	e0cf      	b.n	800a056 <_malloc_r+0x402>
 8009eb6:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8009eba:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009ebe:	d218      	bcs.n	8009ef2 <_malloc_r+0x29e>
 8009ec0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009ec4:	3238      	adds	r2, #56	@ 0x38
 8009ec6:	f102 0e01 	add.w	lr, r2, #1
 8009eca:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009ece:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009ed2:	45f0      	cmp	r8, lr
 8009ed4:	d12b      	bne.n	8009f2e <_malloc_r+0x2da>
 8009ed6:	1092      	asrs	r2, r2, #2
 8009ed8:	f04f 0c01 	mov.w	ip, #1
 8009edc:	fa0c f202 	lsl.w	r2, ip, r2
 8009ee0:	4302      	orrs	r2, r0
 8009ee2:	6072      	str	r2, [r6, #4]
 8009ee4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009ee8:	f8c8 4008 	str.w	r4, [r8, #8]
 8009eec:	f8ce 400c 	str.w	r4, [lr, #12]
 8009ef0:	e763      	b.n	8009dba <_malloc_r+0x166>
 8009ef2:	2a14      	cmp	r2, #20
 8009ef4:	d801      	bhi.n	8009efa <_malloc_r+0x2a6>
 8009ef6:	325b      	adds	r2, #91	@ 0x5b
 8009ef8:	e7e5      	b.n	8009ec6 <_malloc_r+0x272>
 8009efa:	2a54      	cmp	r2, #84	@ 0x54
 8009efc:	d803      	bhi.n	8009f06 <_malloc_r+0x2b2>
 8009efe:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009f02:	326e      	adds	r2, #110	@ 0x6e
 8009f04:	e7df      	b.n	8009ec6 <_malloc_r+0x272>
 8009f06:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8009f0a:	d803      	bhi.n	8009f14 <_malloc_r+0x2c0>
 8009f0c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009f10:	3277      	adds	r2, #119	@ 0x77
 8009f12:	e7d8      	b.n	8009ec6 <_malloc_r+0x272>
 8009f14:	f240 5e54 	movw	lr, #1364	@ 0x554
 8009f18:	4572      	cmp	r2, lr
 8009f1a:	bf9a      	itte	ls
 8009f1c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009f20:	327c      	addls	r2, #124	@ 0x7c
 8009f22:	227e      	movhi	r2, #126	@ 0x7e
 8009f24:	e7cf      	b.n	8009ec6 <_malloc_r+0x272>
 8009f26:	f8de e008 	ldr.w	lr, [lr, #8]
 8009f2a:	45f0      	cmp	r8, lr
 8009f2c:	d005      	beq.n	8009f3a <_malloc_r+0x2e6>
 8009f2e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009f32:	f022 0203 	bic.w	r2, r2, #3
 8009f36:	4562      	cmp	r2, ip
 8009f38:	d8f5      	bhi.n	8009f26 <_malloc_r+0x2d2>
 8009f3a:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009f3e:	e7d1      	b.n	8009ee4 <_malloc_r+0x290>
 8009f40:	2000014c 	.word	0x2000014c
 8009f44:	20000154 	.word	0x20000154
 8009f48:	20004c08 	.word	0x20004c08
 8009f4c:	20000144 	.word	0x20000144
 8009f50:	20004bd8 	.word	0x20004bd8
 8009f54:	20004c04 	.word	0x20004c04
 8009f58:	20004c00 	.word	0x20004c00
 8009f5c:	6860      	ldr	r0, [r4, #4]
 8009f5e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009f62:	f020 0003 	bic.w	r0, r0, #3
 8009f66:	eba0 0a07 	sub.w	sl, r0, r7
 8009f6a:	f1ba 0f0f 	cmp.w	sl, #15
 8009f6e:	dd12      	ble.n	8009f96 <_malloc_r+0x342>
 8009f70:	68a3      	ldr	r3, [r4, #8]
 8009f72:	19e2      	adds	r2, r4, r7
 8009f74:	f047 0701 	orr.w	r7, r7, #1
 8009f78:	6067      	str	r7, [r4, #4]
 8009f7a:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009f7e:	f8cc 3008 	str.w	r3, [ip, #8]
 8009f82:	f04a 0301 	orr.w	r3, sl, #1
 8009f86:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009f8a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009f8e:	6053      	str	r3, [r2, #4]
 8009f90:	f844 a000 	str.w	sl, [r4, r0]
 8009f94:	e68f      	b.n	8009cb6 <_malloc_r+0x62>
 8009f96:	f1ba 0f00 	cmp.w	sl, #0
 8009f9a:	db11      	blt.n	8009fc0 <_malloc_r+0x36c>
 8009f9c:	4420      	add	r0, r4
 8009f9e:	6843      	ldr	r3, [r0, #4]
 8009fa0:	f043 0301 	orr.w	r3, r3, #1
 8009fa4:	6043      	str	r3, [r0, #4]
 8009fa6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009faa:	4628      	mov	r0, r5
 8009fac:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009fb0:	f8cc 3008 	str.w	r3, [ip, #8]
 8009fb4:	f000 f88e 	bl	800a0d4 <__malloc_unlock>
 8009fb8:	4620      	mov	r0, r4
 8009fba:	b003      	add	sp, #12
 8009fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc0:	4664      	mov	r4, ip
 8009fc2:	e70f      	b.n	8009de4 <_malloc_r+0x190>
 8009fc4:	f858 0908 	ldr.w	r0, [r8], #-8
 8009fc8:	4540      	cmp	r0, r8
 8009fca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009fce:	f43f af13 	beq.w	8009df8 <_malloc_r+0x1a4>
 8009fd2:	e718      	b.n	8009e06 <_malloc_r+0x1b2>
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	0052      	lsls	r2, r2, #1
 8009fd8:	4210      	tst	r0, r2
 8009fda:	d0fb      	beq.n	8009fd4 <_malloc_r+0x380>
 8009fdc:	e6fc      	b.n	8009dd8 <_malloc_r+0x184>
 8009fde:	4673      	mov	r3, lr
 8009fe0:	e7fa      	b.n	8009fd8 <_malloc_r+0x384>
 8009fe2:	6810      	ldr	r0, [r2, #0]
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	bf1b      	ittet	ne
 8009fe8:	eba4 0b0b 	subne.w	fp, r4, fp
 8009fec:	eb0b 020e 	addne.w	r2, fp, lr
 8009ff0:	6014      	streq	r4, [r2, #0]
 8009ff2:	601a      	strne	r2, [r3, #0]
 8009ff4:	f014 0b07 	ands.w	fp, r4, #7
 8009ff8:	bf1a      	itte	ne
 8009ffa:	f1cb 0008 	rsbne	r0, fp, #8
 8009ffe:	1824      	addne	r4, r4, r0
 800a000:	4658      	moveq	r0, fp
 800a002:	1862      	adds	r2, r4, r1
 800a004:	ea02 010c 	and.w	r1, r2, ip
 800a008:	4480      	add	r8, r0
 800a00a:	eba8 0801 	sub.w	r8, r8, r1
 800a00e:	ea08 080c 	and.w	r8, r8, ip
 800a012:	4641      	mov	r1, r8
 800a014:	4628      	mov	r0, r5
 800a016:	9201      	str	r2, [sp, #4]
 800a018:	f001 fb5a 	bl	800b6d0 <_sbrk_r>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	9a01      	ldr	r2, [sp, #4]
 800a020:	4b28      	ldr	r3, [pc, #160]	@ (800a0c4 <_malloc_r+0x470>)
 800a022:	d107      	bne.n	800a034 <_malloc_r+0x3e0>
 800a024:	f1bb 0f00 	cmp.w	fp, #0
 800a028:	d023      	beq.n	800a072 <_malloc_r+0x41e>
 800a02a:	f1ab 0008 	sub.w	r0, fp, #8
 800a02e:	4410      	add	r0, r2
 800a030:	f04f 0800 	mov.w	r8, #0
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	60b4      	str	r4, [r6, #8]
 800a038:	1b00      	subs	r0, r0, r4
 800a03a:	4440      	add	r0, r8
 800a03c:	4442      	add	r2, r8
 800a03e:	f040 0001 	orr.w	r0, r0, #1
 800a042:	45b2      	cmp	sl, r6
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	6060      	str	r0, [r4, #4]
 800a048:	f43f af29 	beq.w	8009e9e <_malloc_r+0x24a>
 800a04c:	f1b9 0f0f 	cmp.w	r9, #15
 800a050:	d812      	bhi.n	800a078 <_malloc_r+0x424>
 800a052:	2301      	movs	r3, #1
 800a054:	6063      	str	r3, [r4, #4]
 800a056:	68b3      	ldr	r3, [r6, #8]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f023 0303 	bic.w	r3, r3, #3
 800a05e:	42bb      	cmp	r3, r7
 800a060:	eba3 0207 	sub.w	r2, r3, r7
 800a064:	d301      	bcc.n	800a06a <_malloc_r+0x416>
 800a066:	2a0f      	cmp	r2, #15
 800a068:	dc22      	bgt.n	800a0b0 <_malloc_r+0x45c>
 800a06a:	4628      	mov	r0, r5
 800a06c:	f000 f832 	bl	800a0d4 <__malloc_unlock>
 800a070:	e5fc      	b.n	8009c6c <_malloc_r+0x18>
 800a072:	4610      	mov	r0, r2
 800a074:	46d8      	mov	r8, fp
 800a076:	e7dd      	b.n	800a034 <_malloc_r+0x3e0>
 800a078:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a07c:	f1a9 090c 	sub.w	r9, r9, #12
 800a080:	f029 0907 	bic.w	r9, r9, #7
 800a084:	f002 0201 	and.w	r2, r2, #1
 800a088:	ea42 0209 	orr.w	r2, r2, r9
 800a08c:	f8ca 2004 	str.w	r2, [sl, #4]
 800a090:	2105      	movs	r1, #5
 800a092:	eb0a 0209 	add.w	r2, sl, r9
 800a096:	f1b9 0f0f 	cmp.w	r9, #15
 800a09a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800a09e:	f67f aefe 	bls.w	8009e9e <_malloc_r+0x24a>
 800a0a2:	f10a 0108 	add.w	r1, sl, #8
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f7ff fd14 	bl	8009ad4 <_free_r>
 800a0ac:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <_malloc_r+0x470>)
 800a0ae:	e6f6      	b.n	8009e9e <_malloc_r+0x24a>
 800a0b0:	68b4      	ldr	r4, [r6, #8]
 800a0b2:	f047 0301 	orr.w	r3, r7, #1
 800a0b6:	4427      	add	r7, r4
 800a0b8:	f042 0201 	orr.w	r2, r2, #1
 800a0bc:	6063      	str	r3, [r4, #4]
 800a0be:	60b7      	str	r7, [r6, #8]
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	e5f8      	b.n	8009cb6 <_malloc_r+0x62>
 800a0c4:	20004bd8 	.word	0x20004bd8

0800a0c8 <__malloc_lock>:
 800a0c8:	4801      	ldr	r0, [pc, #4]	@ (800a0d0 <__malloc_lock+0x8>)
 800a0ca:	f7ff bc8d 	b.w	80099e8 <__retarget_lock_acquire_recursive>
 800a0ce:	bf00      	nop
 800a0d0:	20004bd0 	.word	0x20004bd0

0800a0d4 <__malloc_unlock>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	@ (800a0dc <__malloc_unlock+0x8>)
 800a0d6:	f7ff bc88 	b.w	80099ea <__retarget_lock_release_recursive>
 800a0da:	bf00      	nop
 800a0dc:	20004bd0 	.word	0x20004bd0

0800a0e0 <_svfprintf_r>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	b0d3      	sub	sp, #332	@ 0x14c
 800a0e6:	468b      	mov	fp, r1
 800a0e8:	4691      	mov	r9, r2
 800a0ea:	461e      	mov	r6, r3
 800a0ec:	9003      	str	r0, [sp, #12]
 800a0ee:	f001 faeb 	bl	800b6c8 <_localeconv_r>
 800a0f2:	6803      	ldr	r3, [r0, #0]
 800a0f4:	9316      	str	r3, [sp, #88]	@ 0x58
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7f6 f86a 	bl	80001d0 <strlen>
 800a0fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a100:	900d      	str	r0, [sp, #52]	@ 0x34
 800a102:	061b      	lsls	r3, r3, #24
 800a104:	d515      	bpl.n	800a132 <_svfprintf_r+0x52>
 800a106:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a10a:	b993      	cbnz	r3, 800a132 <_svfprintf_r+0x52>
 800a10c:	9803      	ldr	r0, [sp, #12]
 800a10e:	2140      	movs	r1, #64	@ 0x40
 800a110:	f7ff fda0 	bl	8009c54 <_malloc_r>
 800a114:	f8cb 0000 	str.w	r0, [fp]
 800a118:	f8cb 0010 	str.w	r0, [fp, #16]
 800a11c:	b930      	cbnz	r0, 800a12c <_svfprintf_r+0x4c>
 800a11e:	9a03      	ldr	r2, [sp, #12]
 800a120:	230c      	movs	r3, #12
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a128:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a12a:	e1f7      	b.n	800a51c <_svfprintf_r+0x43c>
 800a12c:	2340      	movs	r3, #64	@ 0x40
 800a12e:	f8cb 3014 	str.w	r3, [fp, #20]
 800a132:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800a380 <_svfprintf_r+0x2a0>
 800a136:	2300      	movs	r3, #0
 800a138:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800a13c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a140:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800a144:	ac29      	add	r4, sp, #164	@ 0xa4
 800a146:	9426      	str	r4, [sp, #152]	@ 0x98
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a14c:	9312      	str	r3, [sp, #72]	@ 0x48
 800a14e:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a150:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a152:	464b      	mov	r3, r9
 800a154:	461d      	mov	r5, r3
 800a156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a15a:	b10a      	cbz	r2, 800a160 <_svfprintf_r+0x80>
 800a15c:	2a25      	cmp	r2, #37	@ 0x25
 800a15e:	d1f9      	bne.n	800a154 <_svfprintf_r+0x74>
 800a160:	ebb5 0709 	subs.w	r7, r5, r9
 800a164:	d00d      	beq.n	800a182 <_svfprintf_r+0xa2>
 800a166:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a168:	443b      	add	r3, r7
 800a16a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a16c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a16e:	3301      	adds	r3, #1
 800a170:	2b07      	cmp	r3, #7
 800a172:	e9c4 9700 	strd	r9, r7, [r4]
 800a176:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a178:	dc75      	bgt.n	800a266 <_svfprintf_r+0x186>
 800a17a:	3408      	adds	r4, #8
 800a17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17e:	443b      	add	r3, r7
 800a180:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a182:	782b      	ldrb	r3, [r5, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f001 8148 	beq.w	800b41a <_svfprintf_r+0x133a>
 800a18a:	2200      	movs	r2, #0
 800a18c:	1c6b      	adds	r3, r5, #1
 800a18e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800a192:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a196:	920e      	str	r2, [sp, #56]	@ 0x38
 800a198:	4615      	mov	r5, r2
 800a19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a19e:	9206      	str	r2, [sp, #24]
 800a1a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1a2:	9b06      	ldr	r3, [sp, #24]
 800a1a4:	3b20      	subs	r3, #32
 800a1a6:	2b5a      	cmp	r3, #90	@ 0x5a
 800a1a8:	f200 85a4 	bhi.w	800acf4 <_svfprintf_r+0xc14>
 800a1ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a1b0:	05a2009d 	.word	0x05a2009d
 800a1b4:	00a505a2 	.word	0x00a505a2
 800a1b8:	05a205a2 	.word	0x05a205a2
 800a1bc:	008505a2 	.word	0x008505a2
 800a1c0:	05a205a2 	.word	0x05a205a2
 800a1c4:	00b200a8 	.word	0x00b200a8
 800a1c8:	00af05a2 	.word	0x00af05a2
 800a1cc:	05a200b4 	.word	0x05a200b4
 800a1d0:	00d100ce 	.word	0x00d100ce
 800a1d4:	00d100d1 	.word	0x00d100d1
 800a1d8:	00d100d1 	.word	0x00d100d1
 800a1dc:	00d100d1 	.word	0x00d100d1
 800a1e0:	00d100d1 	.word	0x00d100d1
 800a1e4:	05a205a2 	.word	0x05a205a2
 800a1e8:	05a205a2 	.word	0x05a205a2
 800a1ec:	05a205a2 	.word	0x05a205a2
 800a1f0:	014705a2 	.word	0x014705a2
 800a1f4:	010805a2 	.word	0x010805a2
 800a1f8:	0147011b 	.word	0x0147011b
 800a1fc:	01470147 	.word	0x01470147
 800a200:	05a205a2 	.word	0x05a205a2
 800a204:	05a205a2 	.word	0x05a205a2
 800a208:	05a200e2 	.word	0x05a200e2
 800a20c:	049d05a2 	.word	0x049d05a2
 800a210:	05a205a2 	.word	0x05a205a2
 800a214:	04e705a2 	.word	0x04e705a2
 800a218:	050805a2 	.word	0x050805a2
 800a21c:	05a205a2 	.word	0x05a205a2
 800a220:	05a2052a 	.word	0x05a2052a
 800a224:	05a205a2 	.word	0x05a205a2
 800a228:	05a205a2 	.word	0x05a205a2
 800a22c:	05a205a2 	.word	0x05a205a2
 800a230:	014705a2 	.word	0x014705a2
 800a234:	010805a2 	.word	0x010805a2
 800a238:	0147011d 	.word	0x0147011d
 800a23c:	01470147 	.word	0x01470147
 800a240:	011d00ee 	.word	0x011d00ee
 800a244:	05a20102 	.word	0x05a20102
 800a248:	05a200fb 	.word	0x05a200fb
 800a24c:	049f047e 	.word	0x049f047e
 800a250:	010204d6 	.word	0x010204d6
 800a254:	04e705a2 	.word	0x04e705a2
 800a258:	050a009b 	.word	0x050a009b
 800a25c:	05a205a2 	.word	0x05a205a2
 800a260:	05a20065 	.word	0x05a20065
 800a264:	009b      	.short	0x009b
 800a266:	9803      	ldr	r0, [sp, #12]
 800a268:	aa26      	add	r2, sp, #152	@ 0x98
 800a26a:	4659      	mov	r1, fp
 800a26c:	f002 fc40 	bl	800caf0 <__ssprint_r>
 800a270:	2800      	cmp	r0, #0
 800a272:	f040 814e 	bne.w	800a512 <_svfprintf_r+0x432>
 800a276:	ac29      	add	r4, sp, #164	@ 0xa4
 800a278:	e780      	b.n	800a17c <_svfprintf_r+0x9c>
 800a27a:	4b43      	ldr	r3, [pc, #268]	@ (800a388 <_svfprintf_r+0x2a8>)
 800a27c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a27e:	f015 0320 	ands.w	r3, r5, #32
 800a282:	f000 84c2 	beq.w	800ac0a <_svfprintf_r+0xb2a>
 800a286:	3607      	adds	r6, #7
 800a288:	f026 0307 	bic.w	r3, r6, #7
 800a28c:	461a      	mov	r2, r3
 800a28e:	685f      	ldr	r7, [r3, #4]
 800a290:	f852 6b08 	ldr.w	r6, [r2], #8
 800a294:	9207      	str	r2, [sp, #28]
 800a296:	07eb      	lsls	r3, r5, #31
 800a298:	d50a      	bpl.n	800a2b0 <_svfprintf_r+0x1d0>
 800a29a:	ea56 0307 	orrs.w	r3, r6, r7
 800a29e:	d007      	beq.n	800a2b0 <_svfprintf_r+0x1d0>
 800a2a0:	2330      	movs	r3, #48	@ 0x30
 800a2a2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800a2a6:	9b06      	ldr	r3, [sp, #24]
 800a2a8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800a2ac:	f045 0502 	orr.w	r5, r5, #2
 800a2b0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	f000 bc28 	b.w	800ab0a <_svfprintf_r+0xa2a>
 800a2ba:	9803      	ldr	r0, [sp, #12]
 800a2bc:	f001 fa04 	bl	800b6c8 <_localeconv_r>
 800a2c0:	6843      	ldr	r3, [r0, #4]
 800a2c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f5 ff83 	bl	80001d0 <strlen>
 800a2ca:	9012      	str	r0, [sp, #72]	@ 0x48
 800a2cc:	9803      	ldr	r0, [sp, #12]
 800a2ce:	f001 f9fb 	bl	800b6c8 <_localeconv_r>
 800a2d2:	6883      	ldr	r3, [r0, #8]
 800a2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a2d8:	b12b      	cbz	r3, 800a2e6 <_svfprintf_r+0x206>
 800a2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2dc:	b11b      	cbz	r3, 800a2e6 <_svfprintf_r+0x206>
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	b10b      	cbz	r3, 800a2e6 <_svfprintf_r+0x206>
 800a2e2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800a2e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2e8:	e757      	b.n	800a19a <_svfprintf_r+0xba>
 800a2ea:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f9      	bne.n	800a2e6 <_svfprintf_r+0x206>
 800a2f2:	2320      	movs	r3, #32
 800a2f4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a2f8:	e7f5      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a2fa:	f045 0501 	orr.w	r5, r5, #1
 800a2fe:	e7f2      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a300:	f856 3b04 	ldr.w	r3, [r6], #4
 800a304:	930e      	str	r3, [sp, #56]	@ 0x38
 800a306:	2b00      	cmp	r3, #0
 800a308:	daed      	bge.n	800a2e6 <_svfprintf_r+0x206>
 800a30a:	425b      	negs	r3, r3
 800a30c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a30e:	f045 0504 	orr.w	r5, r5, #4
 800a312:	e7e8      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a314:	232b      	movs	r3, #43	@ 0x2b
 800a316:	e7ed      	b.n	800a2f4 <_svfprintf_r+0x214>
 800a318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a31a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a31e:	9206      	str	r2, [sp, #24]
 800a320:	2a2a      	cmp	r2, #42	@ 0x2a
 800a322:	d10f      	bne.n	800a344 <_svfprintf_r+0x264>
 800a324:	f856 2b04 	ldr.w	r2, [r6], #4
 800a328:	930c      	str	r3, [sp, #48]	@ 0x30
 800a32a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800a32e:	e7da      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a330:	fb01 2808 	mla	r8, r1, r8, r2
 800a334:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a338:	9206      	str	r2, [sp, #24]
 800a33a:	9a06      	ldr	r2, [sp, #24]
 800a33c:	3a30      	subs	r2, #48	@ 0x30
 800a33e:	2a09      	cmp	r2, #9
 800a340:	d9f6      	bls.n	800a330 <_svfprintf_r+0x250>
 800a342:	e72d      	b.n	800a1a0 <_svfprintf_r+0xc0>
 800a344:	f04f 0800 	mov.w	r8, #0
 800a348:	210a      	movs	r1, #10
 800a34a:	e7f6      	b.n	800a33a <_svfprintf_r+0x25a>
 800a34c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800a350:	e7c9      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a352:	2200      	movs	r2, #0
 800a354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a356:	920e      	str	r2, [sp, #56]	@ 0x38
 800a358:	210a      	movs	r1, #10
 800a35a:	9a06      	ldr	r2, [sp, #24]
 800a35c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a35e:	3a30      	subs	r2, #48	@ 0x30
 800a360:	fb01 2200 	mla	r2, r1, r0, r2
 800a364:	920e      	str	r2, [sp, #56]	@ 0x38
 800a366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a36a:	9206      	str	r2, [sp, #24]
 800a36c:	3a30      	subs	r2, #48	@ 0x30
 800a36e:	2a09      	cmp	r2, #9
 800a370:	d9f3      	bls.n	800a35a <_svfprintf_r+0x27a>
 800a372:	e715      	b.n	800a1a0 <_svfprintf_r+0xc0>
 800a374:	f045 0508 	orr.w	r5, r5, #8
 800a378:	e7b5      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a37a:	bf00      	nop
 800a37c:	f3af 8000 	nop.w
	...
 800a388:	0800e554 	.word	0x0800e554
 800a38c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	2b68      	cmp	r3, #104	@ 0x68
 800a392:	bf01      	itttt	eq
 800a394:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800a396:	3301      	addeq	r3, #1
 800a398:	930c      	streq	r3, [sp, #48]	@ 0x30
 800a39a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800a39e:	bf18      	it	ne
 800a3a0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800a3a4:	e79f      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a3a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b6c      	cmp	r3, #108	@ 0x6c
 800a3ac:	d105      	bne.n	800a3ba <_svfprintf_r+0x2da>
 800a3ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3b4:	f045 0520 	orr.w	r5, r5, #32
 800a3b8:	e795      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a3ba:	f045 0510 	orr.w	r5, r5, #16
 800a3be:	e792      	b.n	800a2e6 <_svfprintf_r+0x206>
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	f852 3b04 	ldr.w	r3, [r2], #4
 800a3c6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9207      	str	r2, [sp, #28]
 800a3ce:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a3d2:	469a      	mov	sl, r3
 800a3d4:	f04f 0801 	mov.w	r8, #1
 800a3d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3da:	461f      	mov	r7, r3
 800a3dc:	9308      	str	r3, [sp, #32]
 800a3de:	461e      	mov	r6, r3
 800a3e0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800a3e4:	e1d2      	b.n	800a78c <_svfprintf_r+0x6ac>
 800a3e6:	f045 0510 	orr.w	r5, r5, #16
 800a3ea:	06af      	lsls	r7, r5, #26
 800a3ec:	d512      	bpl.n	800a414 <_svfprintf_r+0x334>
 800a3ee:	3607      	adds	r6, #7
 800a3f0:	f026 0307 	bic.w	r3, r6, #7
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	685f      	ldr	r7, [r3, #4]
 800a3f8:	f852 6b08 	ldr.w	r6, [r2], #8
 800a3fc:	9207      	str	r2, [sp, #28]
 800a3fe:	2f00      	cmp	r7, #0
 800a400:	da06      	bge.n	800a410 <_svfprintf_r+0x330>
 800a402:	4276      	negs	r6, r6
 800a404:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800a408:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800a40c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a410:	2301      	movs	r3, #1
 800a412:	e37d      	b.n	800ab10 <_svfprintf_r+0xa30>
 800a414:	4633      	mov	r3, r6
 800a416:	06ee      	lsls	r6, r5, #27
 800a418:	f853 7b04 	ldr.w	r7, [r3], #4
 800a41c:	9307      	str	r3, [sp, #28]
 800a41e:	d502      	bpl.n	800a426 <_svfprintf_r+0x346>
 800a420:	463e      	mov	r6, r7
 800a422:	17ff      	asrs	r7, r7, #31
 800a424:	e7eb      	b.n	800a3fe <_svfprintf_r+0x31e>
 800a426:	0668      	lsls	r0, r5, #25
 800a428:	d503      	bpl.n	800a432 <_svfprintf_r+0x352>
 800a42a:	b23e      	sxth	r6, r7
 800a42c:	f347 37c0 	sbfx	r7, r7, #15, #1
 800a430:	e7e5      	b.n	800a3fe <_svfprintf_r+0x31e>
 800a432:	05a9      	lsls	r1, r5, #22
 800a434:	d5f4      	bpl.n	800a420 <_svfprintf_r+0x340>
 800a436:	b27e      	sxtb	r6, r7
 800a438:	f347 17c0 	sbfx	r7, r7, #7, #1
 800a43c:	e7df      	b.n	800a3fe <_svfprintf_r+0x31e>
 800a43e:	3607      	adds	r6, #7
 800a440:	f026 0307 	bic.w	r3, r6, #7
 800a444:	ecb3 7b02 	vldmia	r3!, {d7}
 800a448:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a44c:	9307      	str	r3, [sp, #28]
 800a44e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a450:	931a      	str	r3, [sp, #104]	@ 0x68
 800a452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a454:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a458:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a45a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800a45e:	4b81      	ldr	r3, [pc, #516]	@ (800a664 <_svfprintf_r+0x584>)
 800a460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a464:	f7f6 fb62 	bl	8000b2c <__aeabi_dcmpun>
 800a468:	bb10      	cbnz	r0, 800a4b0 <_svfprintf_r+0x3d0>
 800a46a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800a46e:	4b7d      	ldr	r3, [pc, #500]	@ (800a664 <_svfprintf_r+0x584>)
 800a470:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a474:	f7f6 fb3c 	bl	8000af0 <__aeabi_dcmple>
 800a478:	b9d0      	cbnz	r0, 800a4b0 <_svfprintf_r+0x3d0>
 800a47a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	f7f6 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800a486:	b110      	cbz	r0, 800a48e <_svfprintf_r+0x3ae>
 800a488:	232d      	movs	r3, #45	@ 0x2d
 800a48a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a48e:	4a76      	ldr	r2, [pc, #472]	@ (800a668 <_svfprintf_r+0x588>)
 800a490:	4b76      	ldr	r3, [pc, #472]	@ (800a66c <_svfprintf_r+0x58c>)
 800a492:	9906      	ldr	r1, [sp, #24]
 800a494:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800a498:	2947      	cmp	r1, #71	@ 0x47
 800a49a:	bfd4      	ite	le
 800a49c:	4691      	movle	r9, r2
 800a49e:	4699      	movgt	r9, r3
 800a4a0:	f04f 0a00 	mov.w	sl, #0
 800a4a4:	f04f 0803 	mov.w	r8, #3
 800a4a8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800a4ac:	f000 bfec 	b.w	800b488 <_svfprintf_r+0x13a8>
 800a4b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	f7f6 fb38 	bl	8000b2c <__aeabi_dcmpun>
 800a4bc:	4682      	mov	sl, r0
 800a4be:	b140      	cbz	r0, 800a4d2 <_svfprintf_r+0x3f2>
 800a4c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4c2:	4a6b      	ldr	r2, [pc, #428]	@ (800a670 <_svfprintf_r+0x590>)
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bfbc      	itt	lt
 800a4c8:	232d      	movlt	r3, #45	@ 0x2d
 800a4ca:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800a4ce:	4b69      	ldr	r3, [pc, #420]	@ (800a674 <_svfprintf_r+0x594>)
 800a4d0:	e7df      	b.n	800a492 <_svfprintf_r+0x3b2>
 800a4d2:	9b06      	ldr	r3, [sp, #24]
 800a4d4:	2b61      	cmp	r3, #97	@ 0x61
 800a4d6:	d025      	beq.n	800a524 <_svfprintf_r+0x444>
 800a4d8:	2b41      	cmp	r3, #65	@ 0x41
 800a4da:	d125      	bne.n	800a528 <_svfprintf_r+0x448>
 800a4dc:	2358      	movs	r3, #88	@ 0x58
 800a4de:	2230      	movs	r2, #48	@ 0x30
 800a4e0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800a4e4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800a4e8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800a4ec:	f045 0502 	orr.w	r5, r5, #2
 800a4f0:	f340 80a5 	ble.w	800a63e <_svfprintf_r+0x55e>
 800a4f4:	9803      	ldr	r0, [sp, #12]
 800a4f6:	f108 0101 	add.w	r1, r8, #1
 800a4fa:	f7ff fbab 	bl	8009c54 <_malloc_r>
 800a4fe:	4681      	mov	r9, r0
 800a500:	2800      	cmp	r0, #0
 800a502:	f040 80a1 	bne.w	800a648 <_svfprintf_r+0x568>
 800a506:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a50a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a50e:	f8ab 300c 	strh.w	r3, [fp, #12]
 800a512:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a516:	065b      	lsls	r3, r3, #25
 800a518:	f53f ae04 	bmi.w	800a124 <_svfprintf_r+0x44>
 800a51c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800a51e:	b053      	add	sp, #332	@ 0x14c
 800a520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a524:	2378      	movs	r3, #120	@ 0x78
 800a526:	e7da      	b.n	800a4de <_svfprintf_r+0x3fe>
 800a528:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800a52c:	f000 808e 	beq.w	800a64c <_svfprintf_r+0x56c>
 800a530:	9b06      	ldr	r3, [sp, #24]
 800a532:	f023 0320 	bic.w	r3, r3, #32
 800a536:	2b47      	cmp	r3, #71	@ 0x47
 800a538:	d105      	bne.n	800a546 <_svfprintf_r+0x466>
 800a53a:	f1b8 0f00 	cmp.w	r8, #0
 800a53e:	d102      	bne.n	800a546 <_svfprintf_r+0x466>
 800a540:	46c2      	mov	sl, r8
 800a542:	f04f 0801 	mov.w	r8, #1
 800a546:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800a54a:	9311      	str	r3, [sp, #68]	@ 0x44
 800a54c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	da7f      	bge.n	800a652 <_svfprintf_r+0x572>
 800a552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a554:	9314      	str	r3, [sp, #80]	@ 0x50
 800a556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a558:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a55c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a55e:	232d      	movs	r3, #45	@ 0x2d
 800a560:	931c      	str	r3, [sp, #112]	@ 0x70
 800a562:	9b06      	ldr	r3, [sp, #24]
 800a564:	f023 0320 	bic.w	r3, r3, #32
 800a568:	2b41      	cmp	r3, #65	@ 0x41
 800a56a:	9308      	str	r3, [sp, #32]
 800a56c:	f040 81e6 	bne.w	800a93c <_svfprintf_r+0x85c>
 800a570:	a820      	add	r0, sp, #128	@ 0x80
 800a572:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800a576:	f001 f8db 	bl	800b730 <frexp>
 800a57a:	2200      	movs	r2, #0
 800a57c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a580:	ec51 0b10 	vmov	r0, r1, d0
 800a584:	f7f6 f838 	bl	80005f8 <__aeabi_dmul>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a590:	2200      	movs	r2, #0
 800a592:	2300      	movs	r3, #0
 800a594:	f7f6 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 800a598:	b108      	cbz	r0, 800a59e <_svfprintf_r+0x4be>
 800a59a:	2301      	movs	r3, #1
 800a59c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a59e:	4a36      	ldr	r2, [pc, #216]	@ (800a678 <_svfprintf_r+0x598>)
 800a5a0:	4b36      	ldr	r3, [pc, #216]	@ (800a67c <_svfprintf_r+0x59c>)
 800a5a2:	9906      	ldr	r1, [sp, #24]
 800a5a4:	2961      	cmp	r1, #97	@ 0x61
 800a5a6:	bf18      	it	ne
 800a5a8:	461a      	movne	r2, r3
 800a5aa:	9210      	str	r2, [sp, #64]	@ 0x40
 800a5ac:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 800a5b0:	464e      	mov	r6, r9
 800a5b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b6:	4b32      	ldr	r3, [pc, #200]	@ (800a680 <_svfprintf_r+0x5a0>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f7f6 f81d 	bl	80005f8 <__aeabi_dmul>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5c6:	f7f6 fac7 	bl	8000b58 <__aeabi_d2iz>
 800a5ca:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a5cc:	f7f5 ffaa 	bl	8000524 <__aeabi_i2d>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5d8:	f7f5 fe56 	bl	8000288 <__aeabi_dsub>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a5e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5e8:	5c9b      	ldrb	r3, [r3, r2]
 800a5ea:	f806 3b01 	strb.w	r3, [r6], #1
 800a5ee:	1c7a      	adds	r2, r7, #1
 800a5f0:	d006      	beq.n	800a600 <_svfprintf_r+0x520>
 800a5f2:	1e7b      	subs	r3, r7, #1
 800a5f4:	931d      	str	r3, [sp, #116]	@ 0x74
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f7f6 fa65 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5fe:	b370      	cbz	r0, 800a65e <_svfprintf_r+0x57e>
 800a600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a604:	4b1f      	ldr	r3, [pc, #124]	@ (800a684 <_svfprintf_r+0x5a4>)
 800a606:	2200      	movs	r2, #0
 800a608:	f7f6 fa86 	bl	8000b18 <__aeabi_dcmpgt>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d13b      	bne.n	800a688 <_svfprintf_r+0x5a8>
 800a610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a614:	4b1b      	ldr	r3, [pc, #108]	@ (800a684 <_svfprintf_r+0x5a4>)
 800a616:	2200      	movs	r2, #0
 800a618:	f7f6 fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800a61c:	b110      	cbz	r0, 800a624 <_svfprintf_r+0x544>
 800a61e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a620:	07db      	lsls	r3, r3, #31
 800a622:	d431      	bmi.n	800a688 <_svfprintf_r+0x5a8>
 800a624:	4633      	mov	r3, r6
 800a626:	19f1      	adds	r1, r6, r7
 800a628:	2030      	movs	r0, #48	@ 0x30
 800a62a:	1aca      	subs	r2, r1, r3
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	f280 8182 	bge.w	800a936 <_svfprintf_r+0x856>
 800a632:	1c7b      	adds	r3, r7, #1
 800a634:	3701      	adds	r7, #1
 800a636:	bfb8      	it	lt
 800a638:	2300      	movlt	r3, #0
 800a63a:	441e      	add	r6, r3
 800a63c:	e038      	b.n	800a6b0 <_svfprintf_r+0x5d0>
 800a63e:	f04f 0a00 	mov.w	sl, #0
 800a642:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800a646:	e77e      	b.n	800a546 <_svfprintf_r+0x466>
 800a648:	4682      	mov	sl, r0
 800a64a:	e77c      	b.n	800a546 <_svfprintf_r+0x466>
 800a64c:	f04f 0806 	mov.w	r8, #6
 800a650:	e779      	b.n	800a546 <_svfprintf_r+0x466>
 800a652:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800a656:	2300      	movs	r3, #0
 800a658:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800a65c:	e780      	b.n	800a560 <_svfprintf_r+0x480>
 800a65e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800a660:	e7a7      	b.n	800a5b2 <_svfprintf_r+0x4d2>
 800a662:	bf00      	nop
 800a664:	7fefffff 	.word	0x7fefffff
 800a668:	0800e544 	.word	0x0800e544
 800a66c:	0800e548 	.word	0x0800e548
 800a670:	0800e54c 	.word	0x0800e54c
 800a674:	0800e550 	.word	0x0800e550
 800a678:	0800e554 	.word	0x0800e554
 800a67c:	0800e565 	.word	0x0800e565
 800a680:	40300000 	.word	0x40300000
 800a684:	3fe00000 	.word	0x3fe00000
 800a688:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a68a:	9624      	str	r6, [sp, #144]	@ 0x90
 800a68c:	7bd9      	ldrb	r1, [r3, #15]
 800a68e:	2030      	movs	r0, #48	@ 0x30
 800a690:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a692:	1e53      	subs	r3, r2, #1
 800a694:	9324      	str	r3, [sp, #144]	@ 0x90
 800a696:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800a69a:	428b      	cmp	r3, r1
 800a69c:	f000 8148 	beq.w	800a930 <_svfprintf_r+0x850>
 800a6a0:	2b39      	cmp	r3, #57	@ 0x39
 800a6a2:	bf0b      	itete	eq
 800a6a4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800a6a6:	3301      	addne	r3, #1
 800a6a8:	7a9b      	ldrbeq	r3, [r3, #10]
 800a6aa:	b2db      	uxtbne	r3, r3
 800a6ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a6b0:	eba6 0309 	sub.w	r3, r6, r9
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	9b08      	ldr	r3, [sp, #32]
 800a6b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a6ba:	2b47      	cmp	r3, #71	@ 0x47
 800a6bc:	f040 8187 	bne.w	800a9ce <_svfprintf_r+0x8ee>
 800a6c0:	1cf1      	adds	r1, r6, #3
 800a6c2:	db02      	blt.n	800a6ca <_svfprintf_r+0x5ea>
 800a6c4:	4546      	cmp	r6, r8
 800a6c6:	f340 81a5 	ble.w	800aa14 <_svfprintf_r+0x934>
 800a6ca:	9b06      	ldr	r3, [sp, #24]
 800a6cc:	3b02      	subs	r3, #2
 800a6ce:	9306      	str	r3, [sp, #24]
 800a6d0:	9906      	ldr	r1, [sp, #24]
 800a6d2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800a6d6:	f021 0120 	bic.w	r1, r1, #32
 800a6da:	2941      	cmp	r1, #65	@ 0x41
 800a6dc:	bf08      	it	eq
 800a6de:	320f      	addeq	r2, #15
 800a6e0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800a6e4:	bf06      	itte	eq
 800a6e6:	b2d2      	uxtbeq	r2, r2
 800a6e8:	2101      	moveq	r1, #1
 800a6ea:	2100      	movne	r1, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	9320      	str	r3, [sp, #128]	@ 0x80
 800a6f0:	bfb8      	it	lt
 800a6f2:	f1c6 0301 	rsblt	r3, r6, #1
 800a6f6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800a6fa:	bfb4      	ite	lt
 800a6fc:	222d      	movlt	r2, #45	@ 0x2d
 800a6fe:	222b      	movge	r2, #43	@ 0x2b
 800a700:	2b09      	cmp	r3, #9
 800a702:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800a706:	f340 8178 	ble.w	800a9fa <_svfprintf_r+0x91a>
 800a70a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800a70e:	270a      	movs	r7, #10
 800a710:	4602      	mov	r2, r0
 800a712:	fbb3 f6f7 	udiv	r6, r3, r7
 800a716:	fb07 3116 	mls	r1, r7, r6, r3
 800a71a:	3130      	adds	r1, #48	@ 0x30
 800a71c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a720:	4619      	mov	r1, r3
 800a722:	2963      	cmp	r1, #99	@ 0x63
 800a724:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 800a728:	4633      	mov	r3, r6
 800a72a:	dcf1      	bgt.n	800a710 <_svfprintf_r+0x630>
 800a72c:	3330      	adds	r3, #48	@ 0x30
 800a72e:	1e91      	subs	r1, r2, #2
 800a730:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a734:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800a738:	460b      	mov	r3, r1
 800a73a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800a73e:	4283      	cmp	r3, r0
 800a740:	f0c0 8156 	bcc.w	800a9f0 <_svfprintf_r+0x910>
 800a744:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800a748:	1a9b      	subs	r3, r3, r2
 800a74a:	4281      	cmp	r1, r0
 800a74c:	bf88      	it	hi
 800a74e:	2300      	movhi	r3, #0
 800a750:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800a754:	441a      	add	r2, r3
 800a756:	ab22      	add	r3, sp, #136	@ 0x88
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	9a04      	ldr	r2, [sp, #16]
 800a75c:	9318      	str	r3, [sp, #96]	@ 0x60
 800a75e:	2a01      	cmp	r2, #1
 800a760:	eb03 0802 	add.w	r8, r3, r2
 800a764:	dc01      	bgt.n	800a76a <_svfprintf_r+0x68a>
 800a766:	07ea      	lsls	r2, r5, #31
 800a768:	d501      	bpl.n	800a76e <_svfprintf_r+0x68e>
 800a76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a76c:	4498      	add	r8, r3
 800a76e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800a772:	2700      	movs	r7, #0
 800a774:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800a778:	9311      	str	r3, [sp, #68]	@ 0x44
 800a77a:	9708      	str	r7, [sp, #32]
 800a77c:	463e      	mov	r6, r7
 800a77e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a780:	2b00      	cmp	r3, #0
 800a782:	f040 818f 	bne.w	800aaa4 <_svfprintf_r+0x9c4>
 800a786:	2300      	movs	r3, #0
 800a788:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a78a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a78c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a78e:	4543      	cmp	r3, r8
 800a790:	bfb8      	it	lt
 800a792:	4643      	movlt	r3, r8
 800a794:	9311      	str	r3, [sp, #68]	@ 0x44
 800a796:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800a79a:	b113      	cbz	r3, 800a7a2 <_svfprintf_r+0x6c2>
 800a79c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a79e:	3301      	adds	r3, #1
 800a7a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7a2:	f015 0302 	ands.w	r3, r5, #2
 800a7a6:	931c      	str	r3, [sp, #112]	@ 0x70
 800a7a8:	bf1e      	ittt	ne
 800a7aa:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800a7ac:	3302      	addne	r3, #2
 800a7ae:	9311      	strne	r3, [sp, #68]	@ 0x44
 800a7b0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800a7b4:	931d      	str	r3, [sp, #116]	@ 0x74
 800a7b6:	d122      	bne.n	800a7fe <_svfprintf_r+0x71e>
 800a7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7c2:	dd1c      	ble.n	800a7fe <_svfprintf_r+0x71e>
 800a7c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a7c6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a7ca:	2810      	cmp	r0, #16
 800a7cc:	489e      	ldr	r0, [pc, #632]	@ (800aa48 <_svfprintf_r+0x968>)
 800a7ce:	6020      	str	r0, [r4, #0]
 800a7d0:	f102 0201 	add.w	r2, r2, #1
 800a7d4:	f104 0108 	add.w	r1, r4, #8
 800a7d8:	f300 8298 	bgt.w	800ad0c <_svfprintf_r+0xc2c>
 800a7dc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a7de:	6060      	str	r0, [r4, #4]
 800a7e0:	4403      	add	r3, r0
 800a7e2:	2a07      	cmp	r2, #7
 800a7e4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a7e8:	f340 82a5 	ble.w	800ad36 <_svfprintf_r+0xc56>
 800a7ec:	9803      	ldr	r0, [sp, #12]
 800a7ee:	aa26      	add	r2, sp, #152	@ 0x98
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	f002 f97d 	bl	800caf0 <__ssprint_r>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	f040 85ed 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800a7fc:	ac29      	add	r4, sp, #164	@ 0xa4
 800a7fe:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800a802:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a804:	b16a      	cbz	r2, 800a822 <_svfprintf_r+0x742>
 800a806:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800a80a:	6022      	str	r2, [r4, #0]
 800a80c:	2201      	movs	r2, #1
 800a80e:	4413      	add	r3, r2
 800a810:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a812:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a814:	6062      	str	r2, [r4, #4]
 800a816:	4413      	add	r3, r2
 800a818:	2b07      	cmp	r3, #7
 800a81a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a81c:	f300 828d 	bgt.w	800ad3a <_svfprintf_r+0xc5a>
 800a820:	3408      	adds	r4, #8
 800a822:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a824:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a826:	b162      	cbz	r2, 800a842 <_svfprintf_r+0x762>
 800a828:	aa1f      	add	r2, sp, #124	@ 0x7c
 800a82a:	6022      	str	r2, [r4, #0]
 800a82c:	2202      	movs	r2, #2
 800a82e:	4413      	add	r3, r2
 800a830:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a832:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a834:	6062      	str	r2, [r4, #4]
 800a836:	3301      	adds	r3, #1
 800a838:	2b07      	cmp	r3, #7
 800a83a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a83c:	f300 8287 	bgt.w	800ad4e <_svfprintf_r+0xc6e>
 800a840:	3408      	adds	r4, #8
 800a842:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a844:	2b80      	cmp	r3, #128	@ 0x80
 800a846:	d122      	bne.n	800a88e <_svfprintf_r+0x7ae>
 800a848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a84a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a852:	dd1c      	ble.n	800a88e <_svfprintf_r+0x7ae>
 800a854:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a856:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a85a:	2810      	cmp	r0, #16
 800a85c:	487b      	ldr	r0, [pc, #492]	@ (800aa4c <_svfprintf_r+0x96c>)
 800a85e:	6020      	str	r0, [r4, #0]
 800a860:	f102 0201 	add.w	r2, r2, #1
 800a864:	f104 0108 	add.w	r1, r4, #8
 800a868:	f300 827b 	bgt.w	800ad62 <_svfprintf_r+0xc82>
 800a86c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a86e:	6060      	str	r0, [r4, #4]
 800a870:	4403      	add	r3, r0
 800a872:	2a07      	cmp	r2, #7
 800a874:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a878:	f340 8288 	ble.w	800ad8c <_svfprintf_r+0xcac>
 800a87c:	9803      	ldr	r0, [sp, #12]
 800a87e:	aa26      	add	r2, sp, #152	@ 0x98
 800a880:	4659      	mov	r1, fp
 800a882:	f002 f935 	bl	800caf0 <__ssprint_r>
 800a886:	2800      	cmp	r0, #0
 800a888:	f040 85a5 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800a88c:	ac29      	add	r4, sp, #164	@ 0xa4
 800a88e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a890:	eba3 0308 	sub.w	r3, r3, r8
 800a894:	2b00      	cmp	r3, #0
 800a896:	9310      	str	r3, [sp, #64]	@ 0x40
 800a898:	dd1c      	ble.n	800a8d4 <_svfprintf_r+0x7f4>
 800a89a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a89c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a8a0:	2810      	cmp	r0, #16
 800a8a2:	486a      	ldr	r0, [pc, #424]	@ (800aa4c <_svfprintf_r+0x96c>)
 800a8a4:	6020      	str	r0, [r4, #0]
 800a8a6:	f102 0201 	add.w	r2, r2, #1
 800a8aa:	f104 0108 	add.w	r1, r4, #8
 800a8ae:	f300 826f 	bgt.w	800ad90 <_svfprintf_r+0xcb0>
 800a8b2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a8b4:	6060      	str	r0, [r4, #4]
 800a8b6:	4403      	add	r3, r0
 800a8b8:	2a07      	cmp	r2, #7
 800a8ba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a8be:	f340 827c 	ble.w	800adba <_svfprintf_r+0xcda>
 800a8c2:	9803      	ldr	r0, [sp, #12]
 800a8c4:	aa26      	add	r2, sp, #152	@ 0x98
 800a8c6:	4659      	mov	r1, fp
 800a8c8:	f002 f912 	bl	800caf0 <__ssprint_r>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f040 8582 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800a8d2:	ac29      	add	r4, sp, #164	@ 0xa4
 800a8d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a8d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8d8:	05ea      	lsls	r2, r5, #23
 800a8da:	f100 8275 	bmi.w	800adc8 <_svfprintf_r+0xce8>
 800a8de:	4443      	add	r3, r8
 800a8e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a8e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	2b07      	cmp	r3, #7
 800a8e8:	e9c4 9800 	strd	r9, r8, [r4]
 800a8ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a8ee:	f300 82b1 	bgt.w	800ae54 <_svfprintf_r+0xd74>
 800a8f2:	3408      	adds	r4, #8
 800a8f4:	076a      	lsls	r2, r5, #29
 800a8f6:	f100 8550 	bmi.w	800b39a <_svfprintf_r+0x12ba>
 800a8fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a8fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a900:	428a      	cmp	r2, r1
 800a902:	bfac      	ite	ge
 800a904:	189b      	addge	r3, r3, r2
 800a906:	185b      	addlt	r3, r3, r1
 800a908:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a90a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a90c:	b13b      	cbz	r3, 800a91e <_svfprintf_r+0x83e>
 800a90e:	9803      	ldr	r0, [sp, #12]
 800a910:	aa26      	add	r2, sp, #152	@ 0x98
 800a912:	4659      	mov	r1, fp
 800a914:	f002 f8ec 	bl	800caf0 <__ssprint_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	f040 855c 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800a91e:	2300      	movs	r3, #0
 800a920:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a922:	f1ba 0f00 	cmp.w	sl, #0
 800a926:	f040 8572 	bne.w	800b40e <_svfprintf_r+0x132e>
 800a92a:	9e07      	ldr	r6, [sp, #28]
 800a92c:	ac29      	add	r4, sp, #164	@ 0xa4
 800a92e:	e0c6      	b.n	800aabe <_svfprintf_r+0x9de>
 800a930:	f802 0c01 	strb.w	r0, [r2, #-1]
 800a934:	e6ac      	b.n	800a690 <_svfprintf_r+0x5b0>
 800a936:	f803 0b01 	strb.w	r0, [r3], #1
 800a93a:	e676      	b.n	800a62a <_svfprintf_r+0x54a>
 800a93c:	9b08      	ldr	r3, [sp, #32]
 800a93e:	2b46      	cmp	r3, #70	@ 0x46
 800a940:	d005      	beq.n	800a94e <_svfprintf_r+0x86e>
 800a942:	2b45      	cmp	r3, #69	@ 0x45
 800a944:	d11a      	bne.n	800a97c <_svfprintf_r+0x89c>
 800a946:	f108 0601 	add.w	r6, r8, #1
 800a94a:	2102      	movs	r1, #2
 800a94c:	e001      	b.n	800a952 <_svfprintf_r+0x872>
 800a94e:	4646      	mov	r6, r8
 800a950:	2103      	movs	r1, #3
 800a952:	ab24      	add	r3, sp, #144	@ 0x90
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	ab21      	add	r3, sp, #132	@ 0x84
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800a95e:	ab20      	add	r3, sp, #128	@ 0x80
 800a960:	9803      	ldr	r0, [sp, #12]
 800a962:	4632      	mov	r2, r6
 800a964:	f000 ffe4 	bl	800b930 <_dtoa_r>
 800a968:	9b08      	ldr	r3, [sp, #32]
 800a96a:	2b47      	cmp	r3, #71	@ 0x47
 800a96c:	4681      	mov	r9, r0
 800a96e:	d119      	bne.n	800a9a4 <_svfprintf_r+0x8c4>
 800a970:	07e8      	lsls	r0, r5, #31
 800a972:	d405      	bmi.n	800a980 <_svfprintf_r+0x8a0>
 800a974:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a976:	eba3 0309 	sub.w	r3, r3, r9
 800a97a:	e69b      	b.n	800a6b4 <_svfprintf_r+0x5d4>
 800a97c:	4646      	mov	r6, r8
 800a97e:	e7e4      	b.n	800a94a <_svfprintf_r+0x86a>
 800a980:	eb09 0706 	add.w	r7, r9, r6
 800a984:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800a988:	2200      	movs	r2, #0
 800a98a:	2300      	movs	r3, #0
 800a98c:	f7f6 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a990:	b100      	cbz	r0, 800a994 <_svfprintf_r+0x8b4>
 800a992:	9724      	str	r7, [sp, #144]	@ 0x90
 800a994:	2230      	movs	r2, #48	@ 0x30
 800a996:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a998:	429f      	cmp	r7, r3
 800a99a:	d9eb      	bls.n	800a974 <_svfprintf_r+0x894>
 800a99c:	1c59      	adds	r1, r3, #1
 800a99e:	9124      	str	r1, [sp, #144]	@ 0x90
 800a9a0:	701a      	strb	r2, [r3, #0]
 800a9a2:	e7f8      	b.n	800a996 <_svfprintf_r+0x8b6>
 800a9a4:	9b08      	ldr	r3, [sp, #32]
 800a9a6:	2b46      	cmp	r3, #70	@ 0x46
 800a9a8:	eb00 0706 	add.w	r7, r0, r6
 800a9ac:	d1ea      	bne.n	800a984 <_svfprintf_r+0x8a4>
 800a9ae:	7803      	ldrb	r3, [r0, #0]
 800a9b0:	2b30      	cmp	r3, #48	@ 0x30
 800a9b2:	d109      	bne.n	800a9c8 <_svfprintf_r+0x8e8>
 800a9b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f7f6 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9c0:	b910      	cbnz	r0, 800a9c8 <_svfprintf_r+0x8e8>
 800a9c2:	f1c6 0601 	rsb	r6, r6, #1
 800a9c6:	9620      	str	r6, [sp, #128]	@ 0x80
 800a9c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9ca:	441f      	add	r7, r3
 800a9cc:	e7da      	b.n	800a984 <_svfprintf_r+0x8a4>
 800a9ce:	9b08      	ldr	r3, [sp, #32]
 800a9d0:	2b46      	cmp	r3, #70	@ 0x46
 800a9d2:	f47f ae7d 	bne.w	800a6d0 <_svfprintf_r+0x5f0>
 800a9d6:	f005 0301 	and.w	r3, r5, #1
 800a9da:	2e00      	cmp	r6, #0
 800a9dc:	ea43 0308 	orr.w	r3, r3, r8
 800a9e0:	dd25      	ble.n	800aa2e <_svfprintf_r+0x94e>
 800a9e2:	b37b      	cbz	r3, 800aa44 <_svfprintf_r+0x964>
 800a9e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9e6:	18f3      	adds	r3, r6, r3
 800a9e8:	4498      	add	r8, r3
 800a9ea:	2366      	movs	r3, #102	@ 0x66
 800a9ec:	9306      	str	r3, [sp, #24]
 800a9ee:	e033      	b.n	800aa58 <_svfprintf_r+0x978>
 800a9f0:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a9f4:	f806 7f01 	strb.w	r7, [r6, #1]!
 800a9f8:	e6a1      	b.n	800a73e <_svfprintf_r+0x65e>
 800a9fa:	b941      	cbnz	r1, 800aa0e <_svfprintf_r+0x92e>
 800a9fc:	2230      	movs	r2, #48	@ 0x30
 800a9fe:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800aa02:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800aa06:	3330      	adds	r3, #48	@ 0x30
 800aa08:	f802 3b01 	strb.w	r3, [r2], #1
 800aa0c:	e6a3      	b.n	800a756 <_svfprintf_r+0x676>
 800aa0e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800aa12:	e7f8      	b.n	800aa06 <_svfprintf_r+0x926>
 800aa14:	9b04      	ldr	r3, [sp, #16]
 800aa16:	429e      	cmp	r6, r3
 800aa18:	da0d      	bge.n	800aa36 <_svfprintf_r+0x956>
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa1e:	2e00      	cmp	r6, #0
 800aa20:	eb03 0802 	add.w	r8, r3, r2
 800aa24:	dc0c      	bgt.n	800aa40 <_svfprintf_r+0x960>
 800aa26:	f1c6 0301 	rsb	r3, r6, #1
 800aa2a:	4498      	add	r8, r3
 800aa2c:	e008      	b.n	800aa40 <_svfprintf_r+0x960>
 800aa2e:	b17b      	cbz	r3, 800aa50 <_svfprintf_r+0x970>
 800aa30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa32:	3301      	adds	r3, #1
 800aa34:	e7d8      	b.n	800a9e8 <_svfprintf_r+0x908>
 800aa36:	07eb      	lsls	r3, r5, #31
 800aa38:	d521      	bpl.n	800aa7e <_svfprintf_r+0x99e>
 800aa3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa3c:	eb06 0803 	add.w	r8, r6, r3
 800aa40:	2367      	movs	r3, #103	@ 0x67
 800aa42:	e7d3      	b.n	800a9ec <_svfprintf_r+0x90c>
 800aa44:	46b0      	mov	r8, r6
 800aa46:	e7d0      	b.n	800a9ea <_svfprintf_r+0x90a>
 800aa48:	0800e588 	.word	0x0800e588
 800aa4c:	0800e578 	.word	0x0800e578
 800aa50:	2366      	movs	r3, #102	@ 0x66
 800aa52:	9306      	str	r3, [sp, #24]
 800aa54:	f04f 0801 	mov.w	r8, #1
 800aa58:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800aa5c:	9308      	str	r3, [sp, #32]
 800aa5e:	d01f      	beq.n	800aaa0 <_svfprintf_r+0x9c0>
 800aa60:	2700      	movs	r7, #0
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	9708      	str	r7, [sp, #32]
 800aa66:	f77f ae8a 	ble.w	800a77e <_svfprintf_r+0x69e>
 800aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2bff      	cmp	r3, #255	@ 0xff
 800aa70:	d107      	bne.n	800aa82 <_svfprintf_r+0x9a2>
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa76:	443b      	add	r3, r7
 800aa78:	fb02 8803 	mla	r8, r2, r3, r8
 800aa7c:	e67f      	b.n	800a77e <_svfprintf_r+0x69e>
 800aa7e:	46b0      	mov	r8, r6
 800aa80:	e7de      	b.n	800aa40 <_svfprintf_r+0x960>
 800aa82:	42b3      	cmp	r3, r6
 800aa84:	daf5      	bge.n	800aa72 <_svfprintf_r+0x992>
 800aa86:	1af6      	subs	r6, r6, r3
 800aa88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	b133      	cbz	r3, 800aa9c <_svfprintf_r+0x9bc>
 800aa8e:	9b08      	ldr	r3, [sp, #32]
 800aa90:	3301      	adds	r3, #1
 800aa92:	9308      	str	r3, [sp, #32]
 800aa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa96:	3301      	adds	r3, #1
 800aa98:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa9a:	e7e6      	b.n	800aa6a <_svfprintf_r+0x98a>
 800aa9c:	3701      	adds	r7, #1
 800aa9e:	e7e4      	b.n	800aa6a <_svfprintf_r+0x98a>
 800aaa0:	9f08      	ldr	r7, [sp, #32]
 800aaa2:	e66c      	b.n	800a77e <_svfprintf_r+0x69e>
 800aaa4:	232d      	movs	r3, #45	@ 0x2d
 800aaa6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800aaaa:	e66c      	b.n	800a786 <_svfprintf_r+0x6a6>
 800aaac:	06af      	lsls	r7, r5, #26
 800aaae:	d50a      	bpl.n	800aac6 <_svfprintf_r+0x9e6>
 800aab0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aab2:	6833      	ldr	r3, [r6, #0]
 800aab4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aab6:	17d2      	asrs	r2, r2, #31
 800aab8:	e9c3 1200 	strd	r1, r2, [r3]
 800aabc:	3604      	adds	r6, #4
 800aabe:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800aac2:	f7ff bb46 	b.w	800a152 <_svfprintf_r+0x72>
 800aac6:	06e8      	lsls	r0, r5, #27
 800aac8:	d503      	bpl.n	800aad2 <_svfprintf_r+0x9f2>
 800aaca:	6833      	ldr	r3, [r6, #0]
 800aacc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	e7f4      	b.n	800aabc <_svfprintf_r+0x9dc>
 800aad2:	0669      	lsls	r1, r5, #25
 800aad4:	d503      	bpl.n	800aade <_svfprintf_r+0x9fe>
 800aad6:	6833      	ldr	r3, [r6, #0]
 800aad8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aada:	801a      	strh	r2, [r3, #0]
 800aadc:	e7ee      	b.n	800aabc <_svfprintf_r+0x9dc>
 800aade:	05aa      	lsls	r2, r5, #22
 800aae0:	d5f3      	bpl.n	800aaca <_svfprintf_r+0x9ea>
 800aae2:	6833      	ldr	r3, [r6, #0]
 800aae4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aae6:	701a      	strb	r2, [r3, #0]
 800aae8:	e7e8      	b.n	800aabc <_svfprintf_r+0x9dc>
 800aaea:	f045 0510 	orr.w	r5, r5, #16
 800aaee:	f015 0320 	ands.w	r3, r5, #32
 800aaf2:	d020      	beq.n	800ab36 <_svfprintf_r+0xa56>
 800aaf4:	3607      	adds	r6, #7
 800aaf6:	f026 0307 	bic.w	r3, r6, #7
 800aafa:	461a      	mov	r2, r3
 800aafc:	685f      	ldr	r7, [r3, #4]
 800aafe:	f852 6b08 	ldr.w	r6, [r2], #8
 800ab02:	9207      	str	r2, [sp, #28]
 800ab04:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ab08:	2300      	movs	r3, #0
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800ab10:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800ab14:	f000 848c 	beq.w	800b430 <_svfprintf_r+0x1350>
 800ab18:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800ab1c:	9208      	str	r2, [sp, #32]
 800ab1e:	ea56 0207 	orrs.w	r2, r6, r7
 800ab22:	f040 848a 	bne.w	800b43a <_svfprintf_r+0x135a>
 800ab26:	f1b8 0f00 	cmp.w	r8, #0
 800ab2a:	f000 80db 	beq.w	800ace4 <_svfprintf_r+0xc04>
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	f040 8486 	bne.w	800b440 <_svfprintf_r+0x1360>
 800ab34:	e083      	b.n	800ac3e <_svfprintf_r+0xb5e>
 800ab36:	4632      	mov	r2, r6
 800ab38:	f015 0710 	ands.w	r7, r5, #16
 800ab3c:	f852 6b04 	ldr.w	r6, [r2], #4
 800ab40:	9207      	str	r2, [sp, #28]
 800ab42:	d001      	beq.n	800ab48 <_svfprintf_r+0xa68>
 800ab44:	461f      	mov	r7, r3
 800ab46:	e7dd      	b.n	800ab04 <_svfprintf_r+0xa24>
 800ab48:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ab4c:	d001      	beq.n	800ab52 <_svfprintf_r+0xa72>
 800ab4e:	b2b6      	uxth	r6, r6
 800ab50:	e7d8      	b.n	800ab04 <_svfprintf_r+0xa24>
 800ab52:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ab56:	d0d5      	beq.n	800ab04 <_svfprintf_r+0xa24>
 800ab58:	b2f6      	uxtb	r6, r6
 800ab5a:	e7f3      	b.n	800ab44 <_svfprintf_r+0xa64>
 800ab5c:	4633      	mov	r3, r6
 800ab5e:	2278      	movs	r2, #120	@ 0x78
 800ab60:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab64:	9307      	str	r3, [sp, #28]
 800ab66:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ab6a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800ab6e:	4b94      	ldr	r3, [pc, #592]	@ (800adc0 <_svfprintf_r+0xce0>)
 800ab70:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab72:	2700      	movs	r7, #0
 800ab74:	f045 0502 	orr.w	r5, r5, #2
 800ab78:	2302      	movs	r3, #2
 800ab7a:	9206      	str	r2, [sp, #24]
 800ab7c:	e7c5      	b.n	800ab0a <_svfprintf_r+0xa2a>
 800ab7e:	4633      	mov	r3, r6
 800ab80:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800ab84:	f853 9b04 	ldr.w	r9, [r3], #4
 800ab88:	9307      	str	r3, [sp, #28]
 800ab8a:	f04f 0600 	mov.w	r6, #0
 800ab8e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800ab92:	d00f      	beq.n	800abb4 <_svfprintf_r+0xad4>
 800ab94:	4642      	mov	r2, r8
 800ab96:	4631      	mov	r1, r6
 800ab98:	4648      	mov	r0, r9
 800ab9a:	f7f5 fb21 	bl	80001e0 <memchr>
 800ab9e:	4682      	mov	sl, r0
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f43f ac81 	beq.w	800a4a8 <_svfprintf_r+0x3c8>
 800aba6:	eba0 0809 	sub.w	r8, r0, r9
 800abaa:	46b2      	mov	sl, r6
 800abac:	9610      	str	r6, [sp, #64]	@ 0x40
 800abae:	4637      	mov	r7, r6
 800abb0:	9608      	str	r6, [sp, #32]
 800abb2:	e5eb      	b.n	800a78c <_svfprintf_r+0x6ac>
 800abb4:	4648      	mov	r0, r9
 800abb6:	f7f5 fb0b 	bl	80001d0 <strlen>
 800abba:	46b2      	mov	sl, r6
 800abbc:	4680      	mov	r8, r0
 800abbe:	e473      	b.n	800a4a8 <_svfprintf_r+0x3c8>
 800abc0:	f045 0510 	orr.w	r5, r5, #16
 800abc4:	f015 0320 	ands.w	r3, r5, #32
 800abc8:	d009      	beq.n	800abde <_svfprintf_r+0xafe>
 800abca:	3607      	adds	r6, #7
 800abcc:	f026 0307 	bic.w	r3, r6, #7
 800abd0:	461a      	mov	r2, r3
 800abd2:	685f      	ldr	r7, [r3, #4]
 800abd4:	f852 6b08 	ldr.w	r6, [r2], #8
 800abd8:	9207      	str	r2, [sp, #28]
 800abda:	2301      	movs	r3, #1
 800abdc:	e795      	b.n	800ab0a <_svfprintf_r+0xa2a>
 800abde:	4632      	mov	r2, r6
 800abe0:	f015 0710 	ands.w	r7, r5, #16
 800abe4:	f852 6b04 	ldr.w	r6, [r2], #4
 800abe8:	9207      	str	r2, [sp, #28]
 800abea:	d001      	beq.n	800abf0 <_svfprintf_r+0xb10>
 800abec:	461f      	mov	r7, r3
 800abee:	e7f4      	b.n	800abda <_svfprintf_r+0xafa>
 800abf0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800abf4:	d001      	beq.n	800abfa <_svfprintf_r+0xb1a>
 800abf6:	b2b6      	uxth	r6, r6
 800abf8:	e7ef      	b.n	800abda <_svfprintf_r+0xafa>
 800abfa:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800abfe:	d0ec      	beq.n	800abda <_svfprintf_r+0xafa>
 800ac00:	b2f6      	uxtb	r6, r6
 800ac02:	e7f3      	b.n	800abec <_svfprintf_r+0xb0c>
 800ac04:	4b6f      	ldr	r3, [pc, #444]	@ (800adc4 <_svfprintf_r+0xce4>)
 800ac06:	f7ff bb39 	b.w	800a27c <_svfprintf_r+0x19c>
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	f015 0710 	ands.w	r7, r5, #16
 800ac10:	f852 6b04 	ldr.w	r6, [r2], #4
 800ac14:	9207      	str	r2, [sp, #28]
 800ac16:	d002      	beq.n	800ac1e <_svfprintf_r+0xb3e>
 800ac18:	461f      	mov	r7, r3
 800ac1a:	f7ff bb3c 	b.w	800a296 <_svfprintf_r+0x1b6>
 800ac1e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ac22:	d002      	beq.n	800ac2a <_svfprintf_r+0xb4a>
 800ac24:	b2b6      	uxth	r6, r6
 800ac26:	f7ff bb36 	b.w	800a296 <_svfprintf_r+0x1b6>
 800ac2a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ac2e:	f43f ab32 	beq.w	800a296 <_svfprintf_r+0x1b6>
 800ac32:	b2f6      	uxtb	r6, r6
 800ac34:	e7f0      	b.n	800ac18 <_svfprintf_r+0xb38>
 800ac36:	2e0a      	cmp	r6, #10
 800ac38:	f177 0300 	sbcs.w	r3, r7, #0
 800ac3c:	d207      	bcs.n	800ac4e <_svfprintf_r+0xb6e>
 800ac3e:	3630      	adds	r6, #48	@ 0x30
 800ac40:	b2f6      	uxtb	r6, r6
 800ac42:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800ac46:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800ac4a:	f000 bc15 	b.w	800b478 <_svfprintf_r+0x1398>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9304      	str	r3, [sp, #16]
 800ac52:	9b08      	ldr	r3, [sp, #32]
 800ac54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac58:	ad52      	add	r5, sp, #328	@ 0x148
 800ac5a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac5c:	220a      	movs	r2, #10
 800ac5e:	2300      	movs	r3, #0
 800ac60:	4630      	mov	r0, r6
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f6 f810 	bl	8000c88 <__aeabi_uldivmod>
 800ac68:	9b04      	ldr	r3, [sp, #16]
 800ac6a:	9011      	str	r0, [sp, #68]	@ 0x44
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	9304      	str	r3, [sp, #16]
 800ac70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac72:	3230      	adds	r2, #48	@ 0x30
 800ac74:	468a      	mov	sl, r1
 800ac76:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ac7a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800ac7e:	b1d3      	cbz	r3, 800acb6 <_svfprintf_r+0xbd6>
 800ac80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac82:	9a04      	ldr	r2, [sp, #16]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d115      	bne.n	800acb6 <_svfprintf_r+0xbd6>
 800ac8a:	2aff      	cmp	r2, #255	@ 0xff
 800ac8c:	d013      	beq.n	800acb6 <_svfprintf_r+0xbd6>
 800ac8e:	2e0a      	cmp	r6, #10
 800ac90:	f177 0300 	sbcs.w	r3, r7, #0
 800ac94:	d30f      	bcc.n	800acb6 <_svfprintf_r+0xbd6>
 800ac96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac98:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ac9a:	eba9 0903 	sub.w	r9, r9, r3
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4648      	mov	r0, r9
 800aca2:	f000 fcfe 	bl	800b6a2 <strncpy>
 800aca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	b11b      	cbz	r3, 800acb4 <_svfprintf_r+0xbd4>
 800acac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acae:	3301      	adds	r3, #1
 800acb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800acb2:	2300      	movs	r3, #0
 800acb4:	9304      	str	r3, [sp, #16]
 800acb6:	2e0a      	cmp	r6, #10
 800acb8:	f177 0700 	sbcs.w	r7, r7, #0
 800acbc:	f0c0 83dc 	bcc.w	800b478 <_svfprintf_r+0x1398>
 800acc0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800acc2:	4657      	mov	r7, sl
 800acc4:	464d      	mov	r5, r9
 800acc6:	e7c9      	b.n	800ac5c <_svfprintf_r+0xb7c>
 800acc8:	f006 030f 	and.w	r3, r6, #15
 800accc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acce:	0936      	lsrs	r6, r6, #4
 800acd0:	5cd3      	ldrb	r3, [r2, r3]
 800acd2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800acd6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800acda:	093f      	lsrs	r7, r7, #4
 800acdc:	ea56 0307 	orrs.w	r3, r6, r7
 800ace0:	d1f2      	bne.n	800acc8 <_svfprintf_r+0xbe8>
 800ace2:	e3c9      	b.n	800b478 <_svfprintf_r+0x1398>
 800ace4:	b91b      	cbnz	r3, 800acee <_svfprintf_r+0xc0e>
 800ace6:	07e9      	lsls	r1, r5, #31
 800ace8:	d501      	bpl.n	800acee <_svfprintf_r+0xc0e>
 800acea:	2630      	movs	r6, #48	@ 0x30
 800acec:	e7a9      	b.n	800ac42 <_svfprintf_r+0xb62>
 800acee:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800acf2:	e3c1      	b.n	800b478 <_svfprintf_r+0x1398>
 800acf4:	9b06      	ldr	r3, [sp, #24]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 838f 	beq.w	800b41a <_svfprintf_r+0x133a>
 800acfc:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800ad00:	2300      	movs	r3, #0
 800ad02:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800ad06:	9607      	str	r6, [sp, #28]
 800ad08:	f7ff bb63 	b.w	800a3d2 <_svfprintf_r+0x2f2>
 800ad0c:	2010      	movs	r0, #16
 800ad0e:	4403      	add	r3, r0
 800ad10:	2a07      	cmp	r2, #7
 800ad12:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ad16:	6060      	str	r0, [r4, #4]
 800ad18:	dd08      	ble.n	800ad2c <_svfprintf_r+0xc4c>
 800ad1a:	9803      	ldr	r0, [sp, #12]
 800ad1c:	aa26      	add	r2, sp, #152	@ 0x98
 800ad1e:	4659      	mov	r1, fp
 800ad20:	f001 fee6 	bl	800caf0 <__ssprint_r>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 8356 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800ad2a:	a929      	add	r1, sp, #164	@ 0xa4
 800ad2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad2e:	3b10      	subs	r3, #16
 800ad30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad32:	460c      	mov	r4, r1
 800ad34:	e546      	b.n	800a7c4 <_svfprintf_r+0x6e4>
 800ad36:	460c      	mov	r4, r1
 800ad38:	e561      	b.n	800a7fe <_svfprintf_r+0x71e>
 800ad3a:	9803      	ldr	r0, [sp, #12]
 800ad3c:	aa26      	add	r2, sp, #152	@ 0x98
 800ad3e:	4659      	mov	r1, fp
 800ad40:	f001 fed6 	bl	800caf0 <__ssprint_r>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	f040 8346 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800ad4a:	ac29      	add	r4, sp, #164	@ 0xa4
 800ad4c:	e569      	b.n	800a822 <_svfprintf_r+0x742>
 800ad4e:	9803      	ldr	r0, [sp, #12]
 800ad50:	aa26      	add	r2, sp, #152	@ 0x98
 800ad52:	4659      	mov	r1, fp
 800ad54:	f001 fecc 	bl	800caf0 <__ssprint_r>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f040 833c 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800ad5e:	ac29      	add	r4, sp, #164	@ 0xa4
 800ad60:	e56f      	b.n	800a842 <_svfprintf_r+0x762>
 800ad62:	2010      	movs	r0, #16
 800ad64:	4403      	add	r3, r0
 800ad66:	2a07      	cmp	r2, #7
 800ad68:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ad6c:	6060      	str	r0, [r4, #4]
 800ad6e:	dd08      	ble.n	800ad82 <_svfprintf_r+0xca2>
 800ad70:	9803      	ldr	r0, [sp, #12]
 800ad72:	aa26      	add	r2, sp, #152	@ 0x98
 800ad74:	4659      	mov	r1, fp
 800ad76:	f001 febb 	bl	800caf0 <__ssprint_r>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f040 832b 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800ad80:	a929      	add	r1, sp, #164	@ 0xa4
 800ad82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad84:	3b10      	subs	r3, #16
 800ad86:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad88:	460c      	mov	r4, r1
 800ad8a:	e563      	b.n	800a854 <_svfprintf_r+0x774>
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	e57e      	b.n	800a88e <_svfprintf_r+0x7ae>
 800ad90:	2010      	movs	r0, #16
 800ad92:	4403      	add	r3, r0
 800ad94:	2a07      	cmp	r2, #7
 800ad96:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ad9a:	6060      	str	r0, [r4, #4]
 800ad9c:	dd08      	ble.n	800adb0 <_svfprintf_r+0xcd0>
 800ad9e:	9803      	ldr	r0, [sp, #12]
 800ada0:	aa26      	add	r2, sp, #152	@ 0x98
 800ada2:	4659      	mov	r1, fp
 800ada4:	f001 fea4 	bl	800caf0 <__ssprint_r>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	f040 8314 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800adae:	a929      	add	r1, sp, #164	@ 0xa4
 800adb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adb2:	3b10      	subs	r3, #16
 800adb4:	9310      	str	r3, [sp, #64]	@ 0x40
 800adb6:	460c      	mov	r4, r1
 800adb8:	e56f      	b.n	800a89a <_svfprintf_r+0x7ba>
 800adba:	460c      	mov	r4, r1
 800adbc:	e58a      	b.n	800a8d4 <_svfprintf_r+0x7f4>
 800adbe:	bf00      	nop
 800adc0:	0800e554 	.word	0x0800e554
 800adc4:	0800e565 	.word	0x0800e565
 800adc8:	9b06      	ldr	r3, [sp, #24]
 800adca:	2b65      	cmp	r3, #101	@ 0x65
 800adcc:	f340 8246 	ble.w	800b25c <_svfprintf_r+0x117c>
 800add0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800add4:	2200      	movs	r2, #0
 800add6:	2300      	movs	r3, #0
 800add8:	f7f5 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 800addc:	2800      	cmp	r0, #0
 800adde:	d06a      	beq.n	800aeb6 <_svfprintf_r+0xdd6>
 800ade0:	4b73      	ldr	r3, [pc, #460]	@ (800afb0 <_svfprintf_r+0xed0>)
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	2301      	movs	r3, #1
 800ade6:	6063      	str	r3, [r4, #4]
 800ade8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adea:	3301      	adds	r3, #1
 800adec:	9328      	str	r3, [sp, #160]	@ 0xa0
 800adee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800adf0:	3301      	adds	r3, #1
 800adf2:	2b07      	cmp	r3, #7
 800adf4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800adf6:	dc37      	bgt.n	800ae68 <_svfprintf_r+0xd88>
 800adf8:	3408      	adds	r4, #8
 800adfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800adfc:	9a04      	ldr	r2, [sp, #16]
 800adfe:	4293      	cmp	r3, r2
 800ae00:	db02      	blt.n	800ae08 <_svfprintf_r+0xd28>
 800ae02:	07ef      	lsls	r7, r5, #31
 800ae04:	f57f ad76 	bpl.w	800a8f4 <_svfprintf_r+0x814>
 800ae08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae0a:	6023      	str	r3, [r4, #0]
 800ae0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae10:	6063      	str	r3, [r4, #4]
 800ae12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ae14:	4413      	add	r3, r2
 800ae16:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ae18:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	2b07      	cmp	r3, #7
 800ae1e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ae20:	dc2c      	bgt.n	800ae7c <_svfprintf_r+0xd9c>
 800ae22:	3408      	adds	r4, #8
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	1e5e      	subs	r6, r3, #1
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	f77f ad63 	ble.w	800a8f4 <_svfprintf_r+0x814>
 800ae2e:	4f61      	ldr	r7, [pc, #388]	@ (800afb4 <_svfprintf_r+0xed4>)
 800ae30:	f04f 0810 	mov.w	r8, #16
 800ae34:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800ae38:	2e10      	cmp	r6, #16
 800ae3a:	f103 0301 	add.w	r3, r3, #1
 800ae3e:	f104 0108 	add.w	r1, r4, #8
 800ae42:	6027      	str	r7, [r4, #0]
 800ae44:	dc24      	bgt.n	800ae90 <_svfprintf_r+0xdb0>
 800ae46:	6066      	str	r6, [r4, #4]
 800ae48:	2b07      	cmp	r3, #7
 800ae4a:	4416      	add	r6, r2
 800ae4c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800ae50:	f340 82a0 	ble.w	800b394 <_svfprintf_r+0x12b4>
 800ae54:	9803      	ldr	r0, [sp, #12]
 800ae56:	aa26      	add	r2, sp, #152	@ 0x98
 800ae58:	4659      	mov	r1, fp
 800ae5a:	f001 fe49 	bl	800caf0 <__ssprint_r>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	f040 82b9 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800ae64:	ac29      	add	r4, sp, #164	@ 0xa4
 800ae66:	e545      	b.n	800a8f4 <_svfprintf_r+0x814>
 800ae68:	9803      	ldr	r0, [sp, #12]
 800ae6a:	aa26      	add	r2, sp, #152	@ 0x98
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	f001 fe3f 	bl	800caf0 <__ssprint_r>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f040 82af 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800ae78:	ac29      	add	r4, sp, #164	@ 0xa4
 800ae7a:	e7be      	b.n	800adfa <_svfprintf_r+0xd1a>
 800ae7c:	9803      	ldr	r0, [sp, #12]
 800ae7e:	aa26      	add	r2, sp, #152	@ 0x98
 800ae80:	4659      	mov	r1, fp
 800ae82:	f001 fe35 	bl	800caf0 <__ssprint_r>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f040 82a5 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800ae8c:	ac29      	add	r4, sp, #164	@ 0xa4
 800ae8e:	e7c9      	b.n	800ae24 <_svfprintf_r+0xd44>
 800ae90:	3210      	adds	r2, #16
 800ae92:	2b07      	cmp	r3, #7
 800ae94:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800ae98:	f8c4 8004 	str.w	r8, [r4, #4]
 800ae9c:	dd08      	ble.n	800aeb0 <_svfprintf_r+0xdd0>
 800ae9e:	9803      	ldr	r0, [sp, #12]
 800aea0:	aa26      	add	r2, sp, #152	@ 0x98
 800aea2:	4659      	mov	r1, fp
 800aea4:	f001 fe24 	bl	800caf0 <__ssprint_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	f040 8294 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800aeae:	a929      	add	r1, sp, #164	@ 0xa4
 800aeb0:	3e10      	subs	r6, #16
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	e7be      	b.n	800ae34 <_svfprintf_r+0xd54>
 800aeb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc7d      	bgt.n	800afb8 <_svfprintf_r+0xed8>
 800aebc:	4b3c      	ldr	r3, [pc, #240]	@ (800afb0 <_svfprintf_r+0xed0>)
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	2301      	movs	r3, #1
 800aec2:	6063      	str	r3, [r4, #4]
 800aec4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aec6:	3301      	adds	r3, #1
 800aec8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800aeca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800aecc:	3301      	adds	r3, #1
 800aece:	2b07      	cmp	r3, #7
 800aed0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800aed2:	dc46      	bgt.n	800af62 <_svfprintf_r+0xe82>
 800aed4:	3408      	adds	r4, #8
 800aed6:	9904      	ldr	r1, [sp, #16]
 800aed8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aeda:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800aedc:	430b      	orrs	r3, r1
 800aede:	f005 0101 	and.w	r1, r5, #1
 800aee2:	430b      	orrs	r3, r1
 800aee4:	f43f ad06 	beq.w	800a8f4 <_svfprintf_r+0x814>
 800aee8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeee:	6063      	str	r3, [r4, #4]
 800aef0:	441a      	add	r2, r3
 800aef2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800aef4:	9228      	str	r2, [sp, #160]	@ 0xa0
 800aef6:	3301      	adds	r3, #1
 800aef8:	2b07      	cmp	r3, #7
 800aefa:	9327      	str	r3, [sp, #156]	@ 0x9c
 800aefc:	dc3b      	bgt.n	800af76 <_svfprintf_r+0xe96>
 800aefe:	f104 0308 	add.w	r3, r4, #8
 800af02:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800af04:	2e00      	cmp	r6, #0
 800af06:	da1b      	bge.n	800af40 <_svfprintf_r+0xe60>
 800af08:	4f2a      	ldr	r7, [pc, #168]	@ (800afb4 <_svfprintf_r+0xed4>)
 800af0a:	4276      	negs	r6, r6
 800af0c:	461a      	mov	r2, r3
 800af0e:	2410      	movs	r4, #16
 800af10:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800af14:	2e10      	cmp	r6, #16
 800af16:	f101 0101 	add.w	r1, r1, #1
 800af1a:	f103 0308 	add.w	r3, r3, #8
 800af1e:	6017      	str	r7, [r2, #0]
 800af20:	dc33      	bgt.n	800af8a <_svfprintf_r+0xeaa>
 800af22:	6056      	str	r6, [r2, #4]
 800af24:	2907      	cmp	r1, #7
 800af26:	4406      	add	r6, r0
 800af28:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800af2c:	dd08      	ble.n	800af40 <_svfprintf_r+0xe60>
 800af2e:	9803      	ldr	r0, [sp, #12]
 800af30:	aa26      	add	r2, sp, #152	@ 0x98
 800af32:	4659      	mov	r1, fp
 800af34:	f001 fddc 	bl	800caf0 <__ssprint_r>
 800af38:	2800      	cmp	r0, #0
 800af3a:	f040 824c 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800af3e:	ab29      	add	r3, sp, #164	@ 0xa4
 800af40:	9a04      	ldr	r2, [sp, #16]
 800af42:	9904      	ldr	r1, [sp, #16]
 800af44:	605a      	str	r2, [r3, #4]
 800af46:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800af48:	f8c3 9000 	str.w	r9, [r3]
 800af4c:	440a      	add	r2, r1
 800af4e:	9228      	str	r2, [sp, #160]	@ 0xa0
 800af50:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800af52:	3201      	adds	r2, #1
 800af54:	2a07      	cmp	r2, #7
 800af56:	9227      	str	r2, [sp, #156]	@ 0x9c
 800af58:	f73f af7c 	bgt.w	800ae54 <_svfprintf_r+0xd74>
 800af5c:	f103 0408 	add.w	r4, r3, #8
 800af60:	e4c8      	b.n	800a8f4 <_svfprintf_r+0x814>
 800af62:	9803      	ldr	r0, [sp, #12]
 800af64:	aa26      	add	r2, sp, #152	@ 0x98
 800af66:	4659      	mov	r1, fp
 800af68:	f001 fdc2 	bl	800caf0 <__ssprint_r>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f040 8232 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800af72:	ac29      	add	r4, sp, #164	@ 0xa4
 800af74:	e7af      	b.n	800aed6 <_svfprintf_r+0xdf6>
 800af76:	9803      	ldr	r0, [sp, #12]
 800af78:	aa26      	add	r2, sp, #152	@ 0x98
 800af7a:	4659      	mov	r1, fp
 800af7c:	f001 fdb8 	bl	800caf0 <__ssprint_r>
 800af80:	2800      	cmp	r0, #0
 800af82:	f040 8228 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800af86:	ab29      	add	r3, sp, #164	@ 0xa4
 800af88:	e7bb      	b.n	800af02 <_svfprintf_r+0xe22>
 800af8a:	3010      	adds	r0, #16
 800af8c:	2907      	cmp	r1, #7
 800af8e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800af92:	6054      	str	r4, [r2, #4]
 800af94:	dd08      	ble.n	800afa8 <_svfprintf_r+0xec8>
 800af96:	9803      	ldr	r0, [sp, #12]
 800af98:	aa26      	add	r2, sp, #152	@ 0x98
 800af9a:	4659      	mov	r1, fp
 800af9c:	f001 fda8 	bl	800caf0 <__ssprint_r>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	f040 8218 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800afa6:	ab29      	add	r3, sp, #164	@ 0xa4
 800afa8:	3e10      	subs	r6, #16
 800afaa:	461a      	mov	r2, r3
 800afac:	e7b0      	b.n	800af10 <_svfprintf_r+0xe30>
 800afae:	bf00      	nop
 800afb0:	0800e576 	.word	0x0800e576
 800afb4:	0800e578 	.word	0x0800e578
 800afb8:	9b04      	ldr	r3, [sp, #16]
 800afba:	444b      	add	r3, r9
 800afbc:	9306      	str	r3, [sp, #24]
 800afbe:	9b04      	ldr	r3, [sp, #16]
 800afc0:	42b3      	cmp	r3, r6
 800afc2:	bfa8      	it	ge
 800afc4:	4633      	movge	r3, r6
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	4698      	mov	r8, r3
 800afca:	dd0b      	ble.n	800afe4 <_svfprintf_r+0xf04>
 800afcc:	e9c4 9300 	strd	r9, r3, [r4]
 800afd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afd2:	4443      	add	r3, r8
 800afd4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800afd6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800afd8:	3301      	adds	r3, #1
 800afda:	2b07      	cmp	r3, #7
 800afdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 800afde:	f300 8089 	bgt.w	800b0f4 <_svfprintf_r+0x1014>
 800afe2:	3408      	adds	r4, #8
 800afe4:	4643      	mov	r3, r8
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	bfac      	ite	ge
 800afea:	eba6 0808 	subge.w	r8, r6, r8
 800afee:	46b0      	movlt	r8, r6
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	dd1b      	ble.n	800b02e <_svfprintf_r+0xf4e>
 800aff6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800affa:	4897      	ldr	r0, [pc, #604]	@ (800b258 <_svfprintf_r+0x1178>)
 800affc:	6020      	str	r0, [r4, #0]
 800affe:	f1b8 0f10 	cmp.w	r8, #16
 800b002:	f102 0201 	add.w	r2, r2, #1
 800b006:	f104 0108 	add.w	r1, r4, #8
 800b00a:	dc7d      	bgt.n	800b108 <_svfprintf_r+0x1028>
 800b00c:	4443      	add	r3, r8
 800b00e:	2a07      	cmp	r2, #7
 800b010:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b014:	f8c4 8004 	str.w	r8, [r4, #4]
 800b018:	f340 808a 	ble.w	800b130 <_svfprintf_r+0x1050>
 800b01c:	9803      	ldr	r0, [sp, #12]
 800b01e:	aa26      	add	r2, sp, #152	@ 0x98
 800b020:	4659      	mov	r1, fp
 800b022:	f001 fd65 	bl	800caf0 <__ssprint_r>
 800b026:	2800      	cmp	r0, #0
 800b028:	f040 81d5 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b02c:	ac29      	add	r4, sp, #164	@ 0xa4
 800b02e:	eb09 0806 	add.w	r8, r9, r6
 800b032:	056e      	lsls	r6, r5, #21
 800b034:	d508      	bpl.n	800b048 <_svfprintf_r+0xf68>
 800b036:	9b08      	ldr	r3, [sp, #32]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d17b      	bne.n	800b134 <_svfprintf_r+0x1054>
 800b03c:	2f00      	cmp	r7, #0
 800b03e:	d17b      	bne.n	800b138 <_svfprintf_r+0x1058>
 800b040:	9b06      	ldr	r3, [sp, #24]
 800b042:	4598      	cmp	r8, r3
 800b044:	bf28      	it	cs
 800b046:	4698      	movcs	r8, r3
 800b048:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b04a:	9a04      	ldr	r2, [sp, #16]
 800b04c:	4293      	cmp	r3, r2
 800b04e:	db01      	blt.n	800b054 <_svfprintf_r+0xf74>
 800b050:	07e8      	lsls	r0, r5, #31
 800b052:	d50e      	bpl.n	800b072 <_svfprintf_r+0xf92>
 800b054:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b05a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b05c:	6063      	str	r3, [r4, #4]
 800b05e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b060:	4413      	add	r3, r2
 800b062:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b064:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b066:	3301      	adds	r3, #1
 800b068:	2b07      	cmp	r3, #7
 800b06a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b06c:	f300 80df 	bgt.w	800b22e <_svfprintf_r+0x114e>
 800b070:	3408      	adds	r4, #8
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800b076:	1bdf      	subs	r7, r3, r7
 800b078:	9b06      	ldr	r3, [sp, #24]
 800b07a:	eba3 0308 	sub.w	r3, r3, r8
 800b07e:	429f      	cmp	r7, r3
 800b080:	bfa8      	it	ge
 800b082:	461f      	movge	r7, r3
 800b084:	2f00      	cmp	r7, #0
 800b086:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b088:	dd0a      	ble.n	800b0a0 <_svfprintf_r+0xfc0>
 800b08a:	443b      	add	r3, r7
 800b08c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b08e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b090:	3301      	adds	r3, #1
 800b092:	2b07      	cmp	r3, #7
 800b094:	e9c4 8700 	strd	r8, r7, [r4]
 800b098:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b09a:	f300 80d2 	bgt.w	800b242 <_svfprintf_r+0x1162>
 800b09e:	3408      	adds	r4, #8
 800b0a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b0a2:	9b04      	ldr	r3, [sp, #16]
 800b0a4:	2f00      	cmp	r7, #0
 800b0a6:	eba3 0606 	sub.w	r6, r3, r6
 800b0aa:	bfa8      	it	ge
 800b0ac:	1bf6      	subge	r6, r6, r7
 800b0ae:	2e00      	cmp	r6, #0
 800b0b0:	f77f ac20 	ble.w	800a8f4 <_svfprintf_r+0x814>
 800b0b4:	4f68      	ldr	r7, [pc, #416]	@ (800b258 <_svfprintf_r+0x1178>)
 800b0b6:	f04f 0810 	mov.w	r8, #16
 800b0ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b0be:	2e10      	cmp	r6, #16
 800b0c0:	f103 0301 	add.w	r3, r3, #1
 800b0c4:	f104 0108 	add.w	r1, r4, #8
 800b0c8:	6027      	str	r7, [r4, #0]
 800b0ca:	f77f aebc 	ble.w	800ae46 <_svfprintf_r+0xd66>
 800b0ce:	3210      	adds	r2, #16
 800b0d0:	2b07      	cmp	r3, #7
 800b0d2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b0d6:	f8c4 8004 	str.w	r8, [r4, #4]
 800b0da:	dd08      	ble.n	800b0ee <_svfprintf_r+0x100e>
 800b0dc:	9803      	ldr	r0, [sp, #12]
 800b0de:	aa26      	add	r2, sp, #152	@ 0x98
 800b0e0:	4659      	mov	r1, fp
 800b0e2:	f001 fd05 	bl	800caf0 <__ssprint_r>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f040 8175 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b0ec:	a929      	add	r1, sp, #164	@ 0xa4
 800b0ee:	3e10      	subs	r6, #16
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	e7e2      	b.n	800b0ba <_svfprintf_r+0xfda>
 800b0f4:	9803      	ldr	r0, [sp, #12]
 800b0f6:	aa26      	add	r2, sp, #152	@ 0x98
 800b0f8:	4659      	mov	r1, fp
 800b0fa:	f001 fcf9 	bl	800caf0 <__ssprint_r>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	f040 8169 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b104:	ac29      	add	r4, sp, #164	@ 0xa4
 800b106:	e76d      	b.n	800afe4 <_svfprintf_r+0xf04>
 800b108:	2010      	movs	r0, #16
 800b10a:	4403      	add	r3, r0
 800b10c:	2a07      	cmp	r2, #7
 800b10e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b112:	6060      	str	r0, [r4, #4]
 800b114:	dd08      	ble.n	800b128 <_svfprintf_r+0x1048>
 800b116:	9803      	ldr	r0, [sp, #12]
 800b118:	aa26      	add	r2, sp, #152	@ 0x98
 800b11a:	4659      	mov	r1, fp
 800b11c:	f001 fce8 	bl	800caf0 <__ssprint_r>
 800b120:	2800      	cmp	r0, #0
 800b122:	f040 8158 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b126:	a929      	add	r1, sp, #164	@ 0xa4
 800b128:	f1a8 0810 	sub.w	r8, r8, #16
 800b12c:	460c      	mov	r4, r1
 800b12e:	e762      	b.n	800aff6 <_svfprintf_r+0xf16>
 800b130:	460c      	mov	r4, r1
 800b132:	e77c      	b.n	800b02e <_svfprintf_r+0xf4e>
 800b134:	2f00      	cmp	r7, #0
 800b136:	d04a      	beq.n	800b1ce <_svfprintf_r+0x10ee>
 800b138:	3f01      	subs	r7, #1
 800b13a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b140:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b142:	6063      	str	r3, [r4, #4]
 800b144:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b146:	4413      	add	r3, r2
 800b148:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b14a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b14c:	3301      	adds	r3, #1
 800b14e:	2b07      	cmp	r3, #7
 800b150:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b152:	dc43      	bgt.n	800b1dc <_svfprintf_r+0x10fc>
 800b154:	3408      	adds	r4, #8
 800b156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	eba3 0308 	sub.w	r3, r3, r8
 800b160:	429a      	cmp	r2, r3
 800b162:	bfa8      	it	ge
 800b164:	461a      	movge	r2, r3
 800b166:	2a00      	cmp	r2, #0
 800b168:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b16a:	4691      	mov	r9, r2
 800b16c:	dd09      	ble.n	800b182 <_svfprintf_r+0x10a2>
 800b16e:	4413      	add	r3, r2
 800b170:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b172:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b174:	3301      	adds	r3, #1
 800b176:	2b07      	cmp	r3, #7
 800b178:	e9c4 8200 	strd	r8, r2, [r4]
 800b17c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b17e:	dc37      	bgt.n	800b1f0 <_svfprintf_r+0x1110>
 800b180:	3408      	adds	r4, #8
 800b182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b184:	781e      	ldrb	r6, [r3, #0]
 800b186:	f1b9 0f00 	cmp.w	r9, #0
 800b18a:	bfa8      	it	ge
 800b18c:	eba6 0609 	subge.w	r6, r6, r9
 800b190:	2e00      	cmp	r6, #0
 800b192:	dd18      	ble.n	800b1c6 <_svfprintf_r+0x10e6>
 800b194:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b198:	482f      	ldr	r0, [pc, #188]	@ (800b258 <_svfprintf_r+0x1178>)
 800b19a:	6020      	str	r0, [r4, #0]
 800b19c:	2e10      	cmp	r6, #16
 800b19e:	f103 0301 	add.w	r3, r3, #1
 800b1a2:	f104 0108 	add.w	r1, r4, #8
 800b1a6:	dc2d      	bgt.n	800b204 <_svfprintf_r+0x1124>
 800b1a8:	6066      	str	r6, [r4, #4]
 800b1aa:	2b07      	cmp	r3, #7
 800b1ac:	4416      	add	r6, r2
 800b1ae:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800b1b2:	dd3a      	ble.n	800b22a <_svfprintf_r+0x114a>
 800b1b4:	9803      	ldr	r0, [sp, #12]
 800b1b6:	aa26      	add	r2, sp, #152	@ 0x98
 800b1b8:	4659      	mov	r1, fp
 800b1ba:	f001 fc99 	bl	800caf0 <__ssprint_r>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f040 8109 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b1c4:	ac29      	add	r4, sp, #164	@ 0xa4
 800b1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	4498      	add	r8, r3
 800b1cc:	e733      	b.n	800b036 <_svfprintf_r+0xf56>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d4:	9b08      	ldr	r3, [sp, #32]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	9308      	str	r3, [sp, #32]
 800b1da:	e7ae      	b.n	800b13a <_svfprintf_r+0x105a>
 800b1dc:	9803      	ldr	r0, [sp, #12]
 800b1de:	aa26      	add	r2, sp, #152	@ 0x98
 800b1e0:	4659      	mov	r1, fp
 800b1e2:	f001 fc85 	bl	800caf0 <__ssprint_r>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f040 80f5 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b1ec:	ac29      	add	r4, sp, #164	@ 0xa4
 800b1ee:	e7b2      	b.n	800b156 <_svfprintf_r+0x1076>
 800b1f0:	9803      	ldr	r0, [sp, #12]
 800b1f2:	aa26      	add	r2, sp, #152	@ 0x98
 800b1f4:	4659      	mov	r1, fp
 800b1f6:	f001 fc7b 	bl	800caf0 <__ssprint_r>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	f040 80eb 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b200:	ac29      	add	r4, sp, #164	@ 0xa4
 800b202:	e7be      	b.n	800b182 <_svfprintf_r+0x10a2>
 800b204:	2010      	movs	r0, #16
 800b206:	4402      	add	r2, r0
 800b208:	2b07      	cmp	r3, #7
 800b20a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b20e:	6060      	str	r0, [r4, #4]
 800b210:	dd08      	ble.n	800b224 <_svfprintf_r+0x1144>
 800b212:	9803      	ldr	r0, [sp, #12]
 800b214:	aa26      	add	r2, sp, #152	@ 0x98
 800b216:	4659      	mov	r1, fp
 800b218:	f001 fc6a 	bl	800caf0 <__ssprint_r>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f040 80da 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b222:	a929      	add	r1, sp, #164	@ 0xa4
 800b224:	3e10      	subs	r6, #16
 800b226:	460c      	mov	r4, r1
 800b228:	e7b4      	b.n	800b194 <_svfprintf_r+0x10b4>
 800b22a:	460c      	mov	r4, r1
 800b22c:	e7cb      	b.n	800b1c6 <_svfprintf_r+0x10e6>
 800b22e:	9803      	ldr	r0, [sp, #12]
 800b230:	aa26      	add	r2, sp, #152	@ 0x98
 800b232:	4659      	mov	r1, fp
 800b234:	f001 fc5c 	bl	800caf0 <__ssprint_r>
 800b238:	2800      	cmp	r0, #0
 800b23a:	f040 80cc 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b23e:	ac29      	add	r4, sp, #164	@ 0xa4
 800b240:	e717      	b.n	800b072 <_svfprintf_r+0xf92>
 800b242:	9803      	ldr	r0, [sp, #12]
 800b244:	aa26      	add	r2, sp, #152	@ 0x98
 800b246:	4659      	mov	r1, fp
 800b248:	f001 fc52 	bl	800caf0 <__ssprint_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f040 80c2 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b252:	ac29      	add	r4, sp, #164	@ 0xa4
 800b254:	e724      	b.n	800b0a0 <_svfprintf_r+0xfc0>
 800b256:	bf00      	nop
 800b258:	0800e578 	.word	0x0800e578
 800b25c:	9904      	ldr	r1, [sp, #16]
 800b25e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b260:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800b262:	2901      	cmp	r1, #1
 800b264:	f103 0301 	add.w	r3, r3, #1
 800b268:	f102 0201 	add.w	r2, r2, #1
 800b26c:	f104 0608 	add.w	r6, r4, #8
 800b270:	dc02      	bgt.n	800b278 <_svfprintf_r+0x1198>
 800b272:	07e9      	lsls	r1, r5, #31
 800b274:	f140 8083 	bpl.w	800b37e <_svfprintf_r+0x129e>
 800b278:	2101      	movs	r1, #1
 800b27a:	2a07      	cmp	r2, #7
 800b27c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b280:	f8c4 9000 	str.w	r9, [r4]
 800b284:	6061      	str	r1, [r4, #4]
 800b286:	dd08      	ble.n	800b29a <_svfprintf_r+0x11ba>
 800b288:	9803      	ldr	r0, [sp, #12]
 800b28a:	aa26      	add	r2, sp, #152	@ 0x98
 800b28c:	4659      	mov	r1, fp
 800b28e:	f001 fc2f 	bl	800caf0 <__ssprint_r>
 800b292:	2800      	cmp	r0, #0
 800b294:	f040 809f 	bne.w	800b3d6 <_svfprintf_r+0x12f6>
 800b298:	ae29      	add	r6, sp, #164	@ 0xa4
 800b29a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b29c:	6033      	str	r3, [r6, #0]
 800b29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2a2:	6073      	str	r3, [r6, #4]
 800b2a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b2a6:	4413      	add	r3, r2
 800b2a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b2aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	2b07      	cmp	r3, #7
 800b2b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b2b2:	dc33      	bgt.n	800b31c <_svfprintf_r+0x123c>
 800b2b4:	3608      	adds	r6, #8
 800b2b6:	9b04      	ldr	r3, [sp, #16]
 800b2b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2bc:	1e5c      	subs	r4, r3, #1
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800b2c6:	f7f5 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d12f      	bne.n	800b32e <_svfprintf_r+0x124e>
 800b2ce:	f109 0201 	add.w	r2, r9, #1
 800b2d2:	e9c6 2400 	strd	r2, r4, [r6]
 800b2d6:	9a04      	ldr	r2, [sp, #16]
 800b2d8:	f108 0301 	add.w	r3, r8, #1
 800b2dc:	3f01      	subs	r7, #1
 800b2de:	4417      	add	r7, r2
 800b2e0:	2b07      	cmp	r3, #7
 800b2e2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800b2e6:	dd53      	ble.n	800b390 <_svfprintf_r+0x12b0>
 800b2e8:	9803      	ldr	r0, [sp, #12]
 800b2ea:	aa26      	add	r2, sp, #152	@ 0x98
 800b2ec:	4659      	mov	r1, fp
 800b2ee:	f001 fbff 	bl	800caf0 <__ssprint_r>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d16f      	bne.n	800b3d6 <_svfprintf_r+0x12f6>
 800b2f6:	ae29      	add	r6, sp, #164	@ 0xa4
 800b2f8:	ab22      	add	r3, sp, #136	@ 0x88
 800b2fa:	6033      	str	r3, [r6, #0]
 800b2fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b2fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b300:	6073      	str	r3, [r6, #4]
 800b302:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b304:	4413      	add	r3, r2
 800b306:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b308:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b30a:	3301      	adds	r3, #1
 800b30c:	2b07      	cmp	r3, #7
 800b30e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b310:	f73f ada0 	bgt.w	800ae54 <_svfprintf_r+0xd74>
 800b314:	f106 0408 	add.w	r4, r6, #8
 800b318:	f7ff baec 	b.w	800a8f4 <_svfprintf_r+0x814>
 800b31c:	9803      	ldr	r0, [sp, #12]
 800b31e:	aa26      	add	r2, sp, #152	@ 0x98
 800b320:	4659      	mov	r1, fp
 800b322:	f001 fbe5 	bl	800caf0 <__ssprint_r>
 800b326:	2800      	cmp	r0, #0
 800b328:	d155      	bne.n	800b3d6 <_svfprintf_r+0x12f6>
 800b32a:	ae29      	add	r6, sp, #164	@ 0xa4
 800b32c:	e7c3      	b.n	800b2b6 <_svfprintf_r+0x11d6>
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	2b01      	cmp	r3, #1
 800b332:	dde1      	ble.n	800b2f8 <_svfprintf_r+0x1218>
 800b334:	4f57      	ldr	r7, [pc, #348]	@ (800b494 <_svfprintf_r+0x13b4>)
 800b336:	f04f 0810 	mov.w	r8, #16
 800b33a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b33e:	2c10      	cmp	r4, #16
 800b340:	f103 0301 	add.w	r3, r3, #1
 800b344:	f106 0108 	add.w	r1, r6, #8
 800b348:	6037      	str	r7, [r6, #0]
 800b34a:	dc07      	bgt.n	800b35c <_svfprintf_r+0x127c>
 800b34c:	6074      	str	r4, [r6, #4]
 800b34e:	2b07      	cmp	r3, #7
 800b350:	4414      	add	r4, r2
 800b352:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800b356:	dcc7      	bgt.n	800b2e8 <_svfprintf_r+0x1208>
 800b358:	460e      	mov	r6, r1
 800b35a:	e7cd      	b.n	800b2f8 <_svfprintf_r+0x1218>
 800b35c:	3210      	adds	r2, #16
 800b35e:	2b07      	cmp	r3, #7
 800b360:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b364:	f8c6 8004 	str.w	r8, [r6, #4]
 800b368:	dd06      	ble.n	800b378 <_svfprintf_r+0x1298>
 800b36a:	9803      	ldr	r0, [sp, #12]
 800b36c:	aa26      	add	r2, sp, #152	@ 0x98
 800b36e:	4659      	mov	r1, fp
 800b370:	f001 fbbe 	bl	800caf0 <__ssprint_r>
 800b374:	bb78      	cbnz	r0, 800b3d6 <_svfprintf_r+0x12f6>
 800b376:	a929      	add	r1, sp, #164	@ 0xa4
 800b378:	3c10      	subs	r4, #16
 800b37a:	460e      	mov	r6, r1
 800b37c:	e7dd      	b.n	800b33a <_svfprintf_r+0x125a>
 800b37e:	2101      	movs	r1, #1
 800b380:	2a07      	cmp	r2, #7
 800b382:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b386:	f8c4 9000 	str.w	r9, [r4]
 800b38a:	6061      	str	r1, [r4, #4]
 800b38c:	ddb4      	ble.n	800b2f8 <_svfprintf_r+0x1218>
 800b38e:	e7ab      	b.n	800b2e8 <_svfprintf_r+0x1208>
 800b390:	3608      	adds	r6, #8
 800b392:	e7b1      	b.n	800b2f8 <_svfprintf_r+0x1218>
 800b394:	460c      	mov	r4, r1
 800b396:	f7ff baad 	b.w	800a8f4 <_svfprintf_r+0x814>
 800b39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b39c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b39e:	1a9d      	subs	r5, r3, r2
 800b3a0:	2d00      	cmp	r5, #0
 800b3a2:	f77f aaaa 	ble.w	800a8fa <_svfprintf_r+0x81a>
 800b3a6:	4e3c      	ldr	r6, [pc, #240]	@ (800b498 <_svfprintf_r+0x13b8>)
 800b3a8:	2710      	movs	r7, #16
 800b3aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b3ae:	2d10      	cmp	r5, #16
 800b3b0:	f103 0301 	add.w	r3, r3, #1
 800b3b4:	6026      	str	r6, [r4, #0]
 800b3b6:	dc18      	bgt.n	800b3ea <_svfprintf_r+0x130a>
 800b3b8:	442a      	add	r2, r5
 800b3ba:	2b07      	cmp	r3, #7
 800b3bc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b3c0:	6065      	str	r5, [r4, #4]
 800b3c2:	f77f aa9a 	ble.w	800a8fa <_svfprintf_r+0x81a>
 800b3c6:	9803      	ldr	r0, [sp, #12]
 800b3c8:	aa26      	add	r2, sp, #152	@ 0x98
 800b3ca:	4659      	mov	r1, fp
 800b3cc:	f001 fb90 	bl	800caf0 <__ssprint_r>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	f43f aa92 	beq.w	800a8fa <_svfprintf_r+0x81a>
 800b3d6:	f1ba 0f00 	cmp.w	sl, #0
 800b3da:	f43f a89a 	beq.w	800a512 <_svfprintf_r+0x432>
 800b3de:	9803      	ldr	r0, [sp, #12]
 800b3e0:	4651      	mov	r1, sl
 800b3e2:	f7fe fb77 	bl	8009ad4 <_free_r>
 800b3e6:	f7ff b894 	b.w	800a512 <_svfprintf_r+0x432>
 800b3ea:	3210      	adds	r2, #16
 800b3ec:	2b07      	cmp	r3, #7
 800b3ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b3f2:	6067      	str	r7, [r4, #4]
 800b3f4:	dc02      	bgt.n	800b3fc <_svfprintf_r+0x131c>
 800b3f6:	3408      	adds	r4, #8
 800b3f8:	3d10      	subs	r5, #16
 800b3fa:	e7d6      	b.n	800b3aa <_svfprintf_r+0x12ca>
 800b3fc:	9803      	ldr	r0, [sp, #12]
 800b3fe:	aa26      	add	r2, sp, #152	@ 0x98
 800b400:	4659      	mov	r1, fp
 800b402:	f001 fb75 	bl	800caf0 <__ssprint_r>
 800b406:	2800      	cmp	r0, #0
 800b408:	d1e5      	bne.n	800b3d6 <_svfprintf_r+0x12f6>
 800b40a:	ac29      	add	r4, sp, #164	@ 0xa4
 800b40c:	e7f4      	b.n	800b3f8 <_svfprintf_r+0x1318>
 800b40e:	9803      	ldr	r0, [sp, #12]
 800b410:	4651      	mov	r1, sl
 800b412:	f7fe fb5f 	bl	8009ad4 <_free_r>
 800b416:	f7ff ba88 	b.w	800a92a <_svfprintf_r+0x84a>
 800b41a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f43f a878 	beq.w	800a512 <_svfprintf_r+0x432>
 800b422:	9803      	ldr	r0, [sp, #12]
 800b424:	aa26      	add	r2, sp, #152	@ 0x98
 800b426:	4659      	mov	r1, fp
 800b428:	f001 fb62 	bl	800caf0 <__ssprint_r>
 800b42c:	f7ff b871 	b.w	800a512 <_svfprintf_r+0x432>
 800b430:	ea56 0207 	orrs.w	r2, r6, r7
 800b434:	9508      	str	r5, [sp, #32]
 800b436:	f43f ab7a 	beq.w	800ab2e <_svfprintf_r+0xa4e>
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	f43f abfb 	beq.w	800ac36 <_svfprintf_r+0xb56>
 800b440:	2b02      	cmp	r3, #2
 800b442:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800b446:	f43f ac3f 	beq.w	800acc8 <_svfprintf_r+0xbe8>
 800b44a:	f006 0307 	and.w	r3, r6, #7
 800b44e:	08f6      	lsrs	r6, r6, #3
 800b450:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800b454:	08ff      	lsrs	r7, r7, #3
 800b456:	3330      	adds	r3, #48	@ 0x30
 800b458:	ea56 0107 	orrs.w	r1, r6, r7
 800b45c:	464a      	mov	r2, r9
 800b45e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800b462:	d1f2      	bne.n	800b44a <_svfprintf_r+0x136a>
 800b464:	9908      	ldr	r1, [sp, #32]
 800b466:	07c8      	lsls	r0, r1, #31
 800b468:	d506      	bpl.n	800b478 <_svfprintf_r+0x1398>
 800b46a:	2b30      	cmp	r3, #48	@ 0x30
 800b46c:	d004      	beq.n	800b478 <_svfprintf_r+0x1398>
 800b46e:	2330      	movs	r3, #48	@ 0x30
 800b470:	f809 3c01 	strb.w	r3, [r9, #-1]
 800b474:	f1a2 0902 	sub.w	r9, r2, #2
 800b478:	ab52      	add	r3, sp, #328	@ 0x148
 800b47a:	9d08      	ldr	r5, [sp, #32]
 800b47c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800b480:	f04f 0a00 	mov.w	sl, #0
 800b484:	eba3 0809 	sub.w	r8, r3, r9
 800b488:	4657      	mov	r7, sl
 800b48a:	f8cd a020 	str.w	sl, [sp, #32]
 800b48e:	4656      	mov	r6, sl
 800b490:	f7ff b97c 	b.w	800a78c <_svfprintf_r+0x6ac>
 800b494:	0800e578 	.word	0x0800e578
 800b498:	0800e588 	.word	0x0800e588

0800b49c <_fclose_r>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	4605      	mov	r5, r0
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	b1b1      	cbz	r1, 800b4d2 <_fclose_r+0x36>
 800b4a4:	b118      	cbz	r0, 800b4ae <_fclose_r+0x12>
 800b4a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b4a8:	b90b      	cbnz	r3, 800b4ae <_fclose_r+0x12>
 800b4aa:	f7fe f911 	bl	80096d0 <__sinit>
 800b4ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4b0:	07de      	lsls	r6, r3, #31
 800b4b2:	d405      	bmi.n	800b4c0 <_fclose_r+0x24>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	0598      	lsls	r0, r3, #22
 800b4b8:	d402      	bmi.n	800b4c0 <_fclose_r+0x24>
 800b4ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4bc:	f7fe fa94 	bl	80099e8 <__retarget_lock_acquire_recursive>
 800b4c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c4:	b943      	cbnz	r3, 800b4d8 <_fclose_r+0x3c>
 800b4c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4c8:	07d9      	lsls	r1, r3, #31
 800b4ca:	d402      	bmi.n	800b4d2 <_fclose_r+0x36>
 800b4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4ce:	f7fe fa8c 	bl	80099ea <__retarget_lock_release_recursive>
 800b4d2:	2600      	movs	r6, #0
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	4621      	mov	r1, r4
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f000 f834 	bl	800b548 <__sflush_r>
 800b4e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	b133      	cbz	r3, 800b4f4 <_fclose_r+0x58>
 800b4e6:	69e1      	ldr	r1, [r4, #28]
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	4798      	blx	r3
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	bfb8      	it	lt
 800b4f0:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	061a      	lsls	r2, r3, #24
 800b4f8:	d503      	bpl.n	800b502 <_fclose_r+0x66>
 800b4fa:	6921      	ldr	r1, [r4, #16]
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f7fe fae9 	bl	8009ad4 <_free_r>
 800b502:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b504:	b141      	cbz	r1, 800b518 <_fclose_r+0x7c>
 800b506:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b50a:	4299      	cmp	r1, r3
 800b50c:	d002      	beq.n	800b514 <_fclose_r+0x78>
 800b50e:	4628      	mov	r0, r5
 800b510:	f7fe fae0 	bl	8009ad4 <_free_r>
 800b514:	2300      	movs	r3, #0
 800b516:	6323      	str	r3, [r4, #48]	@ 0x30
 800b518:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b51a:	b121      	cbz	r1, 800b526 <_fclose_r+0x8a>
 800b51c:	4628      	mov	r0, r5
 800b51e:	f7fe fad9 	bl	8009ad4 <_free_r>
 800b522:	2300      	movs	r3, #0
 800b524:	6463      	str	r3, [r4, #68]	@ 0x44
 800b526:	f7fe f8c7 	bl	80096b8 <__sfp_lock_acquire>
 800b52a:	2300      	movs	r3, #0
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b530:	07db      	lsls	r3, r3, #31
 800b532:	d402      	bmi.n	800b53a <_fclose_r+0x9e>
 800b534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b536:	f7fe fa58 	bl	80099ea <__retarget_lock_release_recursive>
 800b53a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b53c:	f7fe fa53 	bl	80099e6 <__retarget_lock_close_recursive>
 800b540:	f7fe f8c0 	bl	80096c4 <__sfp_lock_release>
 800b544:	e7c6      	b.n	800b4d4 <_fclose_r+0x38>
	...

0800b548 <__sflush_r>:
 800b548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b54c:	4605      	mov	r5, r0
 800b54e:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800b552:	0706      	lsls	r6, r0, #28
 800b554:	460c      	mov	r4, r1
 800b556:	d457      	bmi.n	800b608 <__sflush_r+0xc0>
 800b558:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800b55c:	818b      	strh	r3, [r1, #12]
 800b55e:	684b      	ldr	r3, [r1, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	dc02      	bgt.n	800b56a <__sflush_r+0x22>
 800b564:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800b566:	2b00      	cmp	r3, #0
 800b568:	dd4c      	ble.n	800b604 <__sflush_r+0xbc>
 800b56a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b56c:	2e00      	cmp	r6, #0
 800b56e:	d049      	beq.n	800b604 <__sflush_r+0xbc>
 800b570:	2300      	movs	r3, #0
 800b572:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800b576:	682f      	ldr	r7, [r5, #0]
 800b578:	69e1      	ldr	r1, [r4, #28]
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	d034      	beq.n	800b5e8 <__sflush_r+0xa0>
 800b57e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	0759      	lsls	r1, r3, #29
 800b584:	d505      	bpl.n	800b592 <__sflush_r+0x4a>
 800b586:	6863      	ldr	r3, [r4, #4]
 800b588:	1ad2      	subs	r2, r2, r3
 800b58a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b58c:	b10b      	cbz	r3, 800b592 <__sflush_r+0x4a>
 800b58e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b590:	1ad2      	subs	r2, r2, r3
 800b592:	2300      	movs	r3, #0
 800b594:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b596:	69e1      	ldr	r1, [r4, #28]
 800b598:	4628      	mov	r0, r5
 800b59a:	47b0      	blx	r6
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d106      	bne.n	800b5ae <__sflush_r+0x66>
 800b5a0:	682a      	ldr	r2, [r5, #0]
 800b5a2:	2a1d      	cmp	r2, #29
 800b5a4:	d848      	bhi.n	800b638 <__sflush_r+0xf0>
 800b5a6:	4b2b      	ldr	r3, [pc, #172]	@ (800b654 <__sflush_r+0x10c>)
 800b5a8:	4113      	asrs	r3, r2
 800b5aa:	07de      	lsls	r6, r3, #31
 800b5ac:	d444      	bmi.n	800b638 <__sflush_r+0xf0>
 800b5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5b2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b5b6:	81a2      	strh	r2, [r4, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	6062      	str	r2, [r4, #4]
 800b5bc:	04d9      	lsls	r1, r3, #19
 800b5be:	6922      	ldr	r2, [r4, #16]
 800b5c0:	6022      	str	r2, [r4, #0]
 800b5c2:	d504      	bpl.n	800b5ce <__sflush_r+0x86>
 800b5c4:	1c42      	adds	r2, r0, #1
 800b5c6:	d101      	bne.n	800b5cc <__sflush_r+0x84>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	b903      	cbnz	r3, 800b5ce <__sflush_r+0x86>
 800b5cc:	6520      	str	r0, [r4, #80]	@ 0x50
 800b5ce:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b5d0:	602f      	str	r7, [r5, #0]
 800b5d2:	b1b9      	cbz	r1, 800b604 <__sflush_r+0xbc>
 800b5d4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b5d8:	4299      	cmp	r1, r3
 800b5da:	d002      	beq.n	800b5e2 <__sflush_r+0x9a>
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f7fe fa79 	bl	8009ad4 <_free_r>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5e6:	e00d      	b.n	800b604 <__sflush_r+0xbc>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b0      	blx	r6
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	1c50      	adds	r0, r2, #1
 800b5f2:	d1c5      	bne.n	800b580 <__sflush_r+0x38>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d0c2      	beq.n	800b580 <__sflush_r+0x38>
 800b5fa:	2b1d      	cmp	r3, #29
 800b5fc:	d001      	beq.n	800b602 <__sflush_r+0xba>
 800b5fe:	2b16      	cmp	r3, #22
 800b600:	d11a      	bne.n	800b638 <__sflush_r+0xf0>
 800b602:	602f      	str	r7, [r5, #0]
 800b604:	2000      	movs	r0, #0
 800b606:	e01e      	b.n	800b646 <__sflush_r+0xfe>
 800b608:	690f      	ldr	r7, [r1, #16]
 800b60a:	2f00      	cmp	r7, #0
 800b60c:	d0fa      	beq.n	800b604 <__sflush_r+0xbc>
 800b60e:	0783      	lsls	r3, r0, #30
 800b610:	680e      	ldr	r6, [r1, #0]
 800b612:	bf08      	it	eq
 800b614:	694b      	ldreq	r3, [r1, #20]
 800b616:	600f      	str	r7, [r1, #0]
 800b618:	bf18      	it	ne
 800b61a:	2300      	movne	r3, #0
 800b61c:	eba6 0807 	sub.w	r8, r6, r7
 800b620:	608b      	str	r3, [r1, #8]
 800b622:	f1b8 0f00 	cmp.w	r8, #0
 800b626:	dded      	ble.n	800b604 <__sflush_r+0xbc>
 800b628:	69e1      	ldr	r1, [r4, #28]
 800b62a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800b62c:	4643      	mov	r3, r8
 800b62e:	463a      	mov	r2, r7
 800b630:	4628      	mov	r0, r5
 800b632:	47b0      	blx	r6
 800b634:	2800      	cmp	r0, #0
 800b636:	dc08      	bgt.n	800b64a <__sflush_r+0x102>
 800b638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b63c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64a:	4407      	add	r7, r0
 800b64c:	eba8 0800 	sub.w	r8, r8, r0
 800b650:	e7e7      	b.n	800b622 <__sflush_r+0xda>
 800b652:	bf00      	nop
 800b654:	dfbffffe 	.word	0xdfbffffe

0800b658 <_fflush_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	460c      	mov	r4, r1
 800b65c:	4605      	mov	r5, r0
 800b65e:	b118      	cbz	r0, 800b668 <_fflush_r+0x10>
 800b660:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b662:	b90b      	cbnz	r3, 800b668 <_fflush_r+0x10>
 800b664:	f7fe f834 	bl	80096d0 <__sinit>
 800b668:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800b66c:	b1b8      	cbz	r0, 800b69e <_fflush_r+0x46>
 800b66e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b670:	07db      	lsls	r3, r3, #31
 800b672:	d404      	bmi.n	800b67e <_fflush_r+0x26>
 800b674:	0581      	lsls	r1, r0, #22
 800b676:	d402      	bmi.n	800b67e <_fflush_r+0x26>
 800b678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b67a:	f7fe f9b5 	bl	80099e8 <__retarget_lock_acquire_recursive>
 800b67e:	4628      	mov	r0, r5
 800b680:	4621      	mov	r1, r4
 800b682:	f7ff ff61 	bl	800b548 <__sflush_r>
 800b686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b688:	07da      	lsls	r2, r3, #31
 800b68a:	4605      	mov	r5, r0
 800b68c:	d405      	bmi.n	800b69a <_fflush_r+0x42>
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	059b      	lsls	r3, r3, #22
 800b692:	d402      	bmi.n	800b69a <_fflush_r+0x42>
 800b694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b696:	f7fe f9a8 	bl	80099ea <__retarget_lock_release_recursive>
 800b69a:	4628      	mov	r0, r5
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
 800b69e:	4605      	mov	r5, r0
 800b6a0:	e7fb      	b.n	800b69a <_fflush_r+0x42>

0800b6a2 <strncpy>:
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	3901      	subs	r1, #1
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	b132      	cbz	r2, 800b6b8 <strncpy+0x16>
 800b6aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6ae:	f803 4b01 	strb.w	r4, [r3], #1
 800b6b2:	3a01      	subs	r2, #1
 800b6b4:	2c00      	cmp	r4, #0
 800b6b6:	d1f7      	bne.n	800b6a8 <strncpy+0x6>
 800b6b8:	441a      	add	r2, r3
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d100      	bne.n	800b6c2 <strncpy+0x20>
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6c6:	e7f9      	b.n	800b6bc <strncpy+0x1a>

0800b6c8 <_localeconv_r>:
 800b6c8:	4800      	ldr	r0, [pc, #0]	@ (800b6cc <_localeconv_r+0x4>)
 800b6ca:	4770      	bx	lr
 800b6cc:	20000644 	.word	0x20000644

0800b6d0 <_sbrk_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d06      	ldr	r5, [pc, #24]	@ (800b6ec <_sbrk_r+0x1c>)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4608      	mov	r0, r1
 800b6da:	602b      	str	r3, [r5, #0]
 800b6dc:	f7f7 fc32 	bl	8002f44 <_sbrk>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_sbrk_r+0x1a>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_sbrk_r+0x1a>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	20004bcc 	.word	0x20004bcc

0800b6f0 <__libc_fini_array>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d07      	ldr	r5, [pc, #28]	@ (800b710 <__libc_fini_array+0x20>)
 800b6f4:	4c07      	ldr	r4, [pc, #28]	@ (800b714 <__libc_fini_array+0x24>)
 800b6f6:	1b64      	subs	r4, r4, r5
 800b6f8:	10a4      	asrs	r4, r4, #2
 800b6fa:	b91c      	cbnz	r4, 800b704 <__libc_fini_array+0x14>
 800b6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b700:	f002 bd00 	b.w	800e104 <_fini>
 800b704:	3c01      	subs	r4, #1
 800b706:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b70a:	4798      	blx	r3
 800b70c:	e7f5      	b.n	800b6fa <__libc_fini_array+0xa>
 800b70e:	bf00      	nop
 800b710:	0800e8e0 	.word	0x0800e8e0
 800b714:	0800e8e4 	.word	0x0800e8e4

0800b718 <sysconf>:
 800b718:	2808      	cmp	r0, #8
 800b71a:	b508      	push	{r3, lr}
 800b71c:	d006      	beq.n	800b72c <sysconf+0x14>
 800b71e:	f7fe f937 	bl	8009990 <__errno>
 800b722:	2316      	movs	r3, #22
 800b724:	6003      	str	r3, [r0, #0]
 800b726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b72a:	bd08      	pop	{r3, pc}
 800b72c:	2080      	movs	r0, #128	@ 0x80
 800b72e:	e7fc      	b.n	800b72a <sysconf+0x12>

0800b730 <frexp>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	2100      	movs	r1, #0
 800b734:	ec55 4b10 	vmov	r4, r5, d0
 800b738:	6001      	str	r1, [r0, #0]
 800b73a:	4915      	ldr	r1, [pc, #84]	@ (800b790 <frexp+0x60>)
 800b73c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b740:	428a      	cmp	r2, r1
 800b742:	4606      	mov	r6, r0
 800b744:	462b      	mov	r3, r5
 800b746:	d820      	bhi.n	800b78a <frexp+0x5a>
 800b748:	4621      	mov	r1, r4
 800b74a:	4311      	orrs	r1, r2
 800b74c:	d01d      	beq.n	800b78a <frexp+0x5a>
 800b74e:	4911      	ldr	r1, [pc, #68]	@ (800b794 <frexp+0x64>)
 800b750:	4029      	ands	r1, r5
 800b752:	b961      	cbnz	r1, 800b76e <frexp+0x3e>
 800b754:	4b10      	ldr	r3, [pc, #64]	@ (800b798 <frexp+0x68>)
 800b756:	2200      	movs	r2, #0
 800b758:	4620      	mov	r0, r4
 800b75a:	4629      	mov	r1, r5
 800b75c:	f7f4 ff4c 	bl	80005f8 <__aeabi_dmul>
 800b760:	460b      	mov	r3, r1
 800b762:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b766:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800b76a:	4604      	mov	r4, r0
 800b76c:	6031      	str	r1, [r6, #0]
 800b76e:	6831      	ldr	r1, [r6, #0]
 800b770:	1512      	asrs	r2, r2, #20
 800b772:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b776:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800b77a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b77e:	4411      	add	r1, r2
 800b780:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b784:	6031      	str	r1, [r6, #0]
 800b786:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800b78a:	ec45 4b10 	vmov	d0, r4, r5
 800b78e:	bd70      	pop	{r4, r5, r6, pc}
 800b790:	7fefffff 	.word	0x7fefffff
 800b794:	7ff00000 	.word	0x7ff00000
 800b798:	43500000 	.word	0x43500000

0800b79c <__register_exitproc>:
 800b79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a0:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800b818 <__register_exitproc+0x7c>
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	f8da 0000 	ldr.w	r0, [sl]
 800b7aa:	4698      	mov	r8, r3
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	4691      	mov	r9, r2
 800b7b0:	f7fe f91a 	bl	80099e8 <__retarget_lock_acquire_recursive>
 800b7b4:	4b16      	ldr	r3, [pc, #88]	@ (800b810 <__register_exitproc+0x74>)
 800b7b6:	681c      	ldr	r4, [r3, #0]
 800b7b8:	b90c      	cbnz	r4, 800b7be <__register_exitproc+0x22>
 800b7ba:	4c16      	ldr	r4, [pc, #88]	@ (800b814 <__register_exitproc+0x78>)
 800b7bc:	601c      	str	r4, [r3, #0]
 800b7be:	6865      	ldr	r5, [r4, #4]
 800b7c0:	f8da 0000 	ldr.w	r0, [sl]
 800b7c4:	2d1f      	cmp	r5, #31
 800b7c6:	dd05      	ble.n	800b7d4 <__register_exitproc+0x38>
 800b7c8:	f7fe f90f 	bl	80099ea <__retarget_lock_release_recursive>
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d4:	b19e      	cbz	r6, 800b7fe <__register_exitproc+0x62>
 800b7d6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800b7e0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800b7e4:	40aa      	lsls	r2, r5
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800b7ec:	2e02      	cmp	r6, #2
 800b7ee:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800b7f2:	bf02      	ittt	eq
 800b7f4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800b7f8:	4313      	orreq	r3, r2
 800b7fa:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800b7fe:	1c6b      	adds	r3, r5, #1
 800b800:	3502      	adds	r5, #2
 800b802:	6063      	str	r3, [r4, #4]
 800b804:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800b808:	f7fe f8ef 	bl	80099ea <__retarget_lock_release_recursive>
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7df      	b.n	800b7d0 <__register_exitproc+0x34>
 800b810:	20004bd4 	.word	0x20004bd4
 800b814:	20004c0c 	.word	0x20004c0c
 800b818:	20000140 	.word	0x20000140

0800b81c <quorem>:
 800b81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b820:	6903      	ldr	r3, [r0, #16]
 800b822:	690c      	ldr	r4, [r1, #16]
 800b824:	42a3      	cmp	r3, r4
 800b826:	4607      	mov	r7, r0
 800b828:	db7e      	blt.n	800b928 <quorem+0x10c>
 800b82a:	3c01      	subs	r4, #1
 800b82c:	f101 0814 	add.w	r8, r1, #20
 800b830:	00a3      	lsls	r3, r4, #2
 800b832:	f100 0514 	add.w	r5, r0, #20
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b846:	3301      	adds	r3, #1
 800b848:	429a      	cmp	r2, r3
 800b84a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b84e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b852:	d32e      	bcc.n	800b8b2 <quorem+0x96>
 800b854:	f04f 0a00 	mov.w	sl, #0
 800b858:	46c4      	mov	ip, r8
 800b85a:	46ae      	mov	lr, r5
 800b85c:	46d3      	mov	fp, sl
 800b85e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b862:	b298      	uxth	r0, r3
 800b864:	fb06 a000 	mla	r0, r6, r0, sl
 800b868:	0c02      	lsrs	r2, r0, #16
 800b86a:	0c1b      	lsrs	r3, r3, #16
 800b86c:	fb06 2303 	mla	r3, r6, r3, r2
 800b870:	f8de 2000 	ldr.w	r2, [lr]
 800b874:	b280      	uxth	r0, r0
 800b876:	b292      	uxth	r2, r2
 800b878:	1a12      	subs	r2, r2, r0
 800b87a:	445a      	add	r2, fp
 800b87c:	f8de 0000 	ldr.w	r0, [lr]
 800b880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b884:	b29b      	uxth	r3, r3
 800b886:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b88a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b88e:	b292      	uxth	r2, r2
 800b890:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b894:	45e1      	cmp	r9, ip
 800b896:	f84e 2b04 	str.w	r2, [lr], #4
 800b89a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b89e:	d2de      	bcs.n	800b85e <quorem+0x42>
 800b8a0:	9b00      	ldr	r3, [sp, #0]
 800b8a2:	58eb      	ldr	r3, [r5, r3]
 800b8a4:	b92b      	cbnz	r3, 800b8b2 <quorem+0x96>
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	3b04      	subs	r3, #4
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	d32f      	bcc.n	800b910 <quorem+0xf4>
 800b8b0:	613c      	str	r4, [r7, #16]
 800b8b2:	4638      	mov	r0, r7
 800b8b4:	f001 f814 	bl	800c8e0 <__mcmp>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	db25      	blt.n	800b908 <quorem+0xec>
 800b8bc:	4629      	mov	r1, r5
 800b8be:	2000      	movs	r0, #0
 800b8c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8c4:	f8d1 c000 	ldr.w	ip, [r1]
 800b8c8:	fa1f fe82 	uxth.w	lr, r2
 800b8cc:	fa1f f38c 	uxth.w	r3, ip
 800b8d0:	eba3 030e 	sub.w	r3, r3, lr
 800b8d4:	4403      	add	r3, r0
 800b8d6:	0c12      	lsrs	r2, r2, #16
 800b8d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b8dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8e6:	45c1      	cmp	r9, r8
 800b8e8:	f841 3b04 	str.w	r3, [r1], #4
 800b8ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b8f0:	d2e6      	bcs.n	800b8c0 <quorem+0xa4>
 800b8f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8fa:	b922      	cbnz	r2, 800b906 <quorem+0xea>
 800b8fc:	3b04      	subs	r3, #4
 800b8fe:	429d      	cmp	r5, r3
 800b900:	461a      	mov	r2, r3
 800b902:	d30b      	bcc.n	800b91c <quorem+0x100>
 800b904:	613c      	str	r4, [r7, #16]
 800b906:	3601      	adds	r6, #1
 800b908:	4630      	mov	r0, r6
 800b90a:	b003      	add	sp, #12
 800b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b910:	6812      	ldr	r2, [r2, #0]
 800b912:	3b04      	subs	r3, #4
 800b914:	2a00      	cmp	r2, #0
 800b916:	d1cb      	bne.n	800b8b0 <quorem+0x94>
 800b918:	3c01      	subs	r4, #1
 800b91a:	e7c6      	b.n	800b8aa <quorem+0x8e>
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	3b04      	subs	r3, #4
 800b920:	2a00      	cmp	r2, #0
 800b922:	d1ef      	bne.n	800b904 <quorem+0xe8>
 800b924:	3c01      	subs	r4, #1
 800b926:	e7ea      	b.n	800b8fe <quorem+0xe2>
 800b928:	2000      	movs	r0, #0
 800b92a:	e7ee      	b.n	800b90a <quorem+0xee>
 800b92c:	0000      	movs	r0, r0
	...

0800b930 <_dtoa_r>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	b099      	sub	sp, #100	@ 0x64
 800b936:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b93a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b93c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b93e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b940:	920e      	str	r2, [sp, #56]	@ 0x38
 800b942:	ec55 4b10 	vmov	r4, r5, d0
 800b946:	4683      	mov	fp, r0
 800b948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b94a:	b149      	cbz	r1, 800b960 <_dtoa_r+0x30>
 800b94c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b94e:	604a      	str	r2, [r1, #4]
 800b950:	2301      	movs	r3, #1
 800b952:	4093      	lsls	r3, r2
 800b954:	608b      	str	r3, [r1, #8]
 800b956:	f000 fdbc 	bl	800c4d2 <_Bfree>
 800b95a:	2300      	movs	r3, #0
 800b95c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800b960:	1e2b      	subs	r3, r5, #0
 800b962:	bfb9      	ittee	lt
 800b964:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b968:	9303      	strlt	r3, [sp, #12]
 800b96a:	2300      	movge	r3, #0
 800b96c:	6033      	strge	r3, [r6, #0]
 800b96e:	9f03      	ldr	r7, [sp, #12]
 800b970:	4b97      	ldr	r3, [pc, #604]	@ (800bbd0 <_dtoa_r+0x2a0>)
 800b972:	bfbc      	itt	lt
 800b974:	2201      	movlt	r2, #1
 800b976:	6032      	strlt	r2, [r6, #0]
 800b978:	43bb      	bics	r3, r7
 800b97a:	d114      	bne.n	800b9a6 <_dtoa_r+0x76>
 800b97c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b97e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b988:	4323      	orrs	r3, r4
 800b98a:	f000 854c 	beq.w	800c426 <_dtoa_r+0xaf6>
 800b98e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b990:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bbe8 <_dtoa_r+0x2b8>
 800b994:	b11b      	cbz	r3, 800b99e <_dtoa_r+0x6e>
 800b996:	f10a 0303 	add.w	r3, sl, #3
 800b99a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	4650      	mov	r0, sl
 800b9a0:	b019      	add	sp, #100	@ 0x64
 800b9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	ec51 0b17 	vmov	r0, r1, d7
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b9b6:	f7f5 f887 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9ba:	4680      	mov	r8, r0
 800b9bc:	b150      	cbz	r0, 800b9d4 <_dtoa_r+0xa4>
 800b9be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9c6:	b113      	cbz	r3, 800b9ce <_dtoa_r+0x9e>
 800b9c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b9ca:	4b82      	ldr	r3, [pc, #520]	@ (800bbd4 <_dtoa_r+0x2a4>)
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800bbec <_dtoa_r+0x2bc>
 800b9d2:	e7e4      	b.n	800b99e <_dtoa_r+0x6e>
 800b9d4:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b9d8:	aa16      	add	r2, sp, #88	@ 0x58
 800b9da:	a917      	add	r1, sp, #92	@ 0x5c
 800b9dc:	4658      	mov	r0, fp
 800b9de:	f001 f82f 	bl	800ca40 <__d2b>
 800b9e2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b9e6:	4681      	mov	r9, r0
 800b9e8:	2e00      	cmp	r6, #0
 800b9ea:	d077      	beq.n	800badc <_dtoa_r+0x1ac>
 800b9ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9ee:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b9f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9fa:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9fe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba02:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba06:	4619      	mov	r1, r3
 800ba08:	2200      	movs	r2, #0
 800ba0a:	4b73      	ldr	r3, [pc, #460]	@ (800bbd8 <_dtoa_r+0x2a8>)
 800ba0c:	f7f4 fc3c 	bl	8000288 <__aeabi_dsub>
 800ba10:	a369      	add	r3, pc, #420	@ (adr r3, 800bbb8 <_dtoa_r+0x288>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f4 fdef 	bl	80005f8 <__aeabi_dmul>
 800ba1a:	a369      	add	r3, pc, #420	@ (adr r3, 800bbc0 <_dtoa_r+0x290>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f7f4 fc34 	bl	800028c <__adddf3>
 800ba24:	4604      	mov	r4, r0
 800ba26:	4630      	mov	r0, r6
 800ba28:	460d      	mov	r5, r1
 800ba2a:	f7f4 fd7b 	bl	8000524 <__aeabi_i2d>
 800ba2e:	a366      	add	r3, pc, #408	@ (adr r3, 800bbc8 <_dtoa_r+0x298>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f4 fde0 	bl	80005f8 <__aeabi_dmul>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f4 fc24 	bl	800028c <__adddf3>
 800ba44:	4604      	mov	r4, r0
 800ba46:	460d      	mov	r5, r1
 800ba48:	f7f5 f886 	bl	8000b58 <__aeabi_d2iz>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	4607      	mov	r7, r0
 800ba50:	2300      	movs	r3, #0
 800ba52:	4620      	mov	r0, r4
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7f5 f841 	bl	8000adc <__aeabi_dcmplt>
 800ba5a:	b140      	cbz	r0, 800ba6e <_dtoa_r+0x13e>
 800ba5c:	4638      	mov	r0, r7
 800ba5e:	f7f4 fd61 	bl	8000524 <__aeabi_i2d>
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	f7f5 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba6a:	b900      	cbnz	r0, 800ba6e <_dtoa_r+0x13e>
 800ba6c:	3f01      	subs	r7, #1
 800ba6e:	2f16      	cmp	r7, #22
 800ba70:	d851      	bhi.n	800bb16 <_dtoa_r+0x1e6>
 800ba72:	4b5a      	ldr	r3, [pc, #360]	@ (800bbdc <_dtoa_r+0x2ac>)
 800ba74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba80:	f7f5 f82c 	bl	8000adc <__aeabi_dcmplt>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d048      	beq.n	800bb1a <_dtoa_r+0x1ea>
 800ba88:	3f01      	subs	r7, #1
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba8e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba90:	1b9b      	subs	r3, r3, r6
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	bf44      	itt	mi
 800ba96:	f1c3 0801 	rsbmi	r8, r3, #1
 800ba9a:	2300      	movmi	r3, #0
 800ba9c:	9208      	str	r2, [sp, #32]
 800ba9e:	bf54      	ite	pl
 800baa0:	f04f 0800 	movpl.w	r8, #0
 800baa4:	9308      	strmi	r3, [sp, #32]
 800baa6:	2f00      	cmp	r7, #0
 800baa8:	db39      	blt.n	800bb1e <_dtoa_r+0x1ee>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	970f      	str	r7, [sp, #60]	@ 0x3c
 800baae:	443b      	add	r3, r7
 800bab0:	9308      	str	r3, [sp, #32]
 800bab2:	2300      	movs	r3, #0
 800bab4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab8:	2b09      	cmp	r3, #9
 800baba:	d865      	bhi.n	800bb88 <_dtoa_r+0x258>
 800babc:	2b05      	cmp	r3, #5
 800babe:	bfc4      	itt	gt
 800bac0:	3b04      	subgt	r3, #4
 800bac2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac6:	f1a3 0302 	sub.w	r3, r3, #2
 800baca:	bfcc      	ite	gt
 800bacc:	2400      	movgt	r4, #0
 800bace:	2401      	movle	r4, #1
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d864      	bhi.n	800bb9e <_dtoa_r+0x26e>
 800bad4:	e8df f003 	tbb	[pc, r3]
 800bad8:	5635372a 	.word	0x5635372a
 800badc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bae0:	441e      	add	r6, r3
 800bae2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bae6:	2b20      	cmp	r3, #32
 800bae8:	bfc1      	itttt	gt
 800baea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800baee:	409f      	lslgt	r7, r3
 800baf0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800baf4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800baf8:	bfd6      	itet	le
 800bafa:	f1c3 0320 	rsble	r3, r3, #32
 800bafe:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb02:	fa04 f003 	lslle.w	r0, r4, r3
 800bb06:	f7f4 fcfd 	bl	8000504 <__aeabi_ui2d>
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb10:	3e01      	subs	r6, #1
 800bb12:	9214      	str	r2, [sp, #80]	@ 0x50
 800bb14:	e777      	b.n	800ba06 <_dtoa_r+0xd6>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e7b8      	b.n	800ba8c <_dtoa_r+0x15c>
 800bb1a:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb1c:	e7b7      	b.n	800ba8e <_dtoa_r+0x15e>
 800bb1e:	427b      	negs	r3, r7
 800bb20:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb22:	2300      	movs	r3, #0
 800bb24:	eba8 0807 	sub.w	r8, r8, r7
 800bb28:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb2a:	e7c4      	b.n	800bab6 <_dtoa_r+0x186>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	dc36      	bgt.n	800bba4 <_dtoa_r+0x274>
 800bb36:	2301      	movs	r3, #1
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	9307      	str	r3, [sp, #28]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb40:	e00b      	b.n	800bb5a <_dtoa_r+0x22a>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e7f3      	b.n	800bb2e <_dtoa_r+0x1fe>
 800bb46:	2300      	movs	r3, #0
 800bb48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb4c:	18fb      	adds	r3, r7, r3
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	9307      	str	r3, [sp, #28]
 800bb56:	bfb8      	it	lt
 800bb58:	2301      	movlt	r3, #1
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	f102 0014 	add.w	r0, r2, #20
 800bb62:	4298      	cmp	r0, r3
 800bb64:	d922      	bls.n	800bbac <_dtoa_r+0x27c>
 800bb66:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800bb6a:	4658      	mov	r0, fp
 800bb6c:	f000 fc8c 	bl	800c488 <_Balloc>
 800bb70:	4682      	mov	sl, r0
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d13c      	bne.n	800bbf0 <_dtoa_r+0x2c0>
 800bb76:	4b1a      	ldr	r3, [pc, #104]	@ (800bbe0 <_dtoa_r+0x2b0>)
 800bb78:	4602      	mov	r2, r0
 800bb7a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bb7e:	4819      	ldr	r0, [pc, #100]	@ (800bbe4 <_dtoa_r+0x2b4>)
 800bb80:	f001 f854 	bl	800cc2c <__assert_func>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e7df      	b.n	800bb48 <_dtoa_r+0x218>
 800bb88:	2401      	movs	r4, #1
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bb90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	9307      	str	r3, [sp, #28]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2312      	movs	r3, #18
 800bb9c:	e7cf      	b.n	800bb3e <_dtoa_r+0x20e>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba2:	e7f5      	b.n	800bb90 <_dtoa_r+0x260>
 800bba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	9307      	str	r3, [sp, #28]
 800bbaa:	e7d6      	b.n	800bb5a <_dtoa_r+0x22a>
 800bbac:	3101      	adds	r1, #1
 800bbae:	0052      	lsls	r2, r2, #1
 800bbb0:	e7d5      	b.n	800bb5e <_dtoa_r+0x22e>
 800bbb2:	bf00      	nop
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	636f4361 	.word	0x636f4361
 800bbbc:	3fd287a7 	.word	0x3fd287a7
 800bbc0:	8b60c8b3 	.word	0x8b60c8b3
 800bbc4:	3fc68a28 	.word	0x3fc68a28
 800bbc8:	509f79fb 	.word	0x509f79fb
 800bbcc:	3fd34413 	.word	0x3fd34413
 800bbd0:	7ff00000 	.word	0x7ff00000
 800bbd4:	0800e577 	.word	0x0800e577
 800bbd8:	3ff80000 	.word	0x3ff80000
 800bbdc:	0800e6a0 	.word	0x0800e6a0
 800bbe0:	0800e5a5 	.word	0x0800e5a5
 800bbe4:	0800e5b6 	.word	0x0800e5b6
 800bbe8:	0800e5a1 	.word	0x0800e5a1
 800bbec:	0800e576 	.word	0x0800e576
 800bbf0:	9b07      	ldr	r3, [sp, #28]
 800bbf2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800bbf6:	2b0e      	cmp	r3, #14
 800bbf8:	f200 80a4 	bhi.w	800bd44 <_dtoa_r+0x414>
 800bbfc:	2c00      	cmp	r4, #0
 800bbfe:	f000 80a1 	beq.w	800bd44 <_dtoa_r+0x414>
 800bc02:	2f00      	cmp	r7, #0
 800bc04:	dd33      	ble.n	800bc6e <_dtoa_r+0x33e>
 800bc06:	4bae      	ldr	r3, [pc, #696]	@ (800bec0 <_dtoa_r+0x590>)
 800bc08:	f007 020f 	and.w	r2, r7, #15
 800bc0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc10:	ed93 7b00 	vldr	d7, [r3]
 800bc14:	05f8      	lsls	r0, r7, #23
 800bc16:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc1a:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc1e:	d516      	bpl.n	800bc4e <_dtoa_r+0x31e>
 800bc20:	4ba8      	ldr	r3, [pc, #672]	@ (800bec4 <_dtoa_r+0x594>)
 800bc22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc2a:	f7f4 fe0f 	bl	800084c <__aeabi_ddiv>
 800bc2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc32:	f004 040f 	and.w	r4, r4, #15
 800bc36:	2603      	movs	r6, #3
 800bc38:	4da2      	ldr	r5, [pc, #648]	@ (800bec4 <_dtoa_r+0x594>)
 800bc3a:	b954      	cbnz	r4, 800bc52 <_dtoa_r+0x322>
 800bc3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc44:	f7f4 fe02 	bl	800084c <__aeabi_ddiv>
 800bc48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc4c:	e028      	b.n	800bca0 <_dtoa_r+0x370>
 800bc4e:	2602      	movs	r6, #2
 800bc50:	e7f2      	b.n	800bc38 <_dtoa_r+0x308>
 800bc52:	07e1      	lsls	r1, r4, #31
 800bc54:	d508      	bpl.n	800bc68 <_dtoa_r+0x338>
 800bc56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc66:	3601      	adds	r6, #1
 800bc68:	1064      	asrs	r4, r4, #1
 800bc6a:	3508      	adds	r5, #8
 800bc6c:	e7e5      	b.n	800bc3a <_dtoa_r+0x30a>
 800bc6e:	f000 80d2 	beq.w	800be16 <_dtoa_r+0x4e6>
 800bc72:	427c      	negs	r4, r7
 800bc74:	4b92      	ldr	r3, [pc, #584]	@ (800bec0 <_dtoa_r+0x590>)
 800bc76:	4d93      	ldr	r5, [pc, #588]	@ (800bec4 <_dtoa_r+0x594>)
 800bc78:	f004 020f 	and.w	r2, r4, #15
 800bc7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc88:	f7f4 fcb6 	bl	80005f8 <__aeabi_dmul>
 800bc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc90:	1124      	asrs	r4, r4, #4
 800bc92:	2300      	movs	r3, #0
 800bc94:	2602      	movs	r6, #2
 800bc96:	2c00      	cmp	r4, #0
 800bc98:	f040 80b2 	bne.w	800be00 <_dtoa_r+0x4d0>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1d3      	bne.n	800bc48 <_dtoa_r+0x318>
 800bca0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bca2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 80b7 	beq.w	800be1a <_dtoa_r+0x4ea>
 800bcac:	4b86      	ldr	r3, [pc, #536]	@ (800bec8 <_dtoa_r+0x598>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	f7f4 ff12 	bl	8000adc <__aeabi_dcmplt>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f000 80ae 	beq.w	800be1a <_dtoa_r+0x4ea>
 800bcbe:	9b07      	ldr	r3, [sp, #28]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 80aa 	beq.w	800be1a <_dtoa_r+0x4ea>
 800bcc6:	9b00      	ldr	r3, [sp, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	dd37      	ble.n	800bd3c <_dtoa_r+0x40c>
 800bccc:	1e7b      	subs	r3, r7, #1
 800bcce:	9304      	str	r3, [sp, #16]
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4b7e      	ldr	r3, [pc, #504]	@ (800becc <_dtoa_r+0x59c>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	f7f4 fc8e 	bl	80005f8 <__aeabi_dmul>
 800bcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bce0:	9c00      	ldr	r4, [sp, #0]
 800bce2:	3601      	adds	r6, #1
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7f4 fc1d 	bl	8000524 <__aeabi_i2d>
 800bcea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcee:	f7f4 fc83 	bl	80005f8 <__aeabi_dmul>
 800bcf2:	4b77      	ldr	r3, [pc, #476]	@ (800bed0 <_dtoa_r+0x5a0>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f7f4 fac9 	bl	800028c <__adddf3>
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd00:	2c00      	cmp	r4, #0
 800bd02:	f040 808d 	bne.w	800be20 <_dtoa_r+0x4f0>
 800bd06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd0a:	4b72      	ldr	r3, [pc, #456]	@ (800bed4 <_dtoa_r+0x5a4>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f7f4 fabb 	bl	8000288 <__aeabi_dsub>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd1a:	462a      	mov	r2, r5
 800bd1c:	4633      	mov	r3, r6
 800bd1e:	f7f4 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	f040 828c 	bne.w	800c240 <_dtoa_r+0x910>
 800bd28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd2c:	462a      	mov	r2, r5
 800bd2e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd32:	f7f4 fed3 	bl	8000adc <__aeabi_dcmplt>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f040 8129 	bne.w	800bf8e <_dtoa_r+0x65e>
 800bd3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bd40:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bd44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f2c0 815b 	blt.w	800c002 <_dtoa_r+0x6d2>
 800bd4c:	2f0e      	cmp	r7, #14
 800bd4e:	f300 8158 	bgt.w	800c002 <_dtoa_r+0x6d2>
 800bd52:	4b5b      	ldr	r3, [pc, #364]	@ (800bec0 <_dtoa_r+0x590>)
 800bd54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd58:	ed93 7b00 	vldr	d7, [r3]
 800bd5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	ed8d 7b00 	vstr	d7, [sp]
 800bd64:	da03      	bge.n	800bd6e <_dtoa_r+0x43e>
 800bd66:	9b07      	ldr	r3, [sp, #28]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f340 8102 	ble.w	800bf72 <_dtoa_r+0x642>
 800bd6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd72:	4656      	mov	r6, sl
 800bd74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd78:	4620      	mov	r0, r4
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	f7f4 fd66 	bl	800084c <__aeabi_ddiv>
 800bd80:	f7f4 feea 	bl	8000b58 <__aeabi_d2iz>
 800bd84:	4680      	mov	r8, r0
 800bd86:	f7f4 fbcd 	bl	8000524 <__aeabi_i2d>
 800bd8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4620      	mov	r0, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd9e:	f7f4 fa73 	bl	8000288 <__aeabi_dsub>
 800bda2:	f806 4b01 	strb.w	r4, [r6], #1
 800bda6:	9d07      	ldr	r5, [sp, #28]
 800bda8:	eba6 040a 	sub.w	r4, r6, sl
 800bdac:	42a5      	cmp	r5, r4
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	f040 8118 	bne.w	800bfe6 <_dtoa_r+0x6b6>
 800bdb6:	f7f4 fa69 	bl	800028c <__adddf3>
 800bdba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	460d      	mov	r5, r1
 800bdc2:	f7f4 fea9 	bl	8000b18 <__aeabi_dcmpgt>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f040 80fa 	bne.w	800bfc0 <_dtoa_r+0x690>
 800bdcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	f7f4 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdd8:	b118      	cbz	r0, 800bde2 <_dtoa_r+0x4b2>
 800bdda:	f018 0f01 	tst.w	r8, #1
 800bdde:	f040 80ef 	bne.w	800bfc0 <_dtoa_r+0x690>
 800bde2:	4649      	mov	r1, r9
 800bde4:	4658      	mov	r0, fp
 800bde6:	f000 fb74 	bl	800c4d2 <_Bfree>
 800bdea:	2300      	movs	r3, #0
 800bdec:	7033      	strb	r3, [r6, #0]
 800bdee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdf0:	3701      	adds	r7, #1
 800bdf2:	601f      	str	r7, [r3, #0]
 800bdf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f43f add1 	beq.w	800b99e <_dtoa_r+0x6e>
 800bdfc:	601e      	str	r6, [r3, #0]
 800bdfe:	e5ce      	b.n	800b99e <_dtoa_r+0x6e>
 800be00:	07e2      	lsls	r2, r4, #31
 800be02:	d505      	bpl.n	800be10 <_dtoa_r+0x4e0>
 800be04:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be08:	f7f4 fbf6 	bl	80005f8 <__aeabi_dmul>
 800be0c:	3601      	adds	r6, #1
 800be0e:	2301      	movs	r3, #1
 800be10:	1064      	asrs	r4, r4, #1
 800be12:	3508      	adds	r5, #8
 800be14:	e73f      	b.n	800bc96 <_dtoa_r+0x366>
 800be16:	2602      	movs	r6, #2
 800be18:	e742      	b.n	800bca0 <_dtoa_r+0x370>
 800be1a:	9c07      	ldr	r4, [sp, #28]
 800be1c:	9704      	str	r7, [sp, #16]
 800be1e:	e761      	b.n	800bce4 <_dtoa_r+0x3b4>
 800be20:	4b27      	ldr	r3, [pc, #156]	@ (800bec0 <_dtoa_r+0x590>)
 800be22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be2c:	4454      	add	r4, sl
 800be2e:	2900      	cmp	r1, #0
 800be30:	d054      	beq.n	800bedc <_dtoa_r+0x5ac>
 800be32:	4929      	ldr	r1, [pc, #164]	@ (800bed8 <_dtoa_r+0x5a8>)
 800be34:	2000      	movs	r0, #0
 800be36:	f7f4 fd09 	bl	800084c <__aeabi_ddiv>
 800be3a:	4633      	mov	r3, r6
 800be3c:	462a      	mov	r2, r5
 800be3e:	f7f4 fa23 	bl	8000288 <__aeabi_dsub>
 800be42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be46:	4656      	mov	r6, sl
 800be48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4c:	f7f4 fe84 	bl	8000b58 <__aeabi_d2iz>
 800be50:	4605      	mov	r5, r0
 800be52:	f7f4 fb67 	bl	8000524 <__aeabi_i2d>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be5e:	f7f4 fa13 	bl	8000288 <__aeabi_dsub>
 800be62:	3530      	adds	r5, #48	@ 0x30
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be6c:	f806 5b01 	strb.w	r5, [r6], #1
 800be70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be74:	f7f4 fe32 	bl	8000adc <__aeabi_dcmplt>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d172      	bne.n	800bf62 <_dtoa_r+0x632>
 800be7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be80:	4911      	ldr	r1, [pc, #68]	@ (800bec8 <_dtoa_r+0x598>)
 800be82:	2000      	movs	r0, #0
 800be84:	f7f4 fa00 	bl	8000288 <__aeabi_dsub>
 800be88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be8c:	f7f4 fe26 	bl	8000adc <__aeabi_dcmplt>
 800be90:	2800      	cmp	r0, #0
 800be92:	f040 8096 	bne.w	800bfc2 <_dtoa_r+0x692>
 800be96:	42a6      	cmp	r6, r4
 800be98:	f43f af50 	beq.w	800bd3c <_dtoa_r+0x40c>
 800be9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bea0:	4b0a      	ldr	r3, [pc, #40]	@ (800becc <_dtoa_r+0x59c>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	f7f4 fba8 	bl	80005f8 <__aeabi_dmul>
 800bea8:	4b08      	ldr	r3, [pc, #32]	@ (800becc <_dtoa_r+0x59c>)
 800beaa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800beae:	2200      	movs	r2, #0
 800beb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bebc:	e7c4      	b.n	800be48 <_dtoa_r+0x518>
 800bebe:	bf00      	nop
 800bec0:	0800e6a0 	.word	0x0800e6a0
 800bec4:	0800e678 	.word	0x0800e678
 800bec8:	3ff00000 	.word	0x3ff00000
 800becc:	40240000 	.word	0x40240000
 800bed0:	401c0000 	.word	0x401c0000
 800bed4:	40140000 	.word	0x40140000
 800bed8:	3fe00000 	.word	0x3fe00000
 800bedc:	4631      	mov	r1, r6
 800bede:	4628      	mov	r0, r5
 800bee0:	f7f4 fb8a 	bl	80005f8 <__aeabi_dmul>
 800bee4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bee8:	9415      	str	r4, [sp, #84]	@ 0x54
 800beea:	4656      	mov	r6, sl
 800beec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bef0:	f7f4 fe32 	bl	8000b58 <__aeabi_d2iz>
 800bef4:	4605      	mov	r5, r0
 800bef6:	f7f4 fb15 	bl	8000524 <__aeabi_i2d>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf02:	f7f4 f9c1 	bl	8000288 <__aeabi_dsub>
 800bf06:	3530      	adds	r5, #48	@ 0x30
 800bf08:	f806 5b01 	strb.w	r5, [r6], #1
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	42a6      	cmp	r6, r4
 800bf12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf16:	f04f 0200 	mov.w	r2, #0
 800bf1a:	d124      	bne.n	800bf66 <_dtoa_r+0x636>
 800bf1c:	4bac      	ldr	r3, [pc, #688]	@ (800c1d0 <_dtoa_r+0x8a0>)
 800bf1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf22:	f7f4 f9b3 	bl	800028c <__adddf3>
 800bf26:	4602      	mov	r2, r0
 800bf28:	460b      	mov	r3, r1
 800bf2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2e:	f7f4 fdf3 	bl	8000b18 <__aeabi_dcmpgt>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d145      	bne.n	800bfc2 <_dtoa_r+0x692>
 800bf36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf3a:	49a5      	ldr	r1, [pc, #660]	@ (800c1d0 <_dtoa_r+0x8a0>)
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	f7f4 f9a3 	bl	8000288 <__aeabi_dsub>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf4a:	f7f4 fdc7 	bl	8000adc <__aeabi_dcmplt>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	f43f aef4 	beq.w	800bd3c <_dtoa_r+0x40c>
 800bf54:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bf56:	1e73      	subs	r3, r6, #1
 800bf58:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf5e:	2b30      	cmp	r3, #48	@ 0x30
 800bf60:	d0f8      	beq.n	800bf54 <_dtoa_r+0x624>
 800bf62:	9f04      	ldr	r7, [sp, #16]
 800bf64:	e73d      	b.n	800bde2 <_dtoa_r+0x4b2>
 800bf66:	4b9b      	ldr	r3, [pc, #620]	@ (800c1d4 <_dtoa_r+0x8a4>)
 800bf68:	f7f4 fb46 	bl	80005f8 <__aeabi_dmul>
 800bf6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf70:	e7bc      	b.n	800beec <_dtoa_r+0x5bc>
 800bf72:	d10c      	bne.n	800bf8e <_dtoa_r+0x65e>
 800bf74:	4b98      	ldr	r3, [pc, #608]	@ (800c1d8 <_dtoa_r+0x8a8>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf84:	f7f4 fdbe 	bl	8000b04 <__aeabi_dcmpge>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	f000 8157 	beq.w	800c23c <_dtoa_r+0x90c>
 800bf8e:	2400      	movs	r4, #0
 800bf90:	4625      	mov	r5, r4
 800bf92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf94:	43db      	mvns	r3, r3
 800bf96:	9304      	str	r3, [sp, #16]
 800bf98:	4656      	mov	r6, sl
 800bf9a:	2700      	movs	r7, #0
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4658      	mov	r0, fp
 800bfa0:	f000 fa97 	bl	800c4d2 <_Bfree>
 800bfa4:	2d00      	cmp	r5, #0
 800bfa6:	d0dc      	beq.n	800bf62 <_dtoa_r+0x632>
 800bfa8:	b12f      	cbz	r7, 800bfb6 <_dtoa_r+0x686>
 800bfaa:	42af      	cmp	r7, r5
 800bfac:	d003      	beq.n	800bfb6 <_dtoa_r+0x686>
 800bfae:	4639      	mov	r1, r7
 800bfb0:	4658      	mov	r0, fp
 800bfb2:	f000 fa8e 	bl	800c4d2 <_Bfree>
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4658      	mov	r0, fp
 800bfba:	f000 fa8a 	bl	800c4d2 <_Bfree>
 800bfbe:	e7d0      	b.n	800bf62 <_dtoa_r+0x632>
 800bfc0:	9704      	str	r7, [sp, #16]
 800bfc2:	4633      	mov	r3, r6
 800bfc4:	461e      	mov	r6, r3
 800bfc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfca:	2a39      	cmp	r2, #57	@ 0x39
 800bfcc:	d107      	bne.n	800bfde <_dtoa_r+0x6ae>
 800bfce:	459a      	cmp	sl, r3
 800bfd0:	d1f8      	bne.n	800bfc4 <_dtoa_r+0x694>
 800bfd2:	9a04      	ldr	r2, [sp, #16]
 800bfd4:	3201      	adds	r2, #1
 800bfd6:	9204      	str	r2, [sp, #16]
 800bfd8:	2230      	movs	r2, #48	@ 0x30
 800bfda:	f88a 2000 	strb.w	r2, [sl]
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	3201      	adds	r2, #1
 800bfe2:	701a      	strb	r2, [r3, #0]
 800bfe4:	e7bd      	b.n	800bf62 <_dtoa_r+0x632>
 800bfe6:	4b7b      	ldr	r3, [pc, #492]	@ (800c1d4 <_dtoa_r+0x8a4>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f7f4 fb05 	bl	80005f8 <__aeabi_dmul>
 800bfee:	2200      	movs	r2, #0
 800bff0:	2300      	movs	r3, #0
 800bff2:	4604      	mov	r4, r0
 800bff4:	460d      	mov	r5, r1
 800bff6:	f7f4 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	f43f aeba 	beq.w	800bd74 <_dtoa_r+0x444>
 800c000:	e6ef      	b.n	800bde2 <_dtoa_r+0x4b2>
 800c002:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c004:	2a00      	cmp	r2, #0
 800c006:	f000 80db 	beq.w	800c1c0 <_dtoa_r+0x890>
 800c00a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c00c:	2a01      	cmp	r2, #1
 800c00e:	f300 80bf 	bgt.w	800c190 <_dtoa_r+0x860>
 800c012:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c014:	2a00      	cmp	r2, #0
 800c016:	f000 80b7 	beq.w	800c188 <_dtoa_r+0x858>
 800c01a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c01e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c020:	4646      	mov	r6, r8
 800c022:	9a08      	ldr	r2, [sp, #32]
 800c024:	2101      	movs	r1, #1
 800c026:	441a      	add	r2, r3
 800c028:	4658      	mov	r0, fp
 800c02a:	4498      	add	r8, r3
 800c02c:	9208      	str	r2, [sp, #32]
 800c02e:	f000 faeb 	bl	800c608 <__i2b>
 800c032:	4605      	mov	r5, r0
 800c034:	b15e      	cbz	r6, 800c04e <_dtoa_r+0x71e>
 800c036:	9b08      	ldr	r3, [sp, #32]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	dd08      	ble.n	800c04e <_dtoa_r+0x71e>
 800c03c:	42b3      	cmp	r3, r6
 800c03e:	9a08      	ldr	r2, [sp, #32]
 800c040:	bfa8      	it	ge
 800c042:	4633      	movge	r3, r6
 800c044:	eba8 0803 	sub.w	r8, r8, r3
 800c048:	1af6      	subs	r6, r6, r3
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	9308      	str	r3, [sp, #32]
 800c04e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c050:	b1f3      	cbz	r3, 800c090 <_dtoa_r+0x760>
 800c052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 80b7 	beq.w	800c1c8 <_dtoa_r+0x898>
 800c05a:	b18c      	cbz	r4, 800c080 <_dtoa_r+0x750>
 800c05c:	4629      	mov	r1, r5
 800c05e:	4622      	mov	r2, r4
 800c060:	4658      	mov	r0, fp
 800c062:	f000 fb91 	bl	800c788 <__pow5mult>
 800c066:	464a      	mov	r2, r9
 800c068:	4601      	mov	r1, r0
 800c06a:	4605      	mov	r5, r0
 800c06c:	4658      	mov	r0, fp
 800c06e:	f000 fae1 	bl	800c634 <__multiply>
 800c072:	4649      	mov	r1, r9
 800c074:	9004      	str	r0, [sp, #16]
 800c076:	4658      	mov	r0, fp
 800c078:	f000 fa2b 	bl	800c4d2 <_Bfree>
 800c07c:	9b04      	ldr	r3, [sp, #16]
 800c07e:	4699      	mov	r9, r3
 800c080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c082:	1b1a      	subs	r2, r3, r4
 800c084:	d004      	beq.n	800c090 <_dtoa_r+0x760>
 800c086:	4649      	mov	r1, r9
 800c088:	4658      	mov	r0, fp
 800c08a:	f000 fb7d 	bl	800c788 <__pow5mult>
 800c08e:	4681      	mov	r9, r0
 800c090:	2101      	movs	r1, #1
 800c092:	4658      	mov	r0, fp
 800c094:	f000 fab8 	bl	800c608 <__i2b>
 800c098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c09a:	4604      	mov	r4, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f000 81cc 	beq.w	800c43a <_dtoa_r+0xb0a>
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	4601      	mov	r1, r0
 800c0a6:	4658      	mov	r0, fp
 800c0a8:	f000 fb6e 	bl	800c788 <__pow5mult>
 800c0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	f300 8095 	bgt.w	800c1e0 <_dtoa_r+0x8b0>
 800c0b6:	9b02      	ldr	r3, [sp, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f040 8087 	bne.w	800c1cc <_dtoa_r+0x89c>
 800c0be:	9b03      	ldr	r3, [sp, #12]
 800c0c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f040 8089 	bne.w	800c1dc <_dtoa_r+0x8ac>
 800c0ca:	9b03      	ldr	r3, [sp, #12]
 800c0cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c0d0:	0d1b      	lsrs	r3, r3, #20
 800c0d2:	051b      	lsls	r3, r3, #20
 800c0d4:	b12b      	cbz	r3, 800c0e2 <_dtoa_r+0x7b2>
 800c0d6:	9b08      	ldr	r3, [sp, #32]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	9308      	str	r3, [sp, #32]
 800c0dc:	f108 0801 	add.w	r8, r8, #1
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 81ad 	beq.w	800c446 <_dtoa_r+0xb16>
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0f2:	6918      	ldr	r0, [r3, #16]
 800c0f4:	f000 fa3c 	bl	800c570 <__hi0bits>
 800c0f8:	f1c0 0020 	rsb	r0, r0, #32
 800c0fc:	9b08      	ldr	r3, [sp, #32]
 800c0fe:	4418      	add	r0, r3
 800c100:	f010 001f 	ands.w	r0, r0, #31
 800c104:	d077      	beq.n	800c1f6 <_dtoa_r+0x8c6>
 800c106:	f1c0 0320 	rsb	r3, r0, #32
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	dd6b      	ble.n	800c1e6 <_dtoa_r+0x8b6>
 800c10e:	9b08      	ldr	r3, [sp, #32]
 800c110:	f1c0 001c 	rsb	r0, r0, #28
 800c114:	4403      	add	r3, r0
 800c116:	4480      	add	r8, r0
 800c118:	4406      	add	r6, r0
 800c11a:	9308      	str	r3, [sp, #32]
 800c11c:	f1b8 0f00 	cmp.w	r8, #0
 800c120:	dd05      	ble.n	800c12e <_dtoa_r+0x7fe>
 800c122:	4649      	mov	r1, r9
 800c124:	4642      	mov	r2, r8
 800c126:	4658      	mov	r0, fp
 800c128:	f000 fb6e 	bl	800c808 <__lshift>
 800c12c:	4681      	mov	r9, r0
 800c12e:	9b08      	ldr	r3, [sp, #32]
 800c130:	2b00      	cmp	r3, #0
 800c132:	dd05      	ble.n	800c140 <_dtoa_r+0x810>
 800c134:	4621      	mov	r1, r4
 800c136:	461a      	mov	r2, r3
 800c138:	4658      	mov	r0, fp
 800c13a:	f000 fb65 	bl	800c808 <__lshift>
 800c13e:	4604      	mov	r4, r0
 800c140:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c142:	2b00      	cmp	r3, #0
 800c144:	d059      	beq.n	800c1fa <_dtoa_r+0x8ca>
 800c146:	4621      	mov	r1, r4
 800c148:	4648      	mov	r0, r9
 800c14a:	f000 fbc9 	bl	800c8e0 <__mcmp>
 800c14e:	2800      	cmp	r0, #0
 800c150:	da53      	bge.n	800c1fa <_dtoa_r+0x8ca>
 800c152:	1e7b      	subs	r3, r7, #1
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	4649      	mov	r1, r9
 800c158:	2300      	movs	r3, #0
 800c15a:	220a      	movs	r2, #10
 800c15c:	4658      	mov	r0, fp
 800c15e:	f000 f9c1 	bl	800c4e4 <__multadd>
 800c162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c164:	4681      	mov	r9, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 816f 	beq.w	800c44a <_dtoa_r+0xb1a>
 800c16c:	2300      	movs	r3, #0
 800c16e:	4629      	mov	r1, r5
 800c170:	220a      	movs	r2, #10
 800c172:	4658      	mov	r0, fp
 800c174:	f000 f9b6 	bl	800c4e4 <__multadd>
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	4605      	mov	r5, r0
 800c17e:	dc67      	bgt.n	800c250 <_dtoa_r+0x920>
 800c180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c182:	2b02      	cmp	r3, #2
 800c184:	dc41      	bgt.n	800c20a <_dtoa_r+0x8da>
 800c186:	e063      	b.n	800c250 <_dtoa_r+0x920>
 800c188:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c18a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c18e:	e746      	b.n	800c01e <_dtoa_r+0x6ee>
 800c190:	9b07      	ldr	r3, [sp, #28]
 800c192:	1e5c      	subs	r4, r3, #1
 800c194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c196:	42a3      	cmp	r3, r4
 800c198:	bfbf      	itttt	lt
 800c19a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c19c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c19e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c1a0:	1ae3      	sublt	r3, r4, r3
 800c1a2:	bfb4      	ite	lt
 800c1a4:	18d2      	addlt	r2, r2, r3
 800c1a6:	1b1c      	subge	r4, r3, r4
 800c1a8:	9b07      	ldr	r3, [sp, #28]
 800c1aa:	bfbc      	itt	lt
 800c1ac:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c1ae:	2400      	movlt	r4, #0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	bfb5      	itete	lt
 800c1b4:	eba8 0603 	sublt.w	r6, r8, r3
 800c1b8:	9b07      	ldrge	r3, [sp, #28]
 800c1ba:	2300      	movlt	r3, #0
 800c1bc:	4646      	movge	r6, r8
 800c1be:	e730      	b.n	800c022 <_dtoa_r+0x6f2>
 800c1c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c1c4:	4646      	mov	r6, r8
 800c1c6:	e735      	b.n	800c034 <_dtoa_r+0x704>
 800c1c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1ca:	e75c      	b.n	800c086 <_dtoa_r+0x756>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	e788      	b.n	800c0e2 <_dtoa_r+0x7b2>
 800c1d0:	3fe00000 	.word	0x3fe00000
 800c1d4:	40240000 	.word	0x40240000
 800c1d8:	40140000 	.word	0x40140000
 800c1dc:	9b02      	ldr	r3, [sp, #8]
 800c1de:	e780      	b.n	800c0e2 <_dtoa_r+0x7b2>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1e4:	e782      	b.n	800c0ec <_dtoa_r+0x7bc>
 800c1e6:	d099      	beq.n	800c11c <_dtoa_r+0x7ec>
 800c1e8:	9a08      	ldr	r2, [sp, #32]
 800c1ea:	331c      	adds	r3, #28
 800c1ec:	441a      	add	r2, r3
 800c1ee:	4498      	add	r8, r3
 800c1f0:	441e      	add	r6, r3
 800c1f2:	9208      	str	r2, [sp, #32]
 800c1f4:	e792      	b.n	800c11c <_dtoa_r+0x7ec>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	e7f6      	b.n	800c1e8 <_dtoa_r+0x8b8>
 800c1fa:	9b07      	ldr	r3, [sp, #28]
 800c1fc:	9704      	str	r7, [sp, #16]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dc20      	bgt.n	800c244 <_dtoa_r+0x914>
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c206:	2b02      	cmp	r3, #2
 800c208:	dd1e      	ble.n	800c248 <_dtoa_r+0x918>
 800c20a:	9b00      	ldr	r3, [sp, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f47f aec0 	bne.w	800bf92 <_dtoa_r+0x662>
 800c212:	4621      	mov	r1, r4
 800c214:	2205      	movs	r2, #5
 800c216:	4658      	mov	r0, fp
 800c218:	f000 f964 	bl	800c4e4 <__multadd>
 800c21c:	4601      	mov	r1, r0
 800c21e:	4604      	mov	r4, r0
 800c220:	4648      	mov	r0, r9
 800c222:	f000 fb5d 	bl	800c8e0 <__mcmp>
 800c226:	2800      	cmp	r0, #0
 800c228:	f77f aeb3 	ble.w	800bf92 <_dtoa_r+0x662>
 800c22c:	4656      	mov	r6, sl
 800c22e:	2331      	movs	r3, #49	@ 0x31
 800c230:	f806 3b01 	strb.w	r3, [r6], #1
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	3301      	adds	r3, #1
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	e6ae      	b.n	800bf9a <_dtoa_r+0x66a>
 800c23c:	9c07      	ldr	r4, [sp, #28]
 800c23e:	9704      	str	r7, [sp, #16]
 800c240:	4625      	mov	r5, r4
 800c242:	e7f3      	b.n	800c22c <_dtoa_r+0x8fc>
 800c244:	9b07      	ldr	r3, [sp, #28]
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 8101 	beq.w	800c452 <_dtoa_r+0xb22>
 800c250:	2e00      	cmp	r6, #0
 800c252:	dd05      	ble.n	800c260 <_dtoa_r+0x930>
 800c254:	4629      	mov	r1, r5
 800c256:	4632      	mov	r2, r6
 800c258:	4658      	mov	r0, fp
 800c25a:	f000 fad5 	bl	800c808 <__lshift>
 800c25e:	4605      	mov	r5, r0
 800c260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c262:	2b00      	cmp	r3, #0
 800c264:	d059      	beq.n	800c31a <_dtoa_r+0x9ea>
 800c266:	6869      	ldr	r1, [r5, #4]
 800c268:	4658      	mov	r0, fp
 800c26a:	f000 f90d 	bl	800c488 <_Balloc>
 800c26e:	4606      	mov	r6, r0
 800c270:	b920      	cbnz	r0, 800c27c <_dtoa_r+0x94c>
 800c272:	4b83      	ldr	r3, [pc, #524]	@ (800c480 <_dtoa_r+0xb50>)
 800c274:	4602      	mov	r2, r0
 800c276:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c27a:	e480      	b.n	800bb7e <_dtoa_r+0x24e>
 800c27c:	692a      	ldr	r2, [r5, #16]
 800c27e:	3202      	adds	r2, #2
 800c280:	0092      	lsls	r2, r2, #2
 800c282:	f105 010c 	add.w	r1, r5, #12
 800c286:	300c      	adds	r0, #12
 800c288:	f7fd fbb0 	bl	80099ec <memcpy>
 800c28c:	2201      	movs	r2, #1
 800c28e:	4631      	mov	r1, r6
 800c290:	4658      	mov	r0, fp
 800c292:	f000 fab9 	bl	800c808 <__lshift>
 800c296:	f10a 0301 	add.w	r3, sl, #1
 800c29a:	9307      	str	r3, [sp, #28]
 800c29c:	9b00      	ldr	r3, [sp, #0]
 800c29e:	4453      	add	r3, sl
 800c2a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2a2:	9b02      	ldr	r3, [sp, #8]
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	462f      	mov	r7, r5
 800c2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	9b07      	ldr	r3, [sp, #28]
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	4648      	mov	r0, r9
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	f7ff fab0 	bl	800b81c <quorem>
 800c2bc:	4639      	mov	r1, r7
 800c2be:	9002      	str	r0, [sp, #8]
 800c2c0:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2c4:	4648      	mov	r0, r9
 800c2c6:	f000 fb0b 	bl	800c8e0 <__mcmp>
 800c2ca:	462a      	mov	r2, r5
 800c2cc:	9008      	str	r0, [sp, #32]
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	4658      	mov	r0, fp
 800c2d2:	f000 fb21 	bl	800c918 <__mdiff>
 800c2d6:	68c2      	ldr	r2, [r0, #12]
 800c2d8:	4606      	mov	r6, r0
 800c2da:	bb02      	cbnz	r2, 800c31e <_dtoa_r+0x9ee>
 800c2dc:	4601      	mov	r1, r0
 800c2de:	4648      	mov	r0, r9
 800c2e0:	f000 fafe 	bl	800c8e0 <__mcmp>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2ec:	f000 f8f1 	bl	800c4d2 <_Bfree>
 800c2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2f4:	9e07      	ldr	r6, [sp, #28]
 800c2f6:	ea43 0102 	orr.w	r1, r3, r2
 800c2fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2fc:	4319      	orrs	r1, r3
 800c2fe:	d110      	bne.n	800c322 <_dtoa_r+0x9f2>
 800c300:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c304:	d029      	beq.n	800c35a <_dtoa_r+0xa2a>
 800c306:	9b08      	ldr	r3, [sp, #32]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	dd02      	ble.n	800c312 <_dtoa_r+0x9e2>
 800c30c:	9b02      	ldr	r3, [sp, #8]
 800c30e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c312:	9b00      	ldr	r3, [sp, #0]
 800c314:	f883 8000 	strb.w	r8, [r3]
 800c318:	e640      	b.n	800bf9c <_dtoa_r+0x66c>
 800c31a:	4628      	mov	r0, r5
 800c31c:	e7bb      	b.n	800c296 <_dtoa_r+0x966>
 800c31e:	2201      	movs	r2, #1
 800c320:	e7e1      	b.n	800c2e6 <_dtoa_r+0x9b6>
 800c322:	9b08      	ldr	r3, [sp, #32]
 800c324:	2b00      	cmp	r3, #0
 800c326:	db04      	blt.n	800c332 <_dtoa_r+0xa02>
 800c328:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c32a:	430b      	orrs	r3, r1
 800c32c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c32e:	430b      	orrs	r3, r1
 800c330:	d120      	bne.n	800c374 <_dtoa_r+0xa44>
 800c332:	2a00      	cmp	r2, #0
 800c334:	dded      	ble.n	800c312 <_dtoa_r+0x9e2>
 800c336:	4649      	mov	r1, r9
 800c338:	2201      	movs	r2, #1
 800c33a:	4658      	mov	r0, fp
 800c33c:	f000 fa64 	bl	800c808 <__lshift>
 800c340:	4621      	mov	r1, r4
 800c342:	4681      	mov	r9, r0
 800c344:	f000 facc 	bl	800c8e0 <__mcmp>
 800c348:	2800      	cmp	r0, #0
 800c34a:	dc03      	bgt.n	800c354 <_dtoa_r+0xa24>
 800c34c:	d1e1      	bne.n	800c312 <_dtoa_r+0x9e2>
 800c34e:	f018 0f01 	tst.w	r8, #1
 800c352:	d0de      	beq.n	800c312 <_dtoa_r+0x9e2>
 800c354:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c358:	d1d8      	bne.n	800c30c <_dtoa_r+0x9dc>
 800c35a:	9a00      	ldr	r2, [sp, #0]
 800c35c:	2339      	movs	r3, #57	@ 0x39
 800c35e:	7013      	strb	r3, [r2, #0]
 800c360:	4633      	mov	r3, r6
 800c362:	461e      	mov	r6, r3
 800c364:	3b01      	subs	r3, #1
 800c366:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c36a:	2a39      	cmp	r2, #57	@ 0x39
 800c36c:	d052      	beq.n	800c414 <_dtoa_r+0xae4>
 800c36e:	3201      	adds	r2, #1
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	e613      	b.n	800bf9c <_dtoa_r+0x66c>
 800c374:	2a00      	cmp	r2, #0
 800c376:	dd07      	ble.n	800c388 <_dtoa_r+0xa58>
 800c378:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c37c:	d0ed      	beq.n	800c35a <_dtoa_r+0xa2a>
 800c37e:	9a00      	ldr	r2, [sp, #0]
 800c380:	f108 0301 	add.w	r3, r8, #1
 800c384:	7013      	strb	r3, [r2, #0]
 800c386:	e609      	b.n	800bf9c <_dtoa_r+0x66c>
 800c388:	9b07      	ldr	r3, [sp, #28]
 800c38a:	9a07      	ldr	r2, [sp, #28]
 800c38c:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c392:	4293      	cmp	r3, r2
 800c394:	d028      	beq.n	800c3e8 <_dtoa_r+0xab8>
 800c396:	4649      	mov	r1, r9
 800c398:	2300      	movs	r3, #0
 800c39a:	220a      	movs	r2, #10
 800c39c:	4658      	mov	r0, fp
 800c39e:	f000 f8a1 	bl	800c4e4 <__multadd>
 800c3a2:	42af      	cmp	r7, r5
 800c3a4:	4681      	mov	r9, r0
 800c3a6:	f04f 0300 	mov.w	r3, #0
 800c3aa:	f04f 020a 	mov.w	r2, #10
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	4658      	mov	r0, fp
 800c3b2:	d107      	bne.n	800c3c4 <_dtoa_r+0xa94>
 800c3b4:	f000 f896 	bl	800c4e4 <__multadd>
 800c3b8:	4607      	mov	r7, r0
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	9b07      	ldr	r3, [sp, #28]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	9307      	str	r3, [sp, #28]
 800c3c2:	e774      	b.n	800c2ae <_dtoa_r+0x97e>
 800c3c4:	f000 f88e 	bl	800c4e4 <__multadd>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4607      	mov	r7, r0
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	220a      	movs	r2, #10
 800c3d0:	4658      	mov	r0, fp
 800c3d2:	f000 f887 	bl	800c4e4 <__multadd>
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	e7f0      	b.n	800c3bc <_dtoa_r+0xa8c>
 800c3da:	9b00      	ldr	r3, [sp, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bfcc      	ite	gt
 800c3e0:	461e      	movgt	r6, r3
 800c3e2:	2601      	movle	r6, #1
 800c3e4:	4456      	add	r6, sl
 800c3e6:	2700      	movs	r7, #0
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	4658      	mov	r0, fp
 800c3ee:	f000 fa0b 	bl	800c808 <__lshift>
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4681      	mov	r9, r0
 800c3f6:	f000 fa73 	bl	800c8e0 <__mcmp>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	dcb0      	bgt.n	800c360 <_dtoa_r+0xa30>
 800c3fe:	d102      	bne.n	800c406 <_dtoa_r+0xad6>
 800c400:	f018 0f01 	tst.w	r8, #1
 800c404:	d1ac      	bne.n	800c360 <_dtoa_r+0xa30>
 800c406:	4633      	mov	r3, r6
 800c408:	461e      	mov	r6, r3
 800c40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c40e:	2a30      	cmp	r2, #48	@ 0x30
 800c410:	d0fa      	beq.n	800c408 <_dtoa_r+0xad8>
 800c412:	e5c3      	b.n	800bf9c <_dtoa_r+0x66c>
 800c414:	459a      	cmp	sl, r3
 800c416:	d1a4      	bne.n	800c362 <_dtoa_r+0xa32>
 800c418:	9b04      	ldr	r3, [sp, #16]
 800c41a:	3301      	adds	r3, #1
 800c41c:	9304      	str	r3, [sp, #16]
 800c41e:	2331      	movs	r3, #49	@ 0x31
 800c420:	f88a 3000 	strb.w	r3, [sl]
 800c424:	e5ba      	b.n	800bf9c <_dtoa_r+0x66c>
 800c426:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c428:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c484 <_dtoa_r+0xb54>
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f43f aab6 	beq.w	800b99e <_dtoa_r+0x6e>
 800c432:	f10a 0308 	add.w	r3, sl, #8
 800c436:	f7ff bab0 	b.w	800b99a <_dtoa_r+0x6a>
 800c43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	f77f ae3a 	ble.w	800c0b6 <_dtoa_r+0x786>
 800c442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c444:	930a      	str	r3, [sp, #40]	@ 0x28
 800c446:	2001      	movs	r0, #1
 800c448:	e658      	b.n	800c0fc <_dtoa_r+0x7cc>
 800c44a:	9b00      	ldr	r3, [sp, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f77f aed9 	ble.w	800c204 <_dtoa_r+0x8d4>
 800c452:	4656      	mov	r6, sl
 800c454:	4621      	mov	r1, r4
 800c456:	4648      	mov	r0, r9
 800c458:	f7ff f9e0 	bl	800b81c <quorem>
 800c45c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c460:	f806 8b01 	strb.w	r8, [r6], #1
 800c464:	9b00      	ldr	r3, [sp, #0]
 800c466:	eba6 020a 	sub.w	r2, r6, sl
 800c46a:	4293      	cmp	r3, r2
 800c46c:	ddb5      	ble.n	800c3da <_dtoa_r+0xaaa>
 800c46e:	4649      	mov	r1, r9
 800c470:	2300      	movs	r3, #0
 800c472:	220a      	movs	r2, #10
 800c474:	4658      	mov	r0, fp
 800c476:	f000 f835 	bl	800c4e4 <__multadd>
 800c47a:	4681      	mov	r9, r0
 800c47c:	e7ea      	b.n	800c454 <_dtoa_r+0xb24>
 800c47e:	bf00      	nop
 800c480:	0800e5a5 	.word	0x0800e5a5
 800c484:	0800e598 	.word	0x0800e598

0800c488 <_Balloc>:
 800c488:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c48a:	b570      	push	{r4, r5, r6, lr}
 800c48c:	4605      	mov	r5, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b17b      	cbz	r3, 800c4b2 <_Balloc+0x2a>
 800c492:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c494:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c498:	b9a0      	cbnz	r0, 800c4c4 <_Balloc+0x3c>
 800c49a:	2101      	movs	r1, #1
 800c49c:	fa01 f604 	lsl.w	r6, r1, r4
 800c4a0:	1d72      	adds	r2, r6, #5
 800c4a2:	0092      	lsls	r2, r2, #2
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 fbdf 	bl	800cc68 <_calloc_r>
 800c4aa:	b148      	cbz	r0, 800c4c0 <_Balloc+0x38>
 800c4ac:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c4b0:	e00b      	b.n	800c4ca <_Balloc+0x42>
 800c4b2:	2221      	movs	r2, #33	@ 0x21
 800c4b4:	2104      	movs	r1, #4
 800c4b6:	f000 fbd7 	bl	800cc68 <_calloc_r>
 800c4ba:	6468      	str	r0, [r5, #68]	@ 0x44
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d1e8      	bne.n	800c492 <_Balloc+0xa>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	6802      	ldr	r2, [r0, #0]
 800c4c6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4d0:	e7f7      	b.n	800c4c2 <_Balloc+0x3a>

0800c4d2 <_Bfree>:
 800c4d2:	b131      	cbz	r1, 800c4e2 <_Bfree+0x10>
 800c4d4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c4d6:	684a      	ldr	r2, [r1, #4]
 800c4d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c4dc:	6008      	str	r0, [r1, #0]
 800c4de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c4e2:	4770      	bx	lr

0800c4e4 <__multadd>:
 800c4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e8:	690d      	ldr	r5, [r1, #16]
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	461e      	mov	r6, r3
 800c4f0:	f101 0c14 	add.w	ip, r1, #20
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4fa:	b299      	uxth	r1, r3
 800c4fc:	fb02 6101 	mla	r1, r2, r1, r6
 800c500:	0c1e      	lsrs	r6, r3, #16
 800c502:	0c0b      	lsrs	r3, r1, #16
 800c504:	fb02 3306 	mla	r3, r2, r6, r3
 800c508:	b289      	uxth	r1, r1
 800c50a:	3001      	adds	r0, #1
 800c50c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c510:	4285      	cmp	r5, r0
 800c512:	f84c 1b04 	str.w	r1, [ip], #4
 800c516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c51a:	dcec      	bgt.n	800c4f6 <__multadd+0x12>
 800c51c:	b30e      	cbz	r6, 800c562 <__multadd+0x7e>
 800c51e:	68a3      	ldr	r3, [r4, #8]
 800c520:	42ab      	cmp	r3, r5
 800c522:	dc19      	bgt.n	800c558 <__multadd+0x74>
 800c524:	6861      	ldr	r1, [r4, #4]
 800c526:	4638      	mov	r0, r7
 800c528:	3101      	adds	r1, #1
 800c52a:	f7ff ffad 	bl	800c488 <_Balloc>
 800c52e:	4680      	mov	r8, r0
 800c530:	b928      	cbnz	r0, 800c53e <__multadd+0x5a>
 800c532:	4602      	mov	r2, r0
 800c534:	4b0c      	ldr	r3, [pc, #48]	@ (800c568 <__multadd+0x84>)
 800c536:	480d      	ldr	r0, [pc, #52]	@ (800c56c <__multadd+0x88>)
 800c538:	21ba      	movs	r1, #186	@ 0xba
 800c53a:	f000 fb77 	bl	800cc2c <__assert_func>
 800c53e:	6922      	ldr	r2, [r4, #16]
 800c540:	3202      	adds	r2, #2
 800c542:	f104 010c 	add.w	r1, r4, #12
 800c546:	0092      	lsls	r2, r2, #2
 800c548:	300c      	adds	r0, #12
 800c54a:	f7fd fa4f 	bl	80099ec <memcpy>
 800c54e:	4621      	mov	r1, r4
 800c550:	4638      	mov	r0, r7
 800c552:	f7ff ffbe 	bl	800c4d2 <_Bfree>
 800c556:	4644      	mov	r4, r8
 800c558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c55c:	3501      	adds	r5, #1
 800c55e:	615e      	str	r6, [r3, #20]
 800c560:	6125      	str	r5, [r4, #16]
 800c562:	4620      	mov	r0, r4
 800c564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c568:	0800e5a5 	.word	0x0800e5a5
 800c56c:	0800e60e 	.word	0x0800e60e

0800c570 <__hi0bits>:
 800c570:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c574:	4603      	mov	r3, r0
 800c576:	bf36      	itet	cc
 800c578:	0403      	lslcc	r3, r0, #16
 800c57a:	2000      	movcs	r0, #0
 800c57c:	2010      	movcc	r0, #16
 800c57e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c582:	bf3c      	itt	cc
 800c584:	021b      	lslcc	r3, r3, #8
 800c586:	3008      	addcc	r0, #8
 800c588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c58c:	bf3c      	itt	cc
 800c58e:	011b      	lslcc	r3, r3, #4
 800c590:	3004      	addcc	r0, #4
 800c592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c596:	bf3c      	itt	cc
 800c598:	009b      	lslcc	r3, r3, #2
 800c59a:	3002      	addcc	r0, #2
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	db05      	blt.n	800c5ac <__hi0bits+0x3c>
 800c5a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5a4:	f100 0001 	add.w	r0, r0, #1
 800c5a8:	bf08      	it	eq
 800c5aa:	2020      	moveq	r0, #32
 800c5ac:	4770      	bx	lr

0800c5ae <__lo0bits>:
 800c5ae:	6803      	ldr	r3, [r0, #0]
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	f013 0007 	ands.w	r0, r3, #7
 800c5b6:	d00b      	beq.n	800c5d0 <__lo0bits+0x22>
 800c5b8:	07d9      	lsls	r1, r3, #31
 800c5ba:	d421      	bmi.n	800c600 <__lo0bits+0x52>
 800c5bc:	0798      	lsls	r0, r3, #30
 800c5be:	bf49      	itett	mi
 800c5c0:	085b      	lsrmi	r3, r3, #1
 800c5c2:	089b      	lsrpl	r3, r3, #2
 800c5c4:	2001      	movmi	r0, #1
 800c5c6:	6013      	strmi	r3, [r2, #0]
 800c5c8:	bf5c      	itt	pl
 800c5ca:	6013      	strpl	r3, [r2, #0]
 800c5cc:	2002      	movpl	r0, #2
 800c5ce:	4770      	bx	lr
 800c5d0:	b299      	uxth	r1, r3
 800c5d2:	b909      	cbnz	r1, 800c5d8 <__lo0bits+0x2a>
 800c5d4:	0c1b      	lsrs	r3, r3, #16
 800c5d6:	2010      	movs	r0, #16
 800c5d8:	b2d9      	uxtb	r1, r3
 800c5da:	b909      	cbnz	r1, 800c5e0 <__lo0bits+0x32>
 800c5dc:	3008      	adds	r0, #8
 800c5de:	0a1b      	lsrs	r3, r3, #8
 800c5e0:	0719      	lsls	r1, r3, #28
 800c5e2:	bf04      	itt	eq
 800c5e4:	091b      	lsreq	r3, r3, #4
 800c5e6:	3004      	addeq	r0, #4
 800c5e8:	0799      	lsls	r1, r3, #30
 800c5ea:	bf04      	itt	eq
 800c5ec:	089b      	lsreq	r3, r3, #2
 800c5ee:	3002      	addeq	r0, #2
 800c5f0:	07d9      	lsls	r1, r3, #31
 800c5f2:	d403      	bmi.n	800c5fc <__lo0bits+0x4e>
 800c5f4:	085b      	lsrs	r3, r3, #1
 800c5f6:	f100 0001 	add.w	r0, r0, #1
 800c5fa:	d003      	beq.n	800c604 <__lo0bits+0x56>
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	4770      	bx	lr
 800c600:	2000      	movs	r0, #0
 800c602:	4770      	bx	lr
 800c604:	2020      	movs	r0, #32
 800c606:	4770      	bx	lr

0800c608 <__i2b>:
 800c608:	b510      	push	{r4, lr}
 800c60a:	460c      	mov	r4, r1
 800c60c:	2101      	movs	r1, #1
 800c60e:	f7ff ff3b 	bl	800c488 <_Balloc>
 800c612:	4602      	mov	r2, r0
 800c614:	b928      	cbnz	r0, 800c622 <__i2b+0x1a>
 800c616:	4b05      	ldr	r3, [pc, #20]	@ (800c62c <__i2b+0x24>)
 800c618:	4805      	ldr	r0, [pc, #20]	@ (800c630 <__i2b+0x28>)
 800c61a:	f240 1145 	movw	r1, #325	@ 0x145
 800c61e:	f000 fb05 	bl	800cc2c <__assert_func>
 800c622:	2301      	movs	r3, #1
 800c624:	6144      	str	r4, [r0, #20]
 800c626:	6103      	str	r3, [r0, #16]
 800c628:	bd10      	pop	{r4, pc}
 800c62a:	bf00      	nop
 800c62c:	0800e5a5 	.word	0x0800e5a5
 800c630:	0800e60e 	.word	0x0800e60e

0800c634 <__multiply>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	4614      	mov	r4, r2
 800c63a:	690a      	ldr	r2, [r1, #16]
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	429a      	cmp	r2, r3
 800c640:	bfa8      	it	ge
 800c642:	4623      	movge	r3, r4
 800c644:	460f      	mov	r7, r1
 800c646:	bfa4      	itt	ge
 800c648:	460c      	movge	r4, r1
 800c64a:	461f      	movge	r7, r3
 800c64c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c650:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c654:	68a3      	ldr	r3, [r4, #8]
 800c656:	6861      	ldr	r1, [r4, #4]
 800c658:	eb0a 0609 	add.w	r6, sl, r9
 800c65c:	42b3      	cmp	r3, r6
 800c65e:	b085      	sub	sp, #20
 800c660:	bfb8      	it	lt
 800c662:	3101      	addlt	r1, #1
 800c664:	f7ff ff10 	bl	800c488 <_Balloc>
 800c668:	b930      	cbnz	r0, 800c678 <__multiply+0x44>
 800c66a:	4602      	mov	r2, r0
 800c66c:	4b44      	ldr	r3, [pc, #272]	@ (800c780 <__multiply+0x14c>)
 800c66e:	4845      	ldr	r0, [pc, #276]	@ (800c784 <__multiply+0x150>)
 800c670:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c674:	f000 fada 	bl	800cc2c <__assert_func>
 800c678:	f100 0514 	add.w	r5, r0, #20
 800c67c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c680:	462b      	mov	r3, r5
 800c682:	2200      	movs	r2, #0
 800c684:	4543      	cmp	r3, r8
 800c686:	d321      	bcc.n	800c6cc <__multiply+0x98>
 800c688:	f107 0114 	add.w	r1, r7, #20
 800c68c:	f104 0214 	add.w	r2, r4, #20
 800c690:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c694:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c698:	9302      	str	r3, [sp, #8]
 800c69a:	1b13      	subs	r3, r2, r4
 800c69c:	3b15      	subs	r3, #21
 800c69e:	f023 0303 	bic.w	r3, r3, #3
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	f104 0715 	add.w	r7, r4, #21
 800c6a8:	42ba      	cmp	r2, r7
 800c6aa:	bf38      	it	cc
 800c6ac:	2304      	movcc	r3, #4
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	9b02      	ldr	r3, [sp, #8]
 800c6b2:	9103      	str	r1, [sp, #12]
 800c6b4:	428b      	cmp	r3, r1
 800c6b6:	d80c      	bhi.n	800c6d2 <__multiply+0x9e>
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	dd03      	ble.n	800c6c4 <__multiply+0x90>
 800c6bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d05b      	beq.n	800c77c <__multiply+0x148>
 800c6c4:	6106      	str	r6, [r0, #16]
 800c6c6:	b005      	add	sp, #20
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	f843 2b04 	str.w	r2, [r3], #4
 800c6d0:	e7d8      	b.n	800c684 <__multiply+0x50>
 800c6d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6d6:	f1ba 0f00 	cmp.w	sl, #0
 800c6da:	d024      	beq.n	800c726 <__multiply+0xf2>
 800c6dc:	f104 0e14 	add.w	lr, r4, #20
 800c6e0:	46a9      	mov	r9, r5
 800c6e2:	f04f 0c00 	mov.w	ip, #0
 800c6e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6ea:	f8d9 3000 	ldr.w	r3, [r9]
 800c6ee:	fa1f fb87 	uxth.w	fp, r7
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c6fc:	f8d9 7000 	ldr.w	r7, [r9]
 800c700:	4463      	add	r3, ip
 800c702:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c706:	fb0a c70b 	mla	r7, sl, fp, ip
 800c70a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c70e:	b29b      	uxth	r3, r3
 800c710:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c714:	4572      	cmp	r2, lr
 800c716:	f849 3b04 	str.w	r3, [r9], #4
 800c71a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c71e:	d8e2      	bhi.n	800c6e6 <__multiply+0xb2>
 800c720:	9b01      	ldr	r3, [sp, #4]
 800c722:	f845 c003 	str.w	ip, [r5, r3]
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c72c:	3104      	adds	r1, #4
 800c72e:	f1b9 0f00 	cmp.w	r9, #0
 800c732:	d021      	beq.n	800c778 <__multiply+0x144>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	f104 0c14 	add.w	ip, r4, #20
 800c73a:	46ae      	mov	lr, r5
 800c73c:	f04f 0a00 	mov.w	sl, #0
 800c740:	f8bc b000 	ldrh.w	fp, [ip]
 800c744:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c748:	fb09 770b 	mla	r7, r9, fp, r7
 800c74c:	4457      	add	r7, sl
 800c74e:	b29b      	uxth	r3, r3
 800c750:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c754:	f84e 3b04 	str.w	r3, [lr], #4
 800c758:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c75c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c760:	f8be 3000 	ldrh.w	r3, [lr]
 800c764:	fb09 330a 	mla	r3, r9, sl, r3
 800c768:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c76c:	4562      	cmp	r2, ip
 800c76e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c772:	d8e5      	bhi.n	800c740 <__multiply+0x10c>
 800c774:	9f01      	ldr	r7, [sp, #4]
 800c776:	51eb      	str	r3, [r5, r7]
 800c778:	3504      	adds	r5, #4
 800c77a:	e799      	b.n	800c6b0 <__multiply+0x7c>
 800c77c:	3e01      	subs	r6, #1
 800c77e:	e79b      	b.n	800c6b8 <__multiply+0x84>
 800c780:	0800e5a5 	.word	0x0800e5a5
 800c784:	0800e60e 	.word	0x0800e60e

0800c788 <__pow5mult>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	4615      	mov	r5, r2
 800c78e:	f012 0203 	ands.w	r2, r2, #3
 800c792:	4607      	mov	r7, r0
 800c794:	460e      	mov	r6, r1
 800c796:	d007      	beq.n	800c7a8 <__pow5mult+0x20>
 800c798:	4c1a      	ldr	r4, [pc, #104]	@ (800c804 <__pow5mult+0x7c>)
 800c79a:	3a01      	subs	r2, #1
 800c79c:	2300      	movs	r3, #0
 800c79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7a2:	f7ff fe9f 	bl	800c4e4 <__multadd>
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	10ad      	asrs	r5, r5, #2
 800c7aa:	d027      	beq.n	800c7fc <__pow5mult+0x74>
 800c7ac:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800c7ae:	b944      	cbnz	r4, 800c7c2 <__pow5mult+0x3a>
 800c7b0:	f240 2171 	movw	r1, #625	@ 0x271
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff ff27 	bl	800c608 <__i2b>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	6438      	str	r0, [r7, #64]	@ 0x40
 800c7be:	4604      	mov	r4, r0
 800c7c0:	6003      	str	r3, [r0, #0]
 800c7c2:	f04f 0900 	mov.w	r9, #0
 800c7c6:	07eb      	lsls	r3, r5, #31
 800c7c8:	d50a      	bpl.n	800c7e0 <__pow5mult+0x58>
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	f7ff ff30 	bl	800c634 <__multiply>
 800c7d4:	4631      	mov	r1, r6
 800c7d6:	4680      	mov	r8, r0
 800c7d8:	4638      	mov	r0, r7
 800c7da:	f7ff fe7a 	bl	800c4d2 <_Bfree>
 800c7de:	4646      	mov	r6, r8
 800c7e0:	106d      	asrs	r5, r5, #1
 800c7e2:	d00b      	beq.n	800c7fc <__pow5mult+0x74>
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	b938      	cbnz	r0, 800c7f8 <__pow5mult+0x70>
 800c7e8:	4622      	mov	r2, r4
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	f7ff ff21 	bl	800c634 <__multiply>
 800c7f2:	6020      	str	r0, [r4, #0]
 800c7f4:	f8c0 9000 	str.w	r9, [r0]
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	e7e4      	b.n	800c7c6 <__pow5mult+0x3e>
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c802:	bf00      	nop
 800c804:	0800e668 	.word	0x0800e668

0800c808 <__lshift>:
 800c808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c80c:	460c      	mov	r4, r1
 800c80e:	6849      	ldr	r1, [r1, #4]
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	4607      	mov	r7, r0
 800c81a:	4691      	mov	r9, r2
 800c81c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c820:	f108 0601 	add.w	r6, r8, #1
 800c824:	42b3      	cmp	r3, r6
 800c826:	db0b      	blt.n	800c840 <__lshift+0x38>
 800c828:	4638      	mov	r0, r7
 800c82a:	f7ff fe2d 	bl	800c488 <_Balloc>
 800c82e:	4605      	mov	r5, r0
 800c830:	b948      	cbnz	r0, 800c846 <__lshift+0x3e>
 800c832:	4602      	mov	r2, r0
 800c834:	4b28      	ldr	r3, [pc, #160]	@ (800c8d8 <__lshift+0xd0>)
 800c836:	4829      	ldr	r0, [pc, #164]	@ (800c8dc <__lshift+0xd4>)
 800c838:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c83c:	f000 f9f6 	bl	800cc2c <__assert_func>
 800c840:	3101      	adds	r1, #1
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	e7ee      	b.n	800c824 <__lshift+0x1c>
 800c846:	2300      	movs	r3, #0
 800c848:	f100 0114 	add.w	r1, r0, #20
 800c84c:	f100 0210 	add.w	r2, r0, #16
 800c850:	4618      	mov	r0, r3
 800c852:	4553      	cmp	r3, sl
 800c854:	db33      	blt.n	800c8be <__lshift+0xb6>
 800c856:	6920      	ldr	r0, [r4, #16]
 800c858:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c85c:	f104 0314 	add.w	r3, r4, #20
 800c860:	f019 091f 	ands.w	r9, r9, #31
 800c864:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c868:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c86c:	d02b      	beq.n	800c8c6 <__lshift+0xbe>
 800c86e:	f1c9 0e20 	rsb	lr, r9, #32
 800c872:	468a      	mov	sl, r1
 800c874:	2200      	movs	r2, #0
 800c876:	6818      	ldr	r0, [r3, #0]
 800c878:	fa00 f009 	lsl.w	r0, r0, r9
 800c87c:	4310      	orrs	r0, r2
 800c87e:	f84a 0b04 	str.w	r0, [sl], #4
 800c882:	f853 2b04 	ldr.w	r2, [r3], #4
 800c886:	459c      	cmp	ip, r3
 800c888:	fa22 f20e 	lsr.w	r2, r2, lr
 800c88c:	d8f3      	bhi.n	800c876 <__lshift+0x6e>
 800c88e:	ebac 0304 	sub.w	r3, ip, r4
 800c892:	3b15      	subs	r3, #21
 800c894:	f023 0303 	bic.w	r3, r3, #3
 800c898:	3304      	adds	r3, #4
 800c89a:	f104 0015 	add.w	r0, r4, #21
 800c89e:	4584      	cmp	ip, r0
 800c8a0:	bf38      	it	cc
 800c8a2:	2304      	movcc	r3, #4
 800c8a4:	50ca      	str	r2, [r1, r3]
 800c8a6:	b10a      	cbz	r2, 800c8ac <__lshift+0xa4>
 800c8a8:	f108 0602 	add.w	r6, r8, #2
 800c8ac:	3e01      	subs	r6, #1
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	612e      	str	r6, [r5, #16]
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	f7ff fe0d 	bl	800c4d2 <_Bfree>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8be:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	e7c5      	b.n	800c852 <__lshift+0x4a>
 800c8c6:	3904      	subs	r1, #4
 800c8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8d0:	459c      	cmp	ip, r3
 800c8d2:	d8f9      	bhi.n	800c8c8 <__lshift+0xc0>
 800c8d4:	e7ea      	b.n	800c8ac <__lshift+0xa4>
 800c8d6:	bf00      	nop
 800c8d8:	0800e5a5 	.word	0x0800e5a5
 800c8dc:	0800e60e 	.word	0x0800e60e

0800c8e0 <__mcmp>:
 800c8e0:	690a      	ldr	r2, [r1, #16]
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	6900      	ldr	r0, [r0, #16]
 800c8e6:	1a80      	subs	r0, r0, r2
 800c8e8:	b530      	push	{r4, r5, lr}
 800c8ea:	d10e      	bne.n	800c90a <__mcmp+0x2a>
 800c8ec:	3314      	adds	r3, #20
 800c8ee:	3114      	adds	r1, #20
 800c8f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c900:	4295      	cmp	r5, r2
 800c902:	d003      	beq.n	800c90c <__mcmp+0x2c>
 800c904:	d205      	bcs.n	800c912 <__mcmp+0x32>
 800c906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c90a:	bd30      	pop	{r4, r5, pc}
 800c90c:	42a3      	cmp	r3, r4
 800c90e:	d3f3      	bcc.n	800c8f8 <__mcmp+0x18>
 800c910:	e7fb      	b.n	800c90a <__mcmp+0x2a>
 800c912:	2001      	movs	r0, #1
 800c914:	e7f9      	b.n	800c90a <__mcmp+0x2a>
	...

0800c918 <__mdiff>:
 800c918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	4689      	mov	r9, r1
 800c91e:	4606      	mov	r6, r0
 800c920:	4611      	mov	r1, r2
 800c922:	4648      	mov	r0, r9
 800c924:	4614      	mov	r4, r2
 800c926:	f7ff ffdb 	bl	800c8e0 <__mcmp>
 800c92a:	1e05      	subs	r5, r0, #0
 800c92c:	d112      	bne.n	800c954 <__mdiff+0x3c>
 800c92e:	4629      	mov	r1, r5
 800c930:	4630      	mov	r0, r6
 800c932:	f7ff fda9 	bl	800c488 <_Balloc>
 800c936:	4602      	mov	r2, r0
 800c938:	b928      	cbnz	r0, 800c946 <__mdiff+0x2e>
 800c93a:	4b3f      	ldr	r3, [pc, #252]	@ (800ca38 <__mdiff+0x120>)
 800c93c:	f240 2137 	movw	r1, #567	@ 0x237
 800c940:	483e      	ldr	r0, [pc, #248]	@ (800ca3c <__mdiff+0x124>)
 800c942:	f000 f973 	bl	800cc2c <__assert_func>
 800c946:	2301      	movs	r3, #1
 800c948:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c94c:	4610      	mov	r0, r2
 800c94e:	b003      	add	sp, #12
 800c950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c954:	bfbc      	itt	lt
 800c956:	464b      	movlt	r3, r9
 800c958:	46a1      	movlt	r9, r4
 800c95a:	4630      	mov	r0, r6
 800c95c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c960:	bfba      	itte	lt
 800c962:	461c      	movlt	r4, r3
 800c964:	2501      	movlt	r5, #1
 800c966:	2500      	movge	r5, #0
 800c968:	f7ff fd8e 	bl	800c488 <_Balloc>
 800c96c:	4602      	mov	r2, r0
 800c96e:	b918      	cbnz	r0, 800c978 <__mdiff+0x60>
 800c970:	4b31      	ldr	r3, [pc, #196]	@ (800ca38 <__mdiff+0x120>)
 800c972:	f240 2145 	movw	r1, #581	@ 0x245
 800c976:	e7e3      	b.n	800c940 <__mdiff+0x28>
 800c978:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c97c:	6926      	ldr	r6, [r4, #16]
 800c97e:	60c5      	str	r5, [r0, #12]
 800c980:	f109 0310 	add.w	r3, r9, #16
 800c984:	f109 0514 	add.w	r5, r9, #20
 800c988:	f104 0e14 	add.w	lr, r4, #20
 800c98c:	f100 0b14 	add.w	fp, r0, #20
 800c990:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c994:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	46d9      	mov	r9, fp
 800c99c:	f04f 0c00 	mov.w	ip, #0
 800c9a0:	9b01      	ldr	r3, [sp, #4]
 800c9a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9aa:	9301      	str	r3, [sp, #4]
 800c9ac:	fa1f f38a 	uxth.w	r3, sl
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	b283      	uxth	r3, r0
 800c9b4:	1acb      	subs	r3, r1, r3
 800c9b6:	0c00      	lsrs	r0, r0, #16
 800c9b8:	4463      	add	r3, ip
 800c9ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9c8:	4576      	cmp	r6, lr
 800c9ca:	f849 3b04 	str.w	r3, [r9], #4
 800c9ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9d2:	d8e5      	bhi.n	800c9a0 <__mdiff+0x88>
 800c9d4:	1b33      	subs	r3, r6, r4
 800c9d6:	3b15      	subs	r3, #21
 800c9d8:	f023 0303 	bic.w	r3, r3, #3
 800c9dc:	3415      	adds	r4, #21
 800c9de:	3304      	adds	r3, #4
 800c9e0:	42a6      	cmp	r6, r4
 800c9e2:	bf38      	it	cc
 800c9e4:	2304      	movcc	r3, #4
 800c9e6:	441d      	add	r5, r3
 800c9e8:	445b      	add	r3, fp
 800c9ea:	461e      	mov	r6, r3
 800c9ec:	462c      	mov	r4, r5
 800c9ee:	4544      	cmp	r4, r8
 800c9f0:	d30e      	bcc.n	800ca10 <__mdiff+0xf8>
 800c9f2:	f108 0103 	add.w	r1, r8, #3
 800c9f6:	1b49      	subs	r1, r1, r5
 800c9f8:	f021 0103 	bic.w	r1, r1, #3
 800c9fc:	3d03      	subs	r5, #3
 800c9fe:	45a8      	cmp	r8, r5
 800ca00:	bf38      	it	cc
 800ca02:	2100      	movcc	r1, #0
 800ca04:	440b      	add	r3, r1
 800ca06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca0a:	b191      	cbz	r1, 800ca32 <__mdiff+0x11a>
 800ca0c:	6117      	str	r7, [r2, #16]
 800ca0e:	e79d      	b.n	800c94c <__mdiff+0x34>
 800ca10:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca14:	46e6      	mov	lr, ip
 800ca16:	0c08      	lsrs	r0, r1, #16
 800ca18:	fa1c fc81 	uxtah	ip, ip, r1
 800ca1c:	4471      	add	r1, lr
 800ca1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca22:	b289      	uxth	r1, r1
 800ca24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca28:	f846 1b04 	str.w	r1, [r6], #4
 800ca2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca30:	e7dd      	b.n	800c9ee <__mdiff+0xd6>
 800ca32:	3f01      	subs	r7, #1
 800ca34:	e7e7      	b.n	800ca06 <__mdiff+0xee>
 800ca36:	bf00      	nop
 800ca38:	0800e5a5 	.word	0x0800e5a5
 800ca3c:	0800e60e 	.word	0x0800e60e

0800ca40 <__d2b>:
 800ca40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	460f      	mov	r7, r1
 800ca46:	2101      	movs	r1, #1
 800ca48:	ec59 8b10 	vmov	r8, r9, d0
 800ca4c:	4616      	mov	r6, r2
 800ca4e:	f7ff fd1b 	bl	800c488 <_Balloc>
 800ca52:	4604      	mov	r4, r0
 800ca54:	b930      	cbnz	r0, 800ca64 <__d2b+0x24>
 800ca56:	4602      	mov	r2, r0
 800ca58:	4b23      	ldr	r3, [pc, #140]	@ (800cae8 <__d2b+0xa8>)
 800ca5a:	4824      	ldr	r0, [pc, #144]	@ (800caec <__d2b+0xac>)
 800ca5c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca60:	f000 f8e4 	bl	800cc2c <__assert_func>
 800ca64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca6c:	b10d      	cbz	r5, 800ca72 <__d2b+0x32>
 800ca6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca72:	9301      	str	r3, [sp, #4]
 800ca74:	f1b8 0300 	subs.w	r3, r8, #0
 800ca78:	d023      	beq.n	800cac2 <__d2b+0x82>
 800ca7a:	4668      	mov	r0, sp
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	f7ff fd96 	bl	800c5ae <__lo0bits>
 800ca82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca86:	b1d0      	cbz	r0, 800cabe <__d2b+0x7e>
 800ca88:	f1c0 0320 	rsb	r3, r0, #32
 800ca8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca90:	430b      	orrs	r3, r1
 800ca92:	40c2      	lsrs	r2, r0
 800ca94:	6163      	str	r3, [r4, #20]
 800ca96:	9201      	str	r2, [sp, #4]
 800ca98:	9b01      	ldr	r3, [sp, #4]
 800ca9a:	61a3      	str	r3, [r4, #24]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bf0c      	ite	eq
 800caa0:	2201      	moveq	r2, #1
 800caa2:	2202      	movne	r2, #2
 800caa4:	6122      	str	r2, [r4, #16]
 800caa6:	b1a5      	cbz	r5, 800cad2 <__d2b+0x92>
 800caa8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800caac:	4405      	add	r5, r0
 800caae:	603d      	str	r5, [r7, #0]
 800cab0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cab4:	6030      	str	r0, [r6, #0]
 800cab6:	4620      	mov	r0, r4
 800cab8:	b003      	add	sp, #12
 800caba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cabe:	6161      	str	r1, [r4, #20]
 800cac0:	e7ea      	b.n	800ca98 <__d2b+0x58>
 800cac2:	a801      	add	r0, sp, #4
 800cac4:	f7ff fd73 	bl	800c5ae <__lo0bits>
 800cac8:	9b01      	ldr	r3, [sp, #4]
 800caca:	6163      	str	r3, [r4, #20]
 800cacc:	3020      	adds	r0, #32
 800cace:	2201      	movs	r2, #1
 800cad0:	e7e8      	b.n	800caa4 <__d2b+0x64>
 800cad2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cad6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cada:	6038      	str	r0, [r7, #0]
 800cadc:	6918      	ldr	r0, [r3, #16]
 800cade:	f7ff fd47 	bl	800c570 <__hi0bits>
 800cae2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cae6:	e7e5      	b.n	800cab4 <__d2b+0x74>
 800cae8:	0800e5a5 	.word	0x0800e5a5
 800caec:	0800e60e 	.word	0x0800e60e

0800caf0 <__ssprint_r>:
 800caf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	6893      	ldr	r3, [r2, #8]
 800caf6:	f8d2 b000 	ldr.w	fp, [r2]
 800cafa:	9001      	str	r0, [sp, #4]
 800cafc:	460c      	mov	r4, r1
 800cafe:	4617      	mov	r7, r2
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d157      	bne.n	800cbb4 <__ssprint_r+0xc4>
 800cb04:	2000      	movs	r0, #0
 800cb06:	2300      	movs	r3, #0
 800cb08:	607b      	str	r3, [r7, #4]
 800cb0a:	b003      	add	sp, #12
 800cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb10:	e9db a800 	ldrd	sl, r8, [fp]
 800cb14:	f10b 0b08 	add.w	fp, fp, #8
 800cb18:	68a6      	ldr	r6, [r4, #8]
 800cb1a:	6820      	ldr	r0, [r4, #0]
 800cb1c:	f1b8 0f00 	cmp.w	r8, #0
 800cb20:	d0f6      	beq.n	800cb10 <__ssprint_r+0x20>
 800cb22:	45b0      	cmp	r8, r6
 800cb24:	d32e      	bcc.n	800cb84 <__ssprint_r+0x94>
 800cb26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb2e:	d029      	beq.n	800cb84 <__ssprint_r+0x94>
 800cb30:	6921      	ldr	r1, [r4, #16]
 800cb32:	6965      	ldr	r5, [r4, #20]
 800cb34:	eba0 0901 	sub.w	r9, r0, r1
 800cb38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb40:	f109 0001 	add.w	r0, r9, #1
 800cb44:	106d      	asrs	r5, r5, #1
 800cb46:	4440      	add	r0, r8
 800cb48:	4285      	cmp	r5, r0
 800cb4a:	bf38      	it	cc
 800cb4c:	4605      	movcc	r5, r0
 800cb4e:	0553      	lsls	r3, r2, #21
 800cb50:	d534      	bpl.n	800cbbc <__ssprint_r+0xcc>
 800cb52:	9801      	ldr	r0, [sp, #4]
 800cb54:	4629      	mov	r1, r5
 800cb56:	f7fd f87d 	bl	8009c54 <_malloc_r>
 800cb5a:	4606      	mov	r6, r0
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d038      	beq.n	800cbd2 <__ssprint_r+0xe2>
 800cb60:	464a      	mov	r2, r9
 800cb62:	6921      	ldr	r1, [r4, #16]
 800cb64:	f7fc ff42 	bl	80099ec <memcpy>
 800cb68:	89a2      	ldrh	r2, [r4, #12]
 800cb6a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800cb6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cb72:	81a2      	strh	r2, [r4, #12]
 800cb74:	6126      	str	r6, [r4, #16]
 800cb76:	6165      	str	r5, [r4, #20]
 800cb78:	444e      	add	r6, r9
 800cb7a:	eba5 0509 	sub.w	r5, r5, r9
 800cb7e:	6026      	str	r6, [r4, #0]
 800cb80:	60a5      	str	r5, [r4, #8]
 800cb82:	4646      	mov	r6, r8
 800cb84:	4546      	cmp	r6, r8
 800cb86:	bf28      	it	cs
 800cb88:	4646      	movcs	r6, r8
 800cb8a:	4632      	mov	r2, r6
 800cb8c:	4651      	mov	r1, sl
 800cb8e:	6820      	ldr	r0, [r4, #0]
 800cb90:	f000 f82b 	bl	800cbea <memmove>
 800cb94:	68a2      	ldr	r2, [r4, #8]
 800cb96:	1b92      	subs	r2, r2, r6
 800cb98:	60a2      	str	r2, [r4, #8]
 800cb9a:	6822      	ldr	r2, [r4, #0]
 800cb9c:	4432      	add	r2, r6
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	eba2 0308 	sub.w	r3, r2, r8
 800cba6:	44c2      	add	sl, r8
 800cba8:	60bb      	str	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0aa      	beq.n	800cb04 <__ssprint_r+0x14>
 800cbae:	f04f 0800 	mov.w	r8, #0
 800cbb2:	e7b1      	b.n	800cb18 <__ssprint_r+0x28>
 800cbb4:	f04f 0a00 	mov.w	sl, #0
 800cbb8:	46d0      	mov	r8, sl
 800cbba:	e7ad      	b.n	800cb18 <__ssprint_r+0x28>
 800cbbc:	9801      	ldr	r0, [sp, #4]
 800cbbe:	462a      	mov	r2, r5
 800cbc0:	f000 f89a 	bl	800ccf8 <_realloc_r>
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d1d4      	bne.n	800cb74 <__ssprint_r+0x84>
 800cbca:	6921      	ldr	r1, [r4, #16]
 800cbcc:	9801      	ldr	r0, [sp, #4]
 800cbce:	f7fc ff81 	bl	8009ad4 <_free_r>
 800cbd2:	9a01      	ldr	r2, [sp, #4]
 800cbd4:	230c      	movs	r3, #12
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbde:	81a3      	strh	r3, [r4, #12]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60bb      	str	r3, [r7, #8]
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbe8:	e78d      	b.n	800cb06 <__ssprint_r+0x16>

0800cbea <memmove>:
 800cbea:	4288      	cmp	r0, r1
 800cbec:	b510      	push	{r4, lr}
 800cbee:	eb01 0402 	add.w	r4, r1, r2
 800cbf2:	d902      	bls.n	800cbfa <memmove+0x10>
 800cbf4:	4284      	cmp	r4, r0
 800cbf6:	4623      	mov	r3, r4
 800cbf8:	d807      	bhi.n	800cc0a <memmove+0x20>
 800cbfa:	1e43      	subs	r3, r0, #1
 800cbfc:	42a1      	cmp	r1, r4
 800cbfe:	d008      	beq.n	800cc12 <memmove+0x28>
 800cc00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc04:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc08:	e7f8      	b.n	800cbfc <memmove+0x12>
 800cc0a:	4402      	add	r2, r0
 800cc0c:	4601      	mov	r1, r0
 800cc0e:	428a      	cmp	r2, r1
 800cc10:	d100      	bne.n	800cc14 <memmove+0x2a>
 800cc12:	bd10      	pop	{r4, pc}
 800cc14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc1c:	e7f7      	b.n	800cc0e <memmove+0x24>
	...

0800cc20 <__locale_mb_cur_max>:
 800cc20:	4b01      	ldr	r3, [pc, #4]	@ (800cc28 <__locale_mb_cur_max+0x8>)
 800cc22:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800cc26:	4770      	bx	lr
 800cc28:	20000554 	.word	0x20000554

0800cc2c <__assert_func>:
 800cc2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc2e:	4614      	mov	r4, r2
 800cc30:	461a      	mov	r2, r3
 800cc32:	4b09      	ldr	r3, [pc, #36]	@ (800cc58 <__assert_func+0x2c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4605      	mov	r5, r0
 800cc38:	68d8      	ldr	r0, [r3, #12]
 800cc3a:	b954      	cbnz	r4, 800cc52 <__assert_func+0x26>
 800cc3c:	4b07      	ldr	r3, [pc, #28]	@ (800cc5c <__assert_func+0x30>)
 800cc3e:	461c      	mov	r4, r3
 800cc40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc44:	9100      	str	r1, [sp, #0]
 800cc46:	462b      	mov	r3, r5
 800cc48:	4905      	ldr	r1, [pc, #20]	@ (800cc60 <__assert_func+0x34>)
 800cc4a:	f000 fa0b 	bl	800d064 <fiprintf>
 800cc4e:	f001 f921 	bl	800de94 <abort>
 800cc52:	4b04      	ldr	r3, [pc, #16]	@ (800cc64 <__assert_func+0x38>)
 800cc54:	e7f4      	b.n	800cc40 <__assert_func+0x14>
 800cc56:	bf00      	nop
 800cc58:	20000018 	.word	0x20000018
 800cc5c:	0800e7ad 	.word	0x0800e7ad
 800cc60:	0800e77f 	.word	0x0800e77f
 800cc64:	0800e772 	.word	0x0800e772

0800cc68 <_calloc_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	fba1 1502 	umull	r1, r5, r1, r2
 800cc6e:	b935      	cbnz	r5, 800cc7e <_calloc_r+0x16>
 800cc70:	f7fc fff0 	bl	8009c54 <_malloc_r>
 800cc74:	4604      	mov	r4, r0
 800cc76:	b938      	cbnz	r0, 800cc88 <_calloc_r+0x20>
 800cc78:	2400      	movs	r4, #0
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	bd38      	pop	{r3, r4, r5, pc}
 800cc7e:	f7fc fe87 	bl	8009990 <__errno>
 800cc82:	230c      	movs	r3, #12
 800cc84:	6003      	str	r3, [r0, #0]
 800cc86:	e7f7      	b.n	800cc78 <_calloc_r+0x10>
 800cc88:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800cc8c:	f022 0203 	bic.w	r2, r2, #3
 800cc90:	3a04      	subs	r2, #4
 800cc92:	2a24      	cmp	r2, #36	@ 0x24
 800cc94:	d819      	bhi.n	800ccca <_calloc_r+0x62>
 800cc96:	2a13      	cmp	r2, #19
 800cc98:	d915      	bls.n	800ccc6 <_calloc_r+0x5e>
 800cc9a:	2a1b      	cmp	r2, #27
 800cc9c:	e9c0 5500 	strd	r5, r5, [r0]
 800cca0:	d806      	bhi.n	800ccb0 <_calloc_r+0x48>
 800cca2:	f100 0308 	add.w	r3, r0, #8
 800cca6:	2200      	movs	r2, #0
 800cca8:	e9c3 2200 	strd	r2, r2, [r3]
 800ccac:	609a      	str	r2, [r3, #8]
 800ccae:	e7e4      	b.n	800cc7a <_calloc_r+0x12>
 800ccb0:	2a24      	cmp	r2, #36	@ 0x24
 800ccb2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800ccb6:	bf11      	iteee	ne
 800ccb8:	f100 0310 	addne.w	r3, r0, #16
 800ccbc:	6105      	streq	r5, [r0, #16]
 800ccbe:	f100 0318 	addeq.w	r3, r0, #24
 800ccc2:	6145      	streq	r5, [r0, #20]
 800ccc4:	e7ef      	b.n	800cca6 <_calloc_r+0x3e>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	e7ed      	b.n	800cca6 <_calloc_r+0x3e>
 800ccca:	4629      	mov	r1, r5
 800cccc:	f7fc fde6 	bl	800989c <memset>
 800ccd0:	e7d3      	b.n	800cc7a <_calloc_r+0x12>

0800ccd2 <__ascii_mbtowc>:
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	b901      	cbnz	r1, 800ccd8 <__ascii_mbtowc+0x6>
 800ccd6:	a901      	add	r1, sp, #4
 800ccd8:	b142      	cbz	r2, 800ccec <__ascii_mbtowc+0x1a>
 800ccda:	b14b      	cbz	r3, 800ccf0 <__ascii_mbtowc+0x1e>
 800ccdc:	7813      	ldrb	r3, [r2, #0]
 800ccde:	600b      	str	r3, [r1, #0]
 800cce0:	7812      	ldrb	r2, [r2, #0]
 800cce2:	1e10      	subs	r0, r2, #0
 800cce4:	bf18      	it	ne
 800cce6:	2001      	movne	r0, #1
 800cce8:	b002      	add	sp, #8
 800ccea:	4770      	bx	lr
 800ccec:	4610      	mov	r0, r2
 800ccee:	e7fb      	b.n	800cce8 <__ascii_mbtowc+0x16>
 800ccf0:	f06f 0001 	mvn.w	r0, #1
 800ccf4:	e7f8      	b.n	800cce8 <__ascii_mbtowc+0x16>
	...

0800ccf8 <_realloc_r>:
 800ccf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	4693      	mov	fp, r2
 800cd00:	460c      	mov	r4, r1
 800cd02:	b929      	cbnz	r1, 800cd10 <_realloc_r+0x18>
 800cd04:	4611      	mov	r1, r2
 800cd06:	b003      	add	sp, #12
 800cd08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	f7fc bfa2 	b.w	8009c54 <_malloc_r>
 800cd10:	f7fd f9da 	bl	800a0c8 <__malloc_lock>
 800cd14:	f10b 080b 	add.w	r8, fp, #11
 800cd18:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800cd1c:	f1b8 0f16 	cmp.w	r8, #22
 800cd20:	f1a4 0908 	sub.w	r9, r4, #8
 800cd24:	f025 0603 	bic.w	r6, r5, #3
 800cd28:	d908      	bls.n	800cd3c <_realloc_r+0x44>
 800cd2a:	f038 0807 	bics.w	r8, r8, #7
 800cd2e:	d507      	bpl.n	800cd40 <_realloc_r+0x48>
 800cd30:	230c      	movs	r3, #12
 800cd32:	f8ca 3000 	str.w	r3, [sl]
 800cd36:	f04f 0b00 	mov.w	fp, #0
 800cd3a:	e032      	b.n	800cda2 <_realloc_r+0xaa>
 800cd3c:	f04f 0810 	mov.w	r8, #16
 800cd40:	45c3      	cmp	fp, r8
 800cd42:	d8f5      	bhi.n	800cd30 <_realloc_r+0x38>
 800cd44:	4546      	cmp	r6, r8
 800cd46:	f280 8174 	bge.w	800d032 <_realloc_r+0x33a>
 800cd4a:	4b9e      	ldr	r3, [pc, #632]	@ (800cfc4 <_realloc_r+0x2cc>)
 800cd4c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800cd50:	eb09 0106 	add.w	r1, r9, r6
 800cd54:	458c      	cmp	ip, r1
 800cd56:	6848      	ldr	r0, [r1, #4]
 800cd58:	d005      	beq.n	800cd66 <_realloc_r+0x6e>
 800cd5a:	f020 0201 	bic.w	r2, r0, #1
 800cd5e:	440a      	add	r2, r1
 800cd60:	6852      	ldr	r2, [r2, #4]
 800cd62:	07d7      	lsls	r7, r2, #31
 800cd64:	d449      	bmi.n	800cdfa <_realloc_r+0x102>
 800cd66:	f020 0003 	bic.w	r0, r0, #3
 800cd6a:	458c      	cmp	ip, r1
 800cd6c:	eb06 0700 	add.w	r7, r6, r0
 800cd70:	d11b      	bne.n	800cdaa <_realloc_r+0xb2>
 800cd72:	f108 0210 	add.w	r2, r8, #16
 800cd76:	42ba      	cmp	r2, r7
 800cd78:	dc41      	bgt.n	800cdfe <_realloc_r+0x106>
 800cd7a:	eb09 0208 	add.w	r2, r9, r8
 800cd7e:	eba7 0708 	sub.w	r7, r7, r8
 800cd82:	f047 0701 	orr.w	r7, r7, #1
 800cd86:	609a      	str	r2, [r3, #8]
 800cd88:	6057      	str	r7, [r2, #4]
 800cd8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	ea43 0308 	orr.w	r3, r3, r8
 800cd96:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd9a:	4650      	mov	r0, sl
 800cd9c:	f7fd f99a 	bl	800a0d4 <__malloc_unlock>
 800cda0:	46a3      	mov	fp, r4
 800cda2:	4658      	mov	r0, fp
 800cda4:	b003      	add	sp, #12
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdaa:	45b8      	cmp	r8, r7
 800cdac:	dc27      	bgt.n	800cdfe <_realloc_r+0x106>
 800cdae:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800cdb2:	60d3      	str	r3, [r2, #12]
 800cdb4:	609a      	str	r2, [r3, #8]
 800cdb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cdba:	eba7 0008 	sub.w	r0, r7, r8
 800cdbe:	280f      	cmp	r0, #15
 800cdc0:	f003 0301 	and.w	r3, r3, #1
 800cdc4:	eb09 0207 	add.w	r2, r9, r7
 800cdc8:	f240 8135 	bls.w	800d036 <_realloc_r+0x33e>
 800cdcc:	eb09 0108 	add.w	r1, r9, r8
 800cdd0:	ea48 0303 	orr.w	r3, r8, r3
 800cdd4:	f040 0001 	orr.w	r0, r0, #1
 800cdd8:	f8c9 3004 	str.w	r3, [r9, #4]
 800cddc:	6048      	str	r0, [r1, #4]
 800cdde:	6853      	ldr	r3, [r2, #4]
 800cde0:	f043 0301 	orr.w	r3, r3, #1
 800cde4:	6053      	str	r3, [r2, #4]
 800cde6:	3108      	adds	r1, #8
 800cde8:	4650      	mov	r0, sl
 800cdea:	f7fc fe73 	bl	8009ad4 <_free_r>
 800cdee:	4650      	mov	r0, sl
 800cdf0:	f7fd f970 	bl	800a0d4 <__malloc_unlock>
 800cdf4:	f109 0b08 	add.w	fp, r9, #8
 800cdf8:	e7d3      	b.n	800cda2 <_realloc_r+0xaa>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	4601      	mov	r1, r0
 800cdfe:	07ea      	lsls	r2, r5, #31
 800ce00:	f100 80c7 	bmi.w	800cf92 <_realloc_r+0x29a>
 800ce04:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ce08:	eba9 0505 	sub.w	r5, r9, r5
 800ce0c:	686a      	ldr	r2, [r5, #4]
 800ce0e:	f022 0203 	bic.w	r2, r2, #3
 800ce12:	4432      	add	r2, r6
 800ce14:	9201      	str	r2, [sp, #4]
 800ce16:	2900      	cmp	r1, #0
 800ce18:	f000 8086 	beq.w	800cf28 <_realloc_r+0x230>
 800ce1c:	458c      	cmp	ip, r1
 800ce1e:	eb00 0702 	add.w	r7, r0, r2
 800ce22:	d149      	bne.n	800ceb8 <_realloc_r+0x1c0>
 800ce24:	f108 0210 	add.w	r2, r8, #16
 800ce28:	42ba      	cmp	r2, r7
 800ce2a:	dc7d      	bgt.n	800cf28 <_realloc_r+0x230>
 800ce2c:	46ab      	mov	fp, r5
 800ce2e:	68ea      	ldr	r2, [r5, #12]
 800ce30:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800ce34:	60ca      	str	r2, [r1, #12]
 800ce36:	6091      	str	r1, [r2, #8]
 800ce38:	1f32      	subs	r2, r6, #4
 800ce3a:	2a24      	cmp	r2, #36	@ 0x24
 800ce3c:	d836      	bhi.n	800ceac <_realloc_r+0x1b4>
 800ce3e:	2a13      	cmp	r2, #19
 800ce40:	d932      	bls.n	800cea8 <_realloc_r+0x1b0>
 800ce42:	6821      	ldr	r1, [r4, #0]
 800ce44:	60a9      	str	r1, [r5, #8]
 800ce46:	6861      	ldr	r1, [r4, #4]
 800ce48:	60e9      	str	r1, [r5, #12]
 800ce4a:	2a1b      	cmp	r2, #27
 800ce4c:	d81a      	bhi.n	800ce84 <_realloc_r+0x18c>
 800ce4e:	3408      	adds	r4, #8
 800ce50:	f105 0210 	add.w	r2, r5, #16
 800ce54:	6821      	ldr	r1, [r4, #0]
 800ce56:	6011      	str	r1, [r2, #0]
 800ce58:	6861      	ldr	r1, [r4, #4]
 800ce5a:	6051      	str	r1, [r2, #4]
 800ce5c:	68a1      	ldr	r1, [r4, #8]
 800ce5e:	6091      	str	r1, [r2, #8]
 800ce60:	eb05 0208 	add.w	r2, r5, r8
 800ce64:	eba7 0708 	sub.w	r7, r7, r8
 800ce68:	f047 0701 	orr.w	r7, r7, #1
 800ce6c:	609a      	str	r2, [r3, #8]
 800ce6e:	6057      	str	r7, [r2, #4]
 800ce70:	686b      	ldr	r3, [r5, #4]
 800ce72:	f003 0301 	and.w	r3, r3, #1
 800ce76:	ea43 0308 	orr.w	r3, r3, r8
 800ce7a:	606b      	str	r3, [r5, #4]
 800ce7c:	4650      	mov	r0, sl
 800ce7e:	f7fd f929 	bl	800a0d4 <__malloc_unlock>
 800ce82:	e78e      	b.n	800cda2 <_realloc_r+0xaa>
 800ce84:	68a1      	ldr	r1, [r4, #8]
 800ce86:	6129      	str	r1, [r5, #16]
 800ce88:	68e1      	ldr	r1, [r4, #12]
 800ce8a:	6169      	str	r1, [r5, #20]
 800ce8c:	2a24      	cmp	r2, #36	@ 0x24
 800ce8e:	bf01      	itttt	eq
 800ce90:	6922      	ldreq	r2, [r4, #16]
 800ce92:	61aa      	streq	r2, [r5, #24]
 800ce94:	6961      	ldreq	r1, [r4, #20]
 800ce96:	61e9      	streq	r1, [r5, #28]
 800ce98:	bf19      	ittee	ne
 800ce9a:	3410      	addne	r4, #16
 800ce9c:	f105 0218 	addne.w	r2, r5, #24
 800cea0:	f105 0220 	addeq.w	r2, r5, #32
 800cea4:	3418      	addeq	r4, #24
 800cea6:	e7d5      	b.n	800ce54 <_realloc_r+0x15c>
 800cea8:	465a      	mov	r2, fp
 800ceaa:	e7d3      	b.n	800ce54 <_realloc_r+0x15c>
 800ceac:	4621      	mov	r1, r4
 800ceae:	4658      	mov	r0, fp
 800ceb0:	f7ff fe9b 	bl	800cbea <memmove>
 800ceb4:	4b43      	ldr	r3, [pc, #268]	@ (800cfc4 <_realloc_r+0x2cc>)
 800ceb6:	e7d3      	b.n	800ce60 <_realloc_r+0x168>
 800ceb8:	45b8      	cmp	r8, r7
 800ceba:	dc35      	bgt.n	800cf28 <_realloc_r+0x230>
 800cebc:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800cec0:	4628      	mov	r0, r5
 800cec2:	60d3      	str	r3, [r2, #12]
 800cec4:	609a      	str	r2, [r3, #8]
 800cec6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ceca:	68eb      	ldr	r3, [r5, #12]
 800cecc:	60d3      	str	r3, [r2, #12]
 800cece:	609a      	str	r2, [r3, #8]
 800ced0:	1f32      	subs	r2, r6, #4
 800ced2:	2a24      	cmp	r2, #36	@ 0x24
 800ced4:	d824      	bhi.n	800cf20 <_realloc_r+0x228>
 800ced6:	2a13      	cmp	r2, #19
 800ced8:	d908      	bls.n	800ceec <_realloc_r+0x1f4>
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	60ab      	str	r3, [r5, #8]
 800cede:	6863      	ldr	r3, [r4, #4]
 800cee0:	60eb      	str	r3, [r5, #12]
 800cee2:	2a1b      	cmp	r2, #27
 800cee4:	d80a      	bhi.n	800cefc <_realloc_r+0x204>
 800cee6:	3408      	adds	r4, #8
 800cee8:	f105 0010 	add.w	r0, r5, #16
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	6003      	str	r3, [r0, #0]
 800cef0:	6863      	ldr	r3, [r4, #4]
 800cef2:	6043      	str	r3, [r0, #4]
 800cef4:	68a3      	ldr	r3, [r4, #8]
 800cef6:	6083      	str	r3, [r0, #8]
 800cef8:	46a9      	mov	r9, r5
 800cefa:	e75c      	b.n	800cdb6 <_realloc_r+0xbe>
 800cefc:	68a3      	ldr	r3, [r4, #8]
 800cefe:	612b      	str	r3, [r5, #16]
 800cf00:	68e3      	ldr	r3, [r4, #12]
 800cf02:	616b      	str	r3, [r5, #20]
 800cf04:	2a24      	cmp	r2, #36	@ 0x24
 800cf06:	bf01      	itttt	eq
 800cf08:	6923      	ldreq	r3, [r4, #16]
 800cf0a:	61ab      	streq	r3, [r5, #24]
 800cf0c:	6963      	ldreq	r3, [r4, #20]
 800cf0e:	61eb      	streq	r3, [r5, #28]
 800cf10:	bf19      	ittee	ne
 800cf12:	3410      	addne	r4, #16
 800cf14:	f105 0018 	addne.w	r0, r5, #24
 800cf18:	f105 0020 	addeq.w	r0, r5, #32
 800cf1c:	3418      	addeq	r4, #24
 800cf1e:	e7e5      	b.n	800ceec <_realloc_r+0x1f4>
 800cf20:	4621      	mov	r1, r4
 800cf22:	f7ff fe62 	bl	800cbea <memmove>
 800cf26:	e7e7      	b.n	800cef8 <_realloc_r+0x200>
 800cf28:	9b01      	ldr	r3, [sp, #4]
 800cf2a:	4598      	cmp	r8, r3
 800cf2c:	dc31      	bgt.n	800cf92 <_realloc_r+0x29a>
 800cf2e:	4628      	mov	r0, r5
 800cf30:	68eb      	ldr	r3, [r5, #12]
 800cf32:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cf36:	60d3      	str	r3, [r2, #12]
 800cf38:	609a      	str	r2, [r3, #8]
 800cf3a:	1f32      	subs	r2, r6, #4
 800cf3c:	2a24      	cmp	r2, #36	@ 0x24
 800cf3e:	d824      	bhi.n	800cf8a <_realloc_r+0x292>
 800cf40:	2a13      	cmp	r2, #19
 800cf42:	d908      	bls.n	800cf56 <_realloc_r+0x25e>
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	60ab      	str	r3, [r5, #8]
 800cf48:	6863      	ldr	r3, [r4, #4]
 800cf4a:	60eb      	str	r3, [r5, #12]
 800cf4c:	2a1b      	cmp	r2, #27
 800cf4e:	d80a      	bhi.n	800cf66 <_realloc_r+0x26e>
 800cf50:	3408      	adds	r4, #8
 800cf52:	f105 0010 	add.w	r0, r5, #16
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	6003      	str	r3, [r0, #0]
 800cf5a:	6863      	ldr	r3, [r4, #4]
 800cf5c:	6043      	str	r3, [r0, #4]
 800cf5e:	68a3      	ldr	r3, [r4, #8]
 800cf60:	6083      	str	r3, [r0, #8]
 800cf62:	9f01      	ldr	r7, [sp, #4]
 800cf64:	e7c8      	b.n	800cef8 <_realloc_r+0x200>
 800cf66:	68a3      	ldr	r3, [r4, #8]
 800cf68:	612b      	str	r3, [r5, #16]
 800cf6a:	68e3      	ldr	r3, [r4, #12]
 800cf6c:	616b      	str	r3, [r5, #20]
 800cf6e:	2a24      	cmp	r2, #36	@ 0x24
 800cf70:	bf01      	itttt	eq
 800cf72:	6923      	ldreq	r3, [r4, #16]
 800cf74:	61ab      	streq	r3, [r5, #24]
 800cf76:	6963      	ldreq	r3, [r4, #20]
 800cf78:	61eb      	streq	r3, [r5, #28]
 800cf7a:	bf19      	ittee	ne
 800cf7c:	3410      	addne	r4, #16
 800cf7e:	f105 0018 	addne.w	r0, r5, #24
 800cf82:	f105 0020 	addeq.w	r0, r5, #32
 800cf86:	3418      	addeq	r4, #24
 800cf88:	e7e5      	b.n	800cf56 <_realloc_r+0x25e>
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	f7ff fe2d 	bl	800cbea <memmove>
 800cf90:	e7e7      	b.n	800cf62 <_realloc_r+0x26a>
 800cf92:	4659      	mov	r1, fp
 800cf94:	4650      	mov	r0, sl
 800cf96:	f7fc fe5d 	bl	8009c54 <_malloc_r>
 800cf9a:	4683      	mov	fp, r0
 800cf9c:	b918      	cbnz	r0, 800cfa6 <_realloc_r+0x2ae>
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	f7fd f898 	bl	800a0d4 <__malloc_unlock>
 800cfa4:	e6c7      	b.n	800cd36 <_realloc_r+0x3e>
 800cfa6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cfaa:	f023 0301 	bic.w	r3, r3, #1
 800cfae:	444b      	add	r3, r9
 800cfb0:	f1a0 0208 	sub.w	r2, r0, #8
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d107      	bne.n	800cfc8 <_realloc_r+0x2d0>
 800cfb8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800cfbc:	f027 0703 	bic.w	r7, r7, #3
 800cfc0:	4437      	add	r7, r6
 800cfc2:	e6f8      	b.n	800cdb6 <_realloc_r+0xbe>
 800cfc4:	2000014c 	.word	0x2000014c
 800cfc8:	1f32      	subs	r2, r6, #4
 800cfca:	2a24      	cmp	r2, #36	@ 0x24
 800cfcc:	d82d      	bhi.n	800d02a <_realloc_r+0x332>
 800cfce:	2a13      	cmp	r2, #19
 800cfd0:	d928      	bls.n	800d024 <_realloc_r+0x32c>
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	6863      	ldr	r3, [r4, #4]
 800cfd8:	6043      	str	r3, [r0, #4]
 800cfda:	2a1b      	cmp	r2, #27
 800cfdc:	d80e      	bhi.n	800cffc <_realloc_r+0x304>
 800cfde:	f104 0208 	add.w	r2, r4, #8
 800cfe2:	f100 0308 	add.w	r3, r0, #8
 800cfe6:	6811      	ldr	r1, [r2, #0]
 800cfe8:	6019      	str	r1, [r3, #0]
 800cfea:	6851      	ldr	r1, [r2, #4]
 800cfec:	6059      	str	r1, [r3, #4]
 800cfee:	6892      	ldr	r2, [r2, #8]
 800cff0:	609a      	str	r2, [r3, #8]
 800cff2:	4621      	mov	r1, r4
 800cff4:	4650      	mov	r0, sl
 800cff6:	f7fc fd6d 	bl	8009ad4 <_free_r>
 800cffa:	e73f      	b.n	800ce7c <_realloc_r+0x184>
 800cffc:	68a3      	ldr	r3, [r4, #8]
 800cffe:	6083      	str	r3, [r0, #8]
 800d000:	68e3      	ldr	r3, [r4, #12]
 800d002:	60c3      	str	r3, [r0, #12]
 800d004:	2a24      	cmp	r2, #36	@ 0x24
 800d006:	bf01      	itttt	eq
 800d008:	6923      	ldreq	r3, [r4, #16]
 800d00a:	6103      	streq	r3, [r0, #16]
 800d00c:	6961      	ldreq	r1, [r4, #20]
 800d00e:	6141      	streq	r1, [r0, #20]
 800d010:	bf19      	ittee	ne
 800d012:	f104 0210 	addne.w	r2, r4, #16
 800d016:	f100 0310 	addne.w	r3, r0, #16
 800d01a:	f104 0218 	addeq.w	r2, r4, #24
 800d01e:	f100 0318 	addeq.w	r3, r0, #24
 800d022:	e7e0      	b.n	800cfe6 <_realloc_r+0x2ee>
 800d024:	4603      	mov	r3, r0
 800d026:	4622      	mov	r2, r4
 800d028:	e7dd      	b.n	800cfe6 <_realloc_r+0x2ee>
 800d02a:	4621      	mov	r1, r4
 800d02c:	f7ff fddd 	bl	800cbea <memmove>
 800d030:	e7df      	b.n	800cff2 <_realloc_r+0x2fa>
 800d032:	4637      	mov	r7, r6
 800d034:	e6bf      	b.n	800cdb6 <_realloc_r+0xbe>
 800d036:	431f      	orrs	r7, r3
 800d038:	f8c9 7004 	str.w	r7, [r9, #4]
 800d03c:	6853      	ldr	r3, [r2, #4]
 800d03e:	f043 0301 	orr.w	r3, r3, #1
 800d042:	6053      	str	r3, [r2, #4]
 800d044:	e6d3      	b.n	800cdee <_realloc_r+0xf6>
 800d046:	bf00      	nop

0800d048 <__ascii_wctomb>:
 800d048:	4603      	mov	r3, r0
 800d04a:	4608      	mov	r0, r1
 800d04c:	b141      	cbz	r1, 800d060 <__ascii_wctomb+0x18>
 800d04e:	2aff      	cmp	r2, #255	@ 0xff
 800d050:	d904      	bls.n	800d05c <__ascii_wctomb+0x14>
 800d052:	228a      	movs	r2, #138	@ 0x8a
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d05a:	4770      	bx	lr
 800d05c:	700a      	strb	r2, [r1, #0]
 800d05e:	2001      	movs	r0, #1
 800d060:	4770      	bx	lr
	...

0800d064 <fiprintf>:
 800d064:	b40e      	push	{r1, r2, r3}
 800d066:	b503      	push	{r0, r1, lr}
 800d068:	4601      	mov	r1, r0
 800d06a:	ab03      	add	r3, sp, #12
 800d06c:	4805      	ldr	r0, [pc, #20]	@ (800d084 <fiprintf+0x20>)
 800d06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d072:	6800      	ldr	r0, [r0, #0]
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	f000 f839 	bl	800d0ec <_vfiprintf_r>
 800d07a:	b002      	add	sp, #8
 800d07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d080:	b003      	add	sp, #12
 800d082:	4770      	bx	lr
 800d084:	20000018 	.word	0x20000018

0800d088 <__sprint_r>:
 800d088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	6893      	ldr	r3, [r2, #8]
 800d08e:	4680      	mov	r8, r0
 800d090:	460e      	mov	r6, r1
 800d092:	4614      	mov	r4, r2
 800d094:	b343      	cbz	r3, 800d0e8 <__sprint_r+0x60>
 800d096:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800d098:	049d      	lsls	r5, r3, #18
 800d09a:	d522      	bpl.n	800d0e2 <__sprint_r+0x5a>
 800d09c:	6815      	ldr	r5, [r2, #0]
 800d09e:	68a0      	ldr	r0, [r4, #8]
 800d0a0:	3508      	adds	r5, #8
 800d0a2:	b928      	cbnz	r0, 800d0b0 <__sprint_r+0x28>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60a3      	str	r3, [r4, #8]
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	6063      	str	r3, [r4, #4]
 800d0ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b0:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800d0b4:	f04f 0900 	mov.w	r9, #0
 800d0b8:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800d0bc:	45ca      	cmp	sl, r9
 800d0be:	dc05      	bgt.n	800d0cc <__sprint_r+0x44>
 800d0c0:	68a3      	ldr	r3, [r4, #8]
 800d0c2:	f027 0703 	bic.w	r7, r7, #3
 800d0c6:	1bdb      	subs	r3, r3, r7
 800d0c8:	60a3      	str	r3, [r4, #8]
 800d0ca:	e7e8      	b.n	800d09e <__sprint_r+0x16>
 800d0cc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800d0d0:	4632      	mov	r2, r6
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f000 feb5 	bl	800de42 <_fputwc_r>
 800d0d8:	1c43      	adds	r3, r0, #1
 800d0da:	d0e3      	beq.n	800d0a4 <__sprint_r+0x1c>
 800d0dc:	f109 0901 	add.w	r9, r9, #1
 800d0e0:	e7ec      	b.n	800d0bc <__sprint_r+0x34>
 800d0e2:	f000 fccb 	bl	800da7c <__sfvwrite_r>
 800d0e6:	e7dd      	b.n	800d0a4 <__sprint_r+0x1c>
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	e7dd      	b.n	800d0a8 <__sprint_r+0x20>

0800d0ec <_vfiprintf_r>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	b0bb      	sub	sp, #236	@ 0xec
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	4693      	mov	fp, r2
 800d0f6:	461c      	mov	r4, r3
 800d0f8:	461d      	mov	r5, r3
 800d0fa:	9000      	str	r0, [sp, #0]
 800d0fc:	b118      	cbz	r0, 800d106 <_vfiprintf_r+0x1a>
 800d0fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d100:	b90b      	cbnz	r3, 800d106 <_vfiprintf_r+0x1a>
 800d102:	f7fc fae5 	bl	80096d0 <__sinit>
 800d106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d108:	07db      	lsls	r3, r3, #31
 800d10a:	d405      	bmi.n	800d118 <_vfiprintf_r+0x2c>
 800d10c:	89bb      	ldrh	r3, [r7, #12]
 800d10e:	059e      	lsls	r6, r3, #22
 800d110:	d402      	bmi.n	800d118 <_vfiprintf_r+0x2c>
 800d112:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d114:	f7fc fc68 	bl	80099e8 <__retarget_lock_acquire_recursive>
 800d118:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d11c:	0498      	lsls	r0, r3, #18
 800d11e:	d406      	bmi.n	800d12e <_vfiprintf_r+0x42>
 800d120:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d124:	81bb      	strh	r3, [r7, #12]
 800d126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d128:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d12c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d12e:	89bb      	ldrh	r3, [r7, #12]
 800d130:	0719      	lsls	r1, r3, #28
 800d132:	d501      	bpl.n	800d138 <_vfiprintf_r+0x4c>
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	b9ab      	cbnz	r3, 800d164 <_vfiprintf_r+0x78>
 800d138:	9800      	ldr	r0, [sp, #0]
 800d13a:	4639      	mov	r1, r7
 800d13c:	f000 fdea 	bl	800dd14 <__swsetup_r>
 800d140:	b180      	cbz	r0, 800d164 <_vfiprintf_r+0x78>
 800d142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d144:	07da      	lsls	r2, r3, #31
 800d146:	d506      	bpl.n	800d156 <_vfiprintf_r+0x6a>
 800d148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d14c:	9303      	str	r3, [sp, #12]
 800d14e:	9803      	ldr	r0, [sp, #12]
 800d150:	b03b      	add	sp, #236	@ 0xec
 800d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d156:	89bb      	ldrh	r3, [r7, #12]
 800d158:	059b      	lsls	r3, r3, #22
 800d15a:	d4f5      	bmi.n	800d148 <_vfiprintf_r+0x5c>
 800d15c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d15e:	f7fc fc44 	bl	80099ea <__retarget_lock_release_recursive>
 800d162:	e7f1      	b.n	800d148 <_vfiprintf_r+0x5c>
 800d164:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d168:	f003 021a 	and.w	r2, r3, #26
 800d16c:	2a0a      	cmp	r2, #10
 800d16e:	d114      	bne.n	800d19a <_vfiprintf_r+0xae>
 800d170:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d174:	2a00      	cmp	r2, #0
 800d176:	db10      	blt.n	800d19a <_vfiprintf_r+0xae>
 800d178:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d17a:	07d6      	lsls	r6, r2, #31
 800d17c:	d404      	bmi.n	800d188 <_vfiprintf_r+0x9c>
 800d17e:	059d      	lsls	r5, r3, #22
 800d180:	d402      	bmi.n	800d188 <_vfiprintf_r+0x9c>
 800d182:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d184:	f7fc fc31 	bl	80099ea <__retarget_lock_release_recursive>
 800d188:	9800      	ldr	r0, [sp, #0]
 800d18a:	4623      	mov	r3, r4
 800d18c:	465a      	mov	r2, fp
 800d18e:	4639      	mov	r1, r7
 800d190:	b03b      	add	sp, #236	@ 0xec
 800d192:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d196:	f000 bc31 	b.w	800d9fc <__sbprintf>
 800d19a:	2300      	movs	r3, #0
 800d19c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800d1a0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d1a4:	ae11      	add	r6, sp, #68	@ 0x44
 800d1a6:	960e      	str	r6, [sp, #56]	@ 0x38
 800d1a8:	9307      	str	r3, [sp, #28]
 800d1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ac:	9303      	str	r3, [sp, #12]
 800d1ae:	465b      	mov	r3, fp
 800d1b0:	461c      	mov	r4, r3
 800d1b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1b6:	b10a      	cbz	r2, 800d1bc <_vfiprintf_r+0xd0>
 800d1b8:	2a25      	cmp	r2, #37	@ 0x25
 800d1ba:	d1f9      	bne.n	800d1b0 <_vfiprintf_r+0xc4>
 800d1bc:	ebb4 080b 	subs.w	r8, r4, fp
 800d1c0:	d00d      	beq.n	800d1de <_vfiprintf_r+0xf2>
 800d1c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1c4:	4443      	add	r3, r8
 800d1c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	2b07      	cmp	r3, #7
 800d1ce:	e9c6 b800 	strd	fp, r8, [r6]
 800d1d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1d4:	dc75      	bgt.n	800d2c2 <_vfiprintf_r+0x1d6>
 800d1d6:	3608      	adds	r6, #8
 800d1d8:	9b03      	ldr	r3, [sp, #12]
 800d1da:	4443      	add	r3, r8
 800d1dc:	9303      	str	r3, [sp, #12]
 800d1de:	7823      	ldrb	r3, [r4, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 83cd 	beq.w	800d980 <_vfiprintf_r+0x894>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1ec:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d1f0:	3401      	adds	r4, #1
 800d1f2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800d1f6:	469a      	mov	sl, r3
 800d1f8:	46a3      	mov	fp, r4
 800d1fa:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800d1fe:	f1a3 0220 	sub.w	r2, r3, #32
 800d202:	2a5a      	cmp	r2, #90	@ 0x5a
 800d204:	f200 8316 	bhi.w	800d834 <_vfiprintf_r+0x748>
 800d208:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d20c:	0314009a 	.word	0x0314009a
 800d210:	00a20314 	.word	0x00a20314
 800d214:	03140314 	.word	0x03140314
 800d218:	00820314 	.word	0x00820314
 800d21c:	03140314 	.word	0x03140314
 800d220:	00af00a5 	.word	0x00af00a5
 800d224:	00ac0314 	.word	0x00ac0314
 800d228:	031400b1 	.word	0x031400b1
 800d22c:	00d000cd 	.word	0x00d000cd
 800d230:	00d000d0 	.word	0x00d000d0
 800d234:	00d000d0 	.word	0x00d000d0
 800d238:	00d000d0 	.word	0x00d000d0
 800d23c:	00d000d0 	.word	0x00d000d0
 800d240:	03140314 	.word	0x03140314
 800d244:	03140314 	.word	0x03140314
 800d248:	03140314 	.word	0x03140314
 800d24c:	03140314 	.word	0x03140314
 800d250:	00f70314 	.word	0x00f70314
 800d254:	03140104 	.word	0x03140104
 800d258:	03140314 	.word	0x03140314
 800d25c:	03140314 	.word	0x03140314
 800d260:	03140314 	.word	0x03140314
 800d264:	03140314 	.word	0x03140314
 800d268:	01520314 	.word	0x01520314
 800d26c:	03140314 	.word	0x03140314
 800d270:	019a0314 	.word	0x019a0314
 800d274:	027a0314 	.word	0x027a0314
 800d278:	03140314 	.word	0x03140314
 800d27c:	0314029a 	.word	0x0314029a
 800d280:	03140314 	.word	0x03140314
 800d284:	03140314 	.word	0x03140314
 800d288:	03140314 	.word	0x03140314
 800d28c:	03140314 	.word	0x03140314
 800d290:	00f70314 	.word	0x00f70314
 800d294:	03140106 	.word	0x03140106
 800d298:	03140314 	.word	0x03140314
 800d29c:	010600e0 	.word	0x010600e0
 800d2a0:	031400f1 	.word	0x031400f1
 800d2a4:	031400eb 	.word	0x031400eb
 800d2a8:	01540132 	.word	0x01540132
 800d2ac:	00f10189 	.word	0x00f10189
 800d2b0:	019a0314 	.word	0x019a0314
 800d2b4:	027c0098 	.word	0x027c0098
 800d2b8:	03140314 	.word	0x03140314
 800d2bc:	03140065 	.word	0x03140065
 800d2c0:	0098      	.short	0x0098
 800d2c2:	9800      	ldr	r0, [sp, #0]
 800d2c4:	aa0e      	add	r2, sp, #56	@ 0x38
 800d2c6:	4639      	mov	r1, r7
 800d2c8:	f7ff fede 	bl	800d088 <__sprint_r>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	f040 8336 	bne.w	800d93e <_vfiprintf_r+0x852>
 800d2d2:	ae11      	add	r6, sp, #68	@ 0x44
 800d2d4:	e780      	b.n	800d1d8 <_vfiprintf_r+0xec>
 800d2d6:	4a99      	ldr	r2, [pc, #612]	@ (800d53c <_vfiprintf_r+0x450>)
 800d2d8:	9205      	str	r2, [sp, #20]
 800d2da:	f01a 0220 	ands.w	r2, sl, #32
 800d2de:	f000 8231 	beq.w	800d744 <_vfiprintf_r+0x658>
 800d2e2:	3507      	adds	r5, #7
 800d2e4:	f025 0507 	bic.w	r5, r5, #7
 800d2e8:	46a8      	mov	r8, r5
 800d2ea:	686d      	ldr	r5, [r5, #4]
 800d2ec:	f858 4b08 	ldr.w	r4, [r8], #8
 800d2f0:	f01a 0f01 	tst.w	sl, #1
 800d2f4:	d009      	beq.n	800d30a <_vfiprintf_r+0x21e>
 800d2f6:	ea54 0205 	orrs.w	r2, r4, r5
 800d2fa:	bf1f      	itttt	ne
 800d2fc:	2230      	movne	r2, #48	@ 0x30
 800d2fe:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800d302:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800d306:	f04a 0a02 	orrne.w	sl, sl, #2
 800d30a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800d30e:	e112      	b.n	800d536 <_vfiprintf_r+0x44a>
 800d310:	9800      	ldr	r0, [sp, #0]
 800d312:	f7fe f9d9 	bl	800b6c8 <_localeconv_r>
 800d316:	6843      	ldr	r3, [r0, #4]
 800d318:	9309      	str	r3, [sp, #36]	@ 0x24
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7f2 ff58 	bl	80001d0 <strlen>
 800d320:	9007      	str	r0, [sp, #28]
 800d322:	9800      	ldr	r0, [sp, #0]
 800d324:	f7fe f9d0 	bl	800b6c8 <_localeconv_r>
 800d328:	6883      	ldr	r3, [r0, #8]
 800d32a:	9306      	str	r3, [sp, #24]
 800d32c:	9b07      	ldr	r3, [sp, #28]
 800d32e:	b12b      	cbz	r3, 800d33c <_vfiprintf_r+0x250>
 800d330:	9b06      	ldr	r3, [sp, #24]
 800d332:	b11b      	cbz	r3, 800d33c <_vfiprintf_r+0x250>
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	b10b      	cbz	r3, 800d33c <_vfiprintf_r+0x250>
 800d338:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800d33c:	465c      	mov	r4, fp
 800d33e:	e75b      	b.n	800d1f8 <_vfiprintf_r+0x10c>
 800d340:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1f9      	bne.n	800d33c <_vfiprintf_r+0x250>
 800d348:	2320      	movs	r3, #32
 800d34a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800d34e:	e7f5      	b.n	800d33c <_vfiprintf_r+0x250>
 800d350:	f04a 0a01 	orr.w	sl, sl, #1
 800d354:	e7f2      	b.n	800d33c <_vfiprintf_r+0x250>
 800d356:	f855 3b04 	ldr.w	r3, [r5], #4
 800d35a:	9302      	str	r3, [sp, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	daed      	bge.n	800d33c <_vfiprintf_r+0x250>
 800d360:	425b      	negs	r3, r3
 800d362:	9302      	str	r3, [sp, #8]
 800d364:	f04a 0a04 	orr.w	sl, sl, #4
 800d368:	e7e8      	b.n	800d33c <_vfiprintf_r+0x250>
 800d36a:	232b      	movs	r3, #43	@ 0x2b
 800d36c:	e7ed      	b.n	800d34a <_vfiprintf_r+0x25e>
 800d36e:	465a      	mov	r2, fp
 800d370:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d374:	2b2a      	cmp	r3, #42	@ 0x2a
 800d376:	d112      	bne.n	800d39e <_vfiprintf_r+0x2b2>
 800d378:	f855 3b04 	ldr.w	r3, [r5], #4
 800d37c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	4693      	mov	fp, r2
 800d384:	e7da      	b.n	800d33c <_vfiprintf_r+0x250>
 800d386:	9b01      	ldr	r3, [sp, #4]
 800d388:	fb00 1303 	mla	r3, r0, r3, r1
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d392:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800d396:	2909      	cmp	r1, #9
 800d398:	d9f5      	bls.n	800d386 <_vfiprintf_r+0x29a>
 800d39a:	4693      	mov	fp, r2
 800d39c:	e72f      	b.n	800d1fe <_vfiprintf_r+0x112>
 800d39e:	2100      	movs	r1, #0
 800d3a0:	9101      	str	r1, [sp, #4]
 800d3a2:	200a      	movs	r0, #10
 800d3a4:	e7f5      	b.n	800d392 <_vfiprintf_r+0x2a6>
 800d3a6:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800d3aa:	e7c7      	b.n	800d33c <_vfiprintf_r+0x250>
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	465a      	mov	r2, fp
 800d3b0:	9102      	str	r1, [sp, #8]
 800d3b2:	200a      	movs	r0, #10
 800d3b4:	9902      	ldr	r1, [sp, #8]
 800d3b6:	3b30      	subs	r3, #48	@ 0x30
 800d3b8:	fb00 3301 	mla	r3, r0, r1, r3
 800d3bc:	9302      	str	r3, [sp, #8]
 800d3be:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d3c2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800d3c6:	2909      	cmp	r1, #9
 800d3c8:	d9f4      	bls.n	800d3b4 <_vfiprintf_r+0x2c8>
 800d3ca:	e7e6      	b.n	800d39a <_vfiprintf_r+0x2ae>
 800d3cc:	f89b 3000 	ldrb.w	r3, [fp]
 800d3d0:	2b68      	cmp	r3, #104	@ 0x68
 800d3d2:	bf06      	itte	eq
 800d3d4:	f10b 0b01 	addeq.w	fp, fp, #1
 800d3d8:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800d3dc:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800d3e0:	e7ac      	b.n	800d33c <_vfiprintf_r+0x250>
 800d3e2:	f89b 3000 	ldrb.w	r3, [fp]
 800d3e6:	2b6c      	cmp	r3, #108	@ 0x6c
 800d3e8:	d104      	bne.n	800d3f4 <_vfiprintf_r+0x308>
 800d3ea:	f10b 0b01 	add.w	fp, fp, #1
 800d3ee:	f04a 0a20 	orr.w	sl, sl, #32
 800d3f2:	e7a3      	b.n	800d33c <_vfiprintf_r+0x250>
 800d3f4:	f04a 0a10 	orr.w	sl, sl, #16
 800d3f8:	e7a0      	b.n	800d33c <_vfiprintf_r+0x250>
 800d3fa:	46a8      	mov	r8, r5
 800d3fc:	2400      	movs	r4, #0
 800d3fe:	f858 3b04 	ldr.w	r3, [r8], #4
 800d402:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800d406:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800d40a:	2301      	movs	r3, #1
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800d412:	e0ab      	b.n	800d56c <_vfiprintf_r+0x480>
 800d414:	f04a 0a10 	orr.w	sl, sl, #16
 800d418:	f01a 0f20 	tst.w	sl, #32
 800d41c:	d011      	beq.n	800d442 <_vfiprintf_r+0x356>
 800d41e:	3507      	adds	r5, #7
 800d420:	f025 0507 	bic.w	r5, r5, #7
 800d424:	46a8      	mov	r8, r5
 800d426:	686d      	ldr	r5, [r5, #4]
 800d428:	f858 4b08 	ldr.w	r4, [r8], #8
 800d42c:	2d00      	cmp	r5, #0
 800d42e:	da06      	bge.n	800d43e <_vfiprintf_r+0x352>
 800d430:	4264      	negs	r4, r4
 800d432:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800d436:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800d43a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800d43e:	2301      	movs	r3, #1
 800d440:	e048      	b.n	800d4d4 <_vfiprintf_r+0x3e8>
 800d442:	46a8      	mov	r8, r5
 800d444:	f01a 0f10 	tst.w	sl, #16
 800d448:	f858 5b04 	ldr.w	r5, [r8], #4
 800d44c:	d002      	beq.n	800d454 <_vfiprintf_r+0x368>
 800d44e:	462c      	mov	r4, r5
 800d450:	17ed      	asrs	r5, r5, #31
 800d452:	e7eb      	b.n	800d42c <_vfiprintf_r+0x340>
 800d454:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800d458:	d003      	beq.n	800d462 <_vfiprintf_r+0x376>
 800d45a:	b22c      	sxth	r4, r5
 800d45c:	f345 35c0 	sbfx	r5, r5, #15, #1
 800d460:	e7e4      	b.n	800d42c <_vfiprintf_r+0x340>
 800d462:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800d466:	d0f2      	beq.n	800d44e <_vfiprintf_r+0x362>
 800d468:	b26c      	sxtb	r4, r5
 800d46a:	f345 15c0 	sbfx	r5, r5, #7, #1
 800d46e:	e7dd      	b.n	800d42c <_vfiprintf_r+0x340>
 800d470:	f01a 0f20 	tst.w	sl, #32
 800d474:	d007      	beq.n	800d486 <_vfiprintf_r+0x39a>
 800d476:	9a03      	ldr	r2, [sp, #12]
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	9903      	ldr	r1, [sp, #12]
 800d47c:	17d2      	asrs	r2, r2, #31
 800d47e:	e9c3 1200 	strd	r1, r2, [r3]
 800d482:	3504      	adds	r5, #4
 800d484:	e693      	b.n	800d1ae <_vfiprintf_r+0xc2>
 800d486:	f01a 0f10 	tst.w	sl, #16
 800d48a:	d003      	beq.n	800d494 <_vfiprintf_r+0x3a8>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	9a03      	ldr	r2, [sp, #12]
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	e7f6      	b.n	800d482 <_vfiprintf_r+0x396>
 800d494:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800d498:	d003      	beq.n	800d4a2 <_vfiprintf_r+0x3b6>
 800d49a:	682b      	ldr	r3, [r5, #0]
 800d49c:	9a03      	ldr	r2, [sp, #12]
 800d49e:	801a      	strh	r2, [r3, #0]
 800d4a0:	e7ef      	b.n	800d482 <_vfiprintf_r+0x396>
 800d4a2:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800d4a6:	d0f1      	beq.n	800d48c <_vfiprintf_r+0x3a0>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	9a03      	ldr	r2, [sp, #12]
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	e7e8      	b.n	800d482 <_vfiprintf_r+0x396>
 800d4b0:	f04a 0a10 	orr.w	sl, sl, #16
 800d4b4:	f01a 0320 	ands.w	r3, sl, #32
 800d4b8:	d01f      	beq.n	800d4fa <_vfiprintf_r+0x40e>
 800d4ba:	3507      	adds	r5, #7
 800d4bc:	f025 0507 	bic.w	r5, r5, #7
 800d4c0:	46a8      	mov	r8, r5
 800d4c2:	686d      	ldr	r5, [r5, #4]
 800d4c4:	f858 4b08 	ldr.w	r4, [r8], #8
 800d4c8:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800d4d4:	9a01      	ldr	r2, [sp, #4]
 800d4d6:	3201      	adds	r2, #1
 800d4d8:	f000 825f 	beq.w	800d99a <_vfiprintf_r+0x8ae>
 800d4dc:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800d4e0:	9204      	str	r2, [sp, #16]
 800d4e2:	ea54 0205 	orrs.w	r2, r4, r5
 800d4e6:	f040 825e 	bne.w	800d9a6 <_vfiprintf_r+0x8ba>
 800d4ea:	9a01      	ldr	r2, [sp, #4]
 800d4ec:	2a00      	cmp	r2, #0
 800d4ee:	f000 8198 	beq.w	800d822 <_vfiprintf_r+0x736>
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	f040 825a 	bne.w	800d9ac <_vfiprintf_r+0x8c0>
 800d4f8:	e13b      	b.n	800d772 <_vfiprintf_r+0x686>
 800d4fa:	46a8      	mov	r8, r5
 800d4fc:	f01a 0510 	ands.w	r5, sl, #16
 800d500:	f858 4b04 	ldr.w	r4, [r8], #4
 800d504:	d001      	beq.n	800d50a <_vfiprintf_r+0x41e>
 800d506:	461d      	mov	r5, r3
 800d508:	e7de      	b.n	800d4c8 <_vfiprintf_r+0x3dc>
 800d50a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800d50e:	d001      	beq.n	800d514 <_vfiprintf_r+0x428>
 800d510:	b2a4      	uxth	r4, r4
 800d512:	e7d9      	b.n	800d4c8 <_vfiprintf_r+0x3dc>
 800d514:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800d518:	d0d6      	beq.n	800d4c8 <_vfiprintf_r+0x3dc>
 800d51a:	b2e4      	uxtb	r4, r4
 800d51c:	e7f3      	b.n	800d506 <_vfiprintf_r+0x41a>
 800d51e:	46a8      	mov	r8, r5
 800d520:	f647 0330 	movw	r3, #30768	@ 0x7830
 800d524:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800d528:	f858 4b04 	ldr.w	r4, [r8], #4
 800d52c:	4b03      	ldr	r3, [pc, #12]	@ (800d53c <_vfiprintf_r+0x450>)
 800d52e:	9305      	str	r3, [sp, #20]
 800d530:	2500      	movs	r5, #0
 800d532:	f04a 0a02 	orr.w	sl, sl, #2
 800d536:	2302      	movs	r3, #2
 800d538:	e7c9      	b.n	800d4ce <_vfiprintf_r+0x3e2>
 800d53a:	bf00      	nop
 800d53c:	0800e554 	.word	0x0800e554
 800d540:	9b01      	ldr	r3, [sp, #4]
 800d542:	46a8      	mov	r8, r5
 800d544:	1c5c      	adds	r4, r3, #1
 800d546:	f04f 0500 	mov.w	r5, #0
 800d54a:	f858 9b04 	ldr.w	r9, [r8], #4
 800d54e:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800d552:	f000 80d0 	beq.w	800d6f6 <_vfiprintf_r+0x60a>
 800d556:	461a      	mov	r2, r3
 800d558:	4629      	mov	r1, r5
 800d55a:	4648      	mov	r0, r9
 800d55c:	f7f2 fe40 	bl	80001e0 <memchr>
 800d560:	4604      	mov	r4, r0
 800d562:	b118      	cbz	r0, 800d56c <_vfiprintf_r+0x480>
 800d564:	eba0 0309 	sub.w	r3, r0, r9
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	462c      	mov	r4, r5
 800d56c:	9b01      	ldr	r3, [sp, #4]
 800d56e:	42a3      	cmp	r3, r4
 800d570:	bfb8      	it	lt
 800d572:	4623      	movlt	r3, r4
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d57a:	b113      	cbz	r3, 800d582 <_vfiprintf_r+0x496>
 800d57c:	9b04      	ldr	r3, [sp, #16]
 800d57e:	3301      	adds	r3, #1
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	f01a 0302 	ands.w	r3, sl, #2
 800d586:	9308      	str	r3, [sp, #32]
 800d588:	bf1e      	ittt	ne
 800d58a:	9b04      	ldrne	r3, [sp, #16]
 800d58c:	3302      	addne	r3, #2
 800d58e:	9304      	strne	r3, [sp, #16]
 800d590:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800d594:	930a      	str	r3, [sp, #40]	@ 0x28
 800d596:	d11f      	bne.n	800d5d8 <_vfiprintf_r+0x4ec>
 800d598:	9b02      	ldr	r3, [sp, #8]
 800d59a:	9a04      	ldr	r2, [sp, #16]
 800d59c:	1a9d      	subs	r5, r3, r2
 800d59e:	2d00      	cmp	r5, #0
 800d5a0:	dd1a      	ble.n	800d5d8 <_vfiprintf_r+0x4ec>
 800d5a2:	4ba9      	ldr	r3, [pc, #676]	@ (800d848 <_vfiprintf_r+0x75c>)
 800d5a4:	6033      	str	r3, [r6, #0]
 800d5a6:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800d5aa:	2d10      	cmp	r5, #16
 800d5ac:	f102 0201 	add.w	r2, r2, #1
 800d5b0:	f106 0008 	add.w	r0, r6, #8
 800d5b4:	f300 814e 	bgt.w	800d854 <_vfiprintf_r+0x768>
 800d5b8:	6075      	str	r5, [r6, #4]
 800d5ba:	2a07      	cmp	r2, #7
 800d5bc:	4465      	add	r5, ip
 800d5be:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800d5c2:	f340 815a 	ble.w	800d87a <_vfiprintf_r+0x78e>
 800d5c6:	9800      	ldr	r0, [sp, #0]
 800d5c8:	aa0e      	add	r2, sp, #56	@ 0x38
 800d5ca:	4639      	mov	r1, r7
 800d5cc:	f7ff fd5c 	bl	800d088 <__sprint_r>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	f040 81b4 	bne.w	800d93e <_vfiprintf_r+0x852>
 800d5d6:	ae11      	add	r6, sp, #68	@ 0x44
 800d5d8:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800d5dc:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800d5e0:	b161      	cbz	r1, 800d5fc <_vfiprintf_r+0x510>
 800d5e2:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	6031      	str	r1, [r6, #0]
 800d5ea:	2101      	movs	r1, #1
 800d5ec:	440a      	add	r2, r1
 800d5ee:	2b07      	cmp	r3, #7
 800d5f0:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800d5f4:	6071      	str	r1, [r6, #4]
 800d5f6:	f300 8142 	bgt.w	800d87e <_vfiprintf_r+0x792>
 800d5fa:	3608      	adds	r6, #8
 800d5fc:	9908      	ldr	r1, [sp, #32]
 800d5fe:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800d602:	b159      	cbz	r1, 800d61c <_vfiprintf_r+0x530>
 800d604:	a90d      	add	r1, sp, #52	@ 0x34
 800d606:	3301      	adds	r3, #1
 800d608:	6031      	str	r1, [r6, #0]
 800d60a:	2102      	movs	r1, #2
 800d60c:	440a      	add	r2, r1
 800d60e:	2b07      	cmp	r3, #7
 800d610:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800d614:	6071      	str	r1, [r6, #4]
 800d616:	f300 813b 	bgt.w	800d890 <_vfiprintf_r+0x7a4>
 800d61a:	3608      	adds	r6, #8
 800d61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d61e:	2b80      	cmp	r3, #128	@ 0x80
 800d620:	d11f      	bne.n	800d662 <_vfiprintf_r+0x576>
 800d622:	9b02      	ldr	r3, [sp, #8]
 800d624:	9a04      	ldr	r2, [sp, #16]
 800d626:	1a9d      	subs	r5, r3, r2
 800d628:	2d00      	cmp	r5, #0
 800d62a:	dd1a      	ble.n	800d662 <_vfiprintf_r+0x576>
 800d62c:	4b87      	ldr	r3, [pc, #540]	@ (800d84c <_vfiprintf_r+0x760>)
 800d62e:	6033      	str	r3, [r6, #0]
 800d630:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800d634:	2d10      	cmp	r5, #16
 800d636:	f102 0201 	add.w	r2, r2, #1
 800d63a:	f106 0008 	add.w	r0, r6, #8
 800d63e:	f300 8130 	bgt.w	800d8a2 <_vfiprintf_r+0x7b6>
 800d642:	6075      	str	r5, [r6, #4]
 800d644:	2a07      	cmp	r2, #7
 800d646:	4465      	add	r5, ip
 800d648:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800d64c:	f340 813c 	ble.w	800d8c8 <_vfiprintf_r+0x7dc>
 800d650:	9800      	ldr	r0, [sp, #0]
 800d652:	aa0e      	add	r2, sp, #56	@ 0x38
 800d654:	4639      	mov	r1, r7
 800d656:	f7ff fd17 	bl	800d088 <__sprint_r>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	f040 816f 	bne.w	800d93e <_vfiprintf_r+0x852>
 800d660:	ae11      	add	r6, sp, #68	@ 0x44
 800d662:	9b01      	ldr	r3, [sp, #4]
 800d664:	1ae4      	subs	r4, r4, r3
 800d666:	2c00      	cmp	r4, #0
 800d668:	dd1a      	ble.n	800d6a0 <_vfiprintf_r+0x5b4>
 800d66a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800d66e:	4877      	ldr	r0, [pc, #476]	@ (800d84c <_vfiprintf_r+0x760>)
 800d670:	6030      	str	r0, [r6, #0]
 800d672:	2c10      	cmp	r4, #16
 800d674:	f103 0301 	add.w	r3, r3, #1
 800d678:	f106 0108 	add.w	r1, r6, #8
 800d67c:	f300 8126 	bgt.w	800d8cc <_vfiprintf_r+0x7e0>
 800d680:	6074      	str	r4, [r6, #4]
 800d682:	2b07      	cmp	r3, #7
 800d684:	4414      	add	r4, r2
 800d686:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800d68a:	f340 8130 	ble.w	800d8ee <_vfiprintf_r+0x802>
 800d68e:	9800      	ldr	r0, [sp, #0]
 800d690:	aa0e      	add	r2, sp, #56	@ 0x38
 800d692:	4639      	mov	r1, r7
 800d694:	f7ff fcf8 	bl	800d088 <__sprint_r>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f040 8150 	bne.w	800d93e <_vfiprintf_r+0x852>
 800d69e:	ae11      	add	r6, sp, #68	@ 0x44
 800d6a0:	9b01      	ldr	r3, [sp, #4]
 800d6a2:	9a01      	ldr	r2, [sp, #4]
 800d6a4:	6073      	str	r3, [r6, #4]
 800d6a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6a8:	f8c6 9000 	str.w	r9, [r6]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	2b07      	cmp	r3, #7
 800d6b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6b8:	f300 811b 	bgt.w	800d8f2 <_vfiprintf_r+0x806>
 800d6bc:	f106 0308 	add.w	r3, r6, #8
 800d6c0:	f01a 0f04 	tst.w	sl, #4
 800d6c4:	f040 811d 	bne.w	800d902 <_vfiprintf_r+0x816>
 800d6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6cc:	9904      	ldr	r1, [sp, #16]
 800d6ce:	428a      	cmp	r2, r1
 800d6d0:	bfac      	ite	ge
 800d6d2:	189b      	addge	r3, r3, r2
 800d6d4:	185b      	addlt	r3, r3, r1
 800d6d6:	9303      	str	r3, [sp, #12]
 800d6d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d6da:	b13b      	cbz	r3, 800d6ec <_vfiprintf_r+0x600>
 800d6dc:	9800      	ldr	r0, [sp, #0]
 800d6de:	aa0e      	add	r2, sp, #56	@ 0x38
 800d6e0:	4639      	mov	r1, r7
 800d6e2:	f7ff fcd1 	bl	800d088 <__sprint_r>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f040 8129 	bne.w	800d93e <_vfiprintf_r+0x852>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6f0:	4645      	mov	r5, r8
 800d6f2:	ae11      	add	r6, sp, #68	@ 0x44
 800d6f4:	e55b      	b.n	800d1ae <_vfiprintf_r+0xc2>
 800d6f6:	4648      	mov	r0, r9
 800d6f8:	f7f2 fd6a 	bl	80001d0 <strlen>
 800d6fc:	9001      	str	r0, [sp, #4]
 800d6fe:	e734      	b.n	800d56a <_vfiprintf_r+0x47e>
 800d700:	f04a 0a10 	orr.w	sl, sl, #16
 800d704:	f01a 0320 	ands.w	r3, sl, #32
 800d708:	d008      	beq.n	800d71c <_vfiprintf_r+0x630>
 800d70a:	3507      	adds	r5, #7
 800d70c:	f025 0507 	bic.w	r5, r5, #7
 800d710:	46a8      	mov	r8, r5
 800d712:	686d      	ldr	r5, [r5, #4]
 800d714:	f858 4b08 	ldr.w	r4, [r8], #8
 800d718:	2301      	movs	r3, #1
 800d71a:	e6d8      	b.n	800d4ce <_vfiprintf_r+0x3e2>
 800d71c:	46a8      	mov	r8, r5
 800d71e:	f01a 0510 	ands.w	r5, sl, #16
 800d722:	f858 4b04 	ldr.w	r4, [r8], #4
 800d726:	d001      	beq.n	800d72c <_vfiprintf_r+0x640>
 800d728:	461d      	mov	r5, r3
 800d72a:	e7f5      	b.n	800d718 <_vfiprintf_r+0x62c>
 800d72c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800d730:	d001      	beq.n	800d736 <_vfiprintf_r+0x64a>
 800d732:	b2a4      	uxth	r4, r4
 800d734:	e7f0      	b.n	800d718 <_vfiprintf_r+0x62c>
 800d736:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800d73a:	d0ed      	beq.n	800d718 <_vfiprintf_r+0x62c>
 800d73c:	b2e4      	uxtb	r4, r4
 800d73e:	e7f3      	b.n	800d728 <_vfiprintf_r+0x63c>
 800d740:	4a43      	ldr	r2, [pc, #268]	@ (800d850 <_vfiprintf_r+0x764>)
 800d742:	e5c9      	b.n	800d2d8 <_vfiprintf_r+0x1ec>
 800d744:	46a8      	mov	r8, r5
 800d746:	f01a 0510 	ands.w	r5, sl, #16
 800d74a:	f858 4b04 	ldr.w	r4, [r8], #4
 800d74e:	d001      	beq.n	800d754 <_vfiprintf_r+0x668>
 800d750:	4615      	mov	r5, r2
 800d752:	e5cd      	b.n	800d2f0 <_vfiprintf_r+0x204>
 800d754:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800d758:	d001      	beq.n	800d75e <_vfiprintf_r+0x672>
 800d75a:	b2a4      	uxth	r4, r4
 800d75c:	e5c8      	b.n	800d2f0 <_vfiprintf_r+0x204>
 800d75e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800d762:	f43f adc5 	beq.w	800d2f0 <_vfiprintf_r+0x204>
 800d766:	b2e4      	uxtb	r4, r4
 800d768:	e7f2      	b.n	800d750 <_vfiprintf_r+0x664>
 800d76a:	2c0a      	cmp	r4, #10
 800d76c:	f175 0300 	sbcs.w	r3, r5, #0
 800d770:	d206      	bcs.n	800d780 <_vfiprintf_r+0x694>
 800d772:	3430      	adds	r4, #48	@ 0x30
 800d774:	b2e4      	uxtb	r4, r4
 800d776:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800d77a:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800d77e:	e131      	b.n	800d9e4 <_vfiprintf_r+0x8f8>
 800d780:	ab3a      	add	r3, sp, #232	@ 0xe8
 800d782:	9308      	str	r3, [sp, #32]
 800d784:	9b04      	ldr	r3, [sp, #16]
 800d786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d78a:	f04f 0a00 	mov.w	sl, #0
 800d78e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d790:	220a      	movs	r2, #10
 800d792:	2300      	movs	r3, #0
 800d794:	4620      	mov	r0, r4
 800d796:	4629      	mov	r1, r5
 800d798:	f7f3 fa76 	bl	8000c88 <__aeabi_uldivmod>
 800d79c:	460b      	mov	r3, r1
 800d79e:	9908      	ldr	r1, [sp, #32]
 800d7a0:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d7a2:	3230      	adds	r2, #48	@ 0x30
 800d7a4:	f801 2c01 	strb.w	r2, [r1, #-1]
 800d7a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7aa:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 800d7ae:	f10a 0a01 	add.w	sl, sl, #1
 800d7b2:	b1e2      	cbz	r2, 800d7ee <_vfiprintf_r+0x702>
 800d7b4:	9a06      	ldr	r2, [sp, #24]
 800d7b6:	7812      	ldrb	r2, [r2, #0]
 800d7b8:	4552      	cmp	r2, sl
 800d7ba:	d118      	bne.n	800d7ee <_vfiprintf_r+0x702>
 800d7bc:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800d7c0:	d015      	beq.n	800d7ee <_vfiprintf_r+0x702>
 800d7c2:	2c0a      	cmp	r4, #10
 800d7c4:	f175 0200 	sbcs.w	r2, r5, #0
 800d7c8:	d311      	bcc.n	800d7ee <_vfiprintf_r+0x702>
 800d7ca:	9308      	str	r3, [sp, #32]
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d7d0:	eba9 0903 	sub.w	r9, r9, r3
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	4648      	mov	r0, r9
 800d7d8:	f7fd ff63 	bl	800b6a2 <strncpy>
 800d7dc:	9b06      	ldr	r3, [sp, #24]
 800d7de:	785a      	ldrb	r2, [r3, #1]
 800d7e0:	9b08      	ldr	r3, [sp, #32]
 800d7e2:	b172      	cbz	r2, 800d802 <_vfiprintf_r+0x716>
 800d7e4:	9a06      	ldr	r2, [sp, #24]
 800d7e6:	3201      	adds	r2, #1
 800d7e8:	9206      	str	r2, [sp, #24]
 800d7ea:	f04f 0a00 	mov.w	sl, #0
 800d7ee:	2c0a      	cmp	r4, #10
 800d7f0:	f175 0500 	sbcs.w	r5, r5, #0
 800d7f4:	f0c0 80f6 	bcc.w	800d9e4 <_vfiprintf_r+0x8f8>
 800d7f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d7fa:	f8cd 9020 	str.w	r9, [sp, #32]
 800d7fe:	461d      	mov	r5, r3
 800d800:	e7c6      	b.n	800d790 <_vfiprintf_r+0x6a4>
 800d802:	4692      	mov	sl, r2
 800d804:	e7f3      	b.n	800d7ee <_vfiprintf_r+0x702>
 800d806:	f004 030f 	and.w	r3, r4, #15
 800d80a:	9a05      	ldr	r2, [sp, #20]
 800d80c:	0924      	lsrs	r4, r4, #4
 800d80e:	5cd3      	ldrb	r3, [r2, r3]
 800d810:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d814:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800d818:	092d      	lsrs	r5, r5, #4
 800d81a:	ea54 0305 	orrs.w	r3, r4, r5
 800d81e:	d1f2      	bne.n	800d806 <_vfiprintf_r+0x71a>
 800d820:	e0e0      	b.n	800d9e4 <_vfiprintf_r+0x8f8>
 800d822:	b923      	cbnz	r3, 800d82e <_vfiprintf_r+0x742>
 800d824:	f01a 0f01 	tst.w	sl, #1
 800d828:	d001      	beq.n	800d82e <_vfiprintf_r+0x742>
 800d82a:	2430      	movs	r4, #48	@ 0x30
 800d82c:	e7a3      	b.n	800d776 <_vfiprintf_r+0x68a>
 800d82e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800d832:	e0d7      	b.n	800d9e4 <_vfiprintf_r+0x8f8>
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 80a3 	beq.w	800d980 <_vfiprintf_r+0x894>
 800d83a:	2400      	movs	r4, #0
 800d83c:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800d840:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800d844:	46a8      	mov	r8, r5
 800d846:	e5e0      	b.n	800d40a <_vfiprintf_r+0x31e>
 800d848:	0800e8bf 	.word	0x0800e8bf
 800d84c:	0800e8af 	.word	0x0800e8af
 800d850:	0800e565 	.word	0x0800e565
 800d854:	2110      	movs	r1, #16
 800d856:	6071      	str	r1, [r6, #4]
 800d858:	2a07      	cmp	r2, #7
 800d85a:	4461      	add	r1, ip
 800d85c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d860:	dd08      	ble.n	800d874 <_vfiprintf_r+0x788>
 800d862:	9800      	ldr	r0, [sp, #0]
 800d864:	aa0e      	add	r2, sp, #56	@ 0x38
 800d866:	4639      	mov	r1, r7
 800d868:	f7ff fc0e 	bl	800d088 <__sprint_r>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d166      	bne.n	800d93e <_vfiprintf_r+0x852>
 800d870:	4b60      	ldr	r3, [pc, #384]	@ (800d9f4 <_vfiprintf_r+0x908>)
 800d872:	a811      	add	r0, sp, #68	@ 0x44
 800d874:	3d10      	subs	r5, #16
 800d876:	4606      	mov	r6, r0
 800d878:	e694      	b.n	800d5a4 <_vfiprintf_r+0x4b8>
 800d87a:	4606      	mov	r6, r0
 800d87c:	e6ac      	b.n	800d5d8 <_vfiprintf_r+0x4ec>
 800d87e:	9800      	ldr	r0, [sp, #0]
 800d880:	aa0e      	add	r2, sp, #56	@ 0x38
 800d882:	4639      	mov	r1, r7
 800d884:	f7ff fc00 	bl	800d088 <__sprint_r>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d158      	bne.n	800d93e <_vfiprintf_r+0x852>
 800d88c:	ae11      	add	r6, sp, #68	@ 0x44
 800d88e:	e6b5      	b.n	800d5fc <_vfiprintf_r+0x510>
 800d890:	9800      	ldr	r0, [sp, #0]
 800d892:	aa0e      	add	r2, sp, #56	@ 0x38
 800d894:	4639      	mov	r1, r7
 800d896:	f7ff fbf7 	bl	800d088 <__sprint_r>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d14f      	bne.n	800d93e <_vfiprintf_r+0x852>
 800d89e:	ae11      	add	r6, sp, #68	@ 0x44
 800d8a0:	e6bc      	b.n	800d61c <_vfiprintf_r+0x530>
 800d8a2:	2110      	movs	r1, #16
 800d8a4:	6071      	str	r1, [r6, #4]
 800d8a6:	2a07      	cmp	r2, #7
 800d8a8:	4461      	add	r1, ip
 800d8aa:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d8ae:	dd08      	ble.n	800d8c2 <_vfiprintf_r+0x7d6>
 800d8b0:	9800      	ldr	r0, [sp, #0]
 800d8b2:	aa0e      	add	r2, sp, #56	@ 0x38
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	f7ff fbe7 	bl	800d088 <__sprint_r>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d13f      	bne.n	800d93e <_vfiprintf_r+0x852>
 800d8be:	4b4e      	ldr	r3, [pc, #312]	@ (800d9f8 <_vfiprintf_r+0x90c>)
 800d8c0:	a811      	add	r0, sp, #68	@ 0x44
 800d8c2:	3d10      	subs	r5, #16
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	e6b2      	b.n	800d62e <_vfiprintf_r+0x542>
 800d8c8:	4606      	mov	r6, r0
 800d8ca:	e6ca      	b.n	800d662 <_vfiprintf_r+0x576>
 800d8cc:	2010      	movs	r0, #16
 800d8ce:	4402      	add	r2, r0
 800d8d0:	2b07      	cmp	r3, #7
 800d8d2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800d8d6:	6070      	str	r0, [r6, #4]
 800d8d8:	dd06      	ble.n	800d8e8 <_vfiprintf_r+0x7fc>
 800d8da:	9800      	ldr	r0, [sp, #0]
 800d8dc:	aa0e      	add	r2, sp, #56	@ 0x38
 800d8de:	4639      	mov	r1, r7
 800d8e0:	f7ff fbd2 	bl	800d088 <__sprint_r>
 800d8e4:	bb58      	cbnz	r0, 800d93e <_vfiprintf_r+0x852>
 800d8e6:	a911      	add	r1, sp, #68	@ 0x44
 800d8e8:	3c10      	subs	r4, #16
 800d8ea:	460e      	mov	r6, r1
 800d8ec:	e6bd      	b.n	800d66a <_vfiprintf_r+0x57e>
 800d8ee:	460e      	mov	r6, r1
 800d8f0:	e6d6      	b.n	800d6a0 <_vfiprintf_r+0x5b4>
 800d8f2:	9800      	ldr	r0, [sp, #0]
 800d8f4:	aa0e      	add	r2, sp, #56	@ 0x38
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f7ff fbc6 	bl	800d088 <__sprint_r>
 800d8fc:	b9f8      	cbnz	r0, 800d93e <_vfiprintf_r+0x852>
 800d8fe:	ab11      	add	r3, sp, #68	@ 0x44
 800d900:	e6de      	b.n	800d6c0 <_vfiprintf_r+0x5d4>
 800d902:	9a02      	ldr	r2, [sp, #8]
 800d904:	9904      	ldr	r1, [sp, #16]
 800d906:	1a54      	subs	r4, r2, r1
 800d908:	2c00      	cmp	r4, #0
 800d90a:	f77f aedd 	ble.w	800d6c8 <_vfiprintf_r+0x5dc>
 800d90e:	4d39      	ldr	r5, [pc, #228]	@ (800d9f4 <_vfiprintf_r+0x908>)
 800d910:	2610      	movs	r6, #16
 800d912:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800d916:	2c10      	cmp	r4, #16
 800d918:	f102 0201 	add.w	r2, r2, #1
 800d91c:	601d      	str	r5, [r3, #0]
 800d91e:	dc1d      	bgt.n	800d95c <_vfiprintf_r+0x870>
 800d920:	605c      	str	r4, [r3, #4]
 800d922:	2a07      	cmp	r2, #7
 800d924:	440c      	add	r4, r1
 800d926:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800d92a:	f77f aecd 	ble.w	800d6c8 <_vfiprintf_r+0x5dc>
 800d92e:	9800      	ldr	r0, [sp, #0]
 800d930:	aa0e      	add	r2, sp, #56	@ 0x38
 800d932:	4639      	mov	r1, r7
 800d934:	f7ff fba8 	bl	800d088 <__sprint_r>
 800d938:	2800      	cmp	r0, #0
 800d93a:	f43f aec5 	beq.w	800d6c8 <_vfiprintf_r+0x5dc>
 800d93e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d940:	07d9      	lsls	r1, r3, #31
 800d942:	d405      	bmi.n	800d950 <_vfiprintf_r+0x864>
 800d944:	89bb      	ldrh	r3, [r7, #12]
 800d946:	059a      	lsls	r2, r3, #22
 800d948:	d402      	bmi.n	800d950 <_vfiprintf_r+0x864>
 800d94a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d94c:	f7fc f84d 	bl	80099ea <__retarget_lock_release_recursive>
 800d950:	89bb      	ldrh	r3, [r7, #12]
 800d952:	065b      	lsls	r3, r3, #25
 800d954:	f57f abfb 	bpl.w	800d14e <_vfiprintf_r+0x62>
 800d958:	f7ff bbf6 	b.w	800d148 <_vfiprintf_r+0x5c>
 800d95c:	3110      	adds	r1, #16
 800d95e:	2a07      	cmp	r2, #7
 800d960:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d964:	605e      	str	r6, [r3, #4]
 800d966:	dc02      	bgt.n	800d96e <_vfiprintf_r+0x882>
 800d968:	3308      	adds	r3, #8
 800d96a:	3c10      	subs	r4, #16
 800d96c:	e7d1      	b.n	800d912 <_vfiprintf_r+0x826>
 800d96e:	9800      	ldr	r0, [sp, #0]
 800d970:	aa0e      	add	r2, sp, #56	@ 0x38
 800d972:	4639      	mov	r1, r7
 800d974:	f7ff fb88 	bl	800d088 <__sprint_r>
 800d978:	2800      	cmp	r0, #0
 800d97a:	d1e0      	bne.n	800d93e <_vfiprintf_r+0x852>
 800d97c:	ab11      	add	r3, sp, #68	@ 0x44
 800d97e:	e7f4      	b.n	800d96a <_vfiprintf_r+0x87e>
 800d980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d982:	b913      	cbnz	r3, 800d98a <_vfiprintf_r+0x89e>
 800d984:	2300      	movs	r3, #0
 800d986:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d988:	e7d9      	b.n	800d93e <_vfiprintf_r+0x852>
 800d98a:	9800      	ldr	r0, [sp, #0]
 800d98c:	aa0e      	add	r2, sp, #56	@ 0x38
 800d98e:	4639      	mov	r1, r7
 800d990:	f7ff fb7a 	bl	800d088 <__sprint_r>
 800d994:	2800      	cmp	r0, #0
 800d996:	d0f5      	beq.n	800d984 <_vfiprintf_r+0x898>
 800d998:	e7d1      	b.n	800d93e <_vfiprintf_r+0x852>
 800d99a:	ea54 0205 	orrs.w	r2, r4, r5
 800d99e:	f8cd a010 	str.w	sl, [sp, #16]
 800d9a2:	f43f ada6 	beq.w	800d4f2 <_vfiprintf_r+0x406>
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	f43f aedf 	beq.w	800d76a <_vfiprintf_r+0x67e>
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800d9b2:	f43f af28 	beq.w	800d806 <_vfiprintf_r+0x71a>
 800d9b6:	f004 0307 	and.w	r3, r4, #7
 800d9ba:	08e4      	lsrs	r4, r4, #3
 800d9bc:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d9c0:	08ed      	lsrs	r5, r5, #3
 800d9c2:	3330      	adds	r3, #48	@ 0x30
 800d9c4:	ea54 0105 	orrs.w	r1, r4, r5
 800d9c8:	464a      	mov	r2, r9
 800d9ca:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d9ce:	d1f2      	bne.n	800d9b6 <_vfiprintf_r+0x8ca>
 800d9d0:	9904      	ldr	r1, [sp, #16]
 800d9d2:	07c8      	lsls	r0, r1, #31
 800d9d4:	d506      	bpl.n	800d9e4 <_vfiprintf_r+0x8f8>
 800d9d6:	2b30      	cmp	r3, #48	@ 0x30
 800d9d8:	d004      	beq.n	800d9e4 <_vfiprintf_r+0x8f8>
 800d9da:	2330      	movs	r3, #48	@ 0x30
 800d9dc:	f809 3c01 	strb.w	r3, [r9, #-1]
 800d9e0:	f1a2 0902 	sub.w	r9, r2, #2
 800d9e4:	ab3a      	add	r3, sp, #232	@ 0xe8
 800d9e6:	eba3 0309 	sub.w	r3, r3, r9
 800d9ea:	9c01      	ldr	r4, [sp, #4]
 800d9ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d9f0:	9301      	str	r3, [sp, #4]
 800d9f2:	e5bb      	b.n	800d56c <_vfiprintf_r+0x480>
 800d9f4:	0800e8bf 	.word	0x0800e8bf
 800d9f8:	0800e8af 	.word	0x0800e8af

0800d9fc <__sbprintf>:
 800d9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9fe:	461f      	mov	r7, r3
 800da00:	898b      	ldrh	r3, [r1, #12]
 800da02:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800da06:	f023 0302 	bic.w	r3, r3, #2
 800da0a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800da0e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800da10:	9319      	str	r3, [sp, #100]	@ 0x64
 800da12:	89cb      	ldrh	r3, [r1, #14]
 800da14:	f8ad 300e 	strh.w	r3, [sp, #14]
 800da18:	69cb      	ldr	r3, [r1, #28]
 800da1a:	9307      	str	r3, [sp, #28]
 800da1c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800da1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da20:	ab1a      	add	r3, sp, #104	@ 0x68
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da2a:	4615      	mov	r5, r2
 800da2c:	4606      	mov	r6, r0
 800da2e:	9302      	str	r3, [sp, #8]
 800da30:	9305      	str	r3, [sp, #20]
 800da32:	a816      	add	r0, sp, #88	@ 0x58
 800da34:	2300      	movs	r3, #0
 800da36:	460c      	mov	r4, r1
 800da38:	9306      	str	r3, [sp, #24]
 800da3a:	f7fb ffd3 	bl	80099e4 <__retarget_lock_init_recursive>
 800da3e:	462a      	mov	r2, r5
 800da40:	463b      	mov	r3, r7
 800da42:	4669      	mov	r1, sp
 800da44:	4630      	mov	r0, r6
 800da46:	f7ff fb51 	bl	800d0ec <_vfiprintf_r>
 800da4a:	1e05      	subs	r5, r0, #0
 800da4c:	db07      	blt.n	800da5e <__sbprintf+0x62>
 800da4e:	4669      	mov	r1, sp
 800da50:	4630      	mov	r0, r6
 800da52:	f7fd fe01 	bl	800b658 <_fflush_r>
 800da56:	2800      	cmp	r0, #0
 800da58:	bf18      	it	ne
 800da5a:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 800da5e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800da62:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800da64:	065b      	lsls	r3, r3, #25
 800da66:	bf42      	ittt	mi
 800da68:	89a3      	ldrhmi	r3, [r4, #12]
 800da6a:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800da6e:	81a3      	strhmi	r3, [r4, #12]
 800da70:	f7fb ffb9 	bl	80099e6 <__retarget_lock_close_recursive>
 800da74:	4628      	mov	r0, r5
 800da76:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800da7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da7c <__sfvwrite_r>:
 800da7c:	6893      	ldr	r3, [r2, #8]
 800da7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da82:	4606      	mov	r6, r0
 800da84:	460c      	mov	r4, r1
 800da86:	4691      	mov	r9, r2
 800da88:	b91b      	cbnz	r3, 800da92 <__sfvwrite_r+0x16>
 800da8a:	2000      	movs	r0, #0
 800da8c:	b003      	add	sp, #12
 800da8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da92:	898b      	ldrh	r3, [r1, #12]
 800da94:	0718      	lsls	r0, r3, #28
 800da96:	d550      	bpl.n	800db3a <__sfvwrite_r+0xbe>
 800da98:	690b      	ldr	r3, [r1, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d04d      	beq.n	800db3a <__sfvwrite_r+0xbe>
 800da9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daa2:	f8d9 8000 	ldr.w	r8, [r9]
 800daa6:	f013 0702 	ands.w	r7, r3, #2
 800daaa:	d16b      	bne.n	800db84 <__sfvwrite_r+0x108>
 800daac:	f013 0301 	ands.w	r3, r3, #1
 800dab0:	f000 809c 	beq.w	800dbec <__sfvwrite_r+0x170>
 800dab4:	4638      	mov	r0, r7
 800dab6:	46ba      	mov	sl, r7
 800dab8:	46bb      	mov	fp, r7
 800daba:	f1bb 0f00 	cmp.w	fp, #0
 800dabe:	f000 8103 	beq.w	800dcc8 <__sfvwrite_r+0x24c>
 800dac2:	b950      	cbnz	r0, 800dada <__sfvwrite_r+0x5e>
 800dac4:	465a      	mov	r2, fp
 800dac6:	210a      	movs	r1, #10
 800dac8:	4650      	mov	r0, sl
 800daca:	f7f2 fb89 	bl	80001e0 <memchr>
 800dace:	2800      	cmp	r0, #0
 800dad0:	f000 8100 	beq.w	800dcd4 <__sfvwrite_r+0x258>
 800dad4:	3001      	adds	r0, #1
 800dad6:	eba0 070a 	sub.w	r7, r0, sl
 800dada:	6820      	ldr	r0, [r4, #0]
 800dadc:	6921      	ldr	r1, [r4, #16]
 800dade:	68a5      	ldr	r5, [r4, #8]
 800dae0:	6963      	ldr	r3, [r4, #20]
 800dae2:	455f      	cmp	r7, fp
 800dae4:	463a      	mov	r2, r7
 800dae6:	bf28      	it	cs
 800dae8:	465a      	movcs	r2, fp
 800daea:	4288      	cmp	r0, r1
 800daec:	f240 80f5 	bls.w	800dcda <__sfvwrite_r+0x25e>
 800daf0:	441d      	add	r5, r3
 800daf2:	42aa      	cmp	r2, r5
 800daf4:	f340 80f1 	ble.w	800dcda <__sfvwrite_r+0x25e>
 800daf8:	4651      	mov	r1, sl
 800dafa:	462a      	mov	r2, r5
 800dafc:	f7ff f875 	bl	800cbea <memmove>
 800db00:	6823      	ldr	r3, [r4, #0]
 800db02:	442b      	add	r3, r5
 800db04:	6023      	str	r3, [r4, #0]
 800db06:	4621      	mov	r1, r4
 800db08:	4630      	mov	r0, r6
 800db0a:	f7fd fda5 	bl	800b658 <_fflush_r>
 800db0e:	2800      	cmp	r0, #0
 800db10:	d167      	bne.n	800dbe2 <__sfvwrite_r+0x166>
 800db12:	1b7f      	subs	r7, r7, r5
 800db14:	f040 80f9 	bne.w	800dd0a <__sfvwrite_r+0x28e>
 800db18:	4621      	mov	r1, r4
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7fd fd9c 	bl	800b658 <_fflush_r>
 800db20:	2800      	cmp	r0, #0
 800db22:	d15e      	bne.n	800dbe2 <__sfvwrite_r+0x166>
 800db24:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800db28:	1b5b      	subs	r3, r3, r5
 800db2a:	44aa      	add	sl, r5
 800db2c:	ebab 0b05 	sub.w	fp, fp, r5
 800db30:	f8c9 3008 	str.w	r3, [r9, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1c0      	bne.n	800daba <__sfvwrite_r+0x3e>
 800db38:	e7a7      	b.n	800da8a <__sfvwrite_r+0xe>
 800db3a:	4621      	mov	r1, r4
 800db3c:	4630      	mov	r0, r6
 800db3e:	f000 f8e9 	bl	800dd14 <__swsetup_r>
 800db42:	2800      	cmp	r0, #0
 800db44:	d0ab      	beq.n	800da9e <__sfvwrite_r+0x22>
 800db46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db4a:	e79f      	b.n	800da8c <__sfvwrite_r+0x10>
 800db4c:	e9d8 a500 	ldrd	sl, r5, [r8]
 800db50:	f108 0808 	add.w	r8, r8, #8
 800db54:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800db58:	69e1      	ldr	r1, [r4, #28]
 800db5a:	2d00      	cmp	r5, #0
 800db5c:	d0f6      	beq.n	800db4c <__sfvwrite_r+0xd0>
 800db5e:	42bd      	cmp	r5, r7
 800db60:	462b      	mov	r3, r5
 800db62:	4652      	mov	r2, sl
 800db64:	bf28      	it	cs
 800db66:	463b      	movcs	r3, r7
 800db68:	4630      	mov	r0, r6
 800db6a:	47d8      	blx	fp
 800db6c:	2800      	cmp	r0, #0
 800db6e:	dd38      	ble.n	800dbe2 <__sfvwrite_r+0x166>
 800db70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800db74:	1a1b      	subs	r3, r3, r0
 800db76:	4482      	add	sl, r0
 800db78:	1a2d      	subs	r5, r5, r0
 800db7a:	f8c9 3008 	str.w	r3, [r9, #8]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1e8      	bne.n	800db54 <__sfvwrite_r+0xd8>
 800db82:	e782      	b.n	800da8a <__sfvwrite_r+0xe>
 800db84:	f04f 0a00 	mov.w	sl, #0
 800db88:	4f61      	ldr	r7, [pc, #388]	@ (800dd10 <__sfvwrite_r+0x294>)
 800db8a:	4655      	mov	r5, sl
 800db8c:	e7e2      	b.n	800db54 <__sfvwrite_r+0xd8>
 800db8e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800db92:	f108 0808 	add.w	r8, r8, #8
 800db96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db9a:	6820      	ldr	r0, [r4, #0]
 800db9c:	68a2      	ldr	r2, [r4, #8]
 800db9e:	f1ba 0f00 	cmp.w	sl, #0
 800dba2:	d0f4      	beq.n	800db8e <__sfvwrite_r+0x112>
 800dba4:	0599      	lsls	r1, r3, #22
 800dba6:	d563      	bpl.n	800dc70 <__sfvwrite_r+0x1f4>
 800dba8:	4552      	cmp	r2, sl
 800dbaa:	d836      	bhi.n	800dc1a <__sfvwrite_r+0x19e>
 800dbac:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800dbb0:	d033      	beq.n	800dc1a <__sfvwrite_r+0x19e>
 800dbb2:	6921      	ldr	r1, [r4, #16]
 800dbb4:	6965      	ldr	r5, [r4, #20]
 800dbb6:	eba0 0b01 	sub.w	fp, r0, r1
 800dbba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbc2:	f10b 0201 	add.w	r2, fp, #1
 800dbc6:	106d      	asrs	r5, r5, #1
 800dbc8:	4452      	add	r2, sl
 800dbca:	4295      	cmp	r5, r2
 800dbcc:	bf38      	it	cc
 800dbce:	4615      	movcc	r5, r2
 800dbd0:	055b      	lsls	r3, r3, #21
 800dbd2:	d53d      	bpl.n	800dc50 <__sfvwrite_r+0x1d4>
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	f7fc f83c 	bl	8009c54 <_malloc_r>
 800dbdc:	b948      	cbnz	r0, 800dbf2 <__sfvwrite_r+0x176>
 800dbde:	230c      	movs	r3, #12
 800dbe0:	6033      	str	r3, [r6, #0]
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	e7ac      	b.n	800db46 <__sfvwrite_r+0xca>
 800dbec:	461f      	mov	r7, r3
 800dbee:	469a      	mov	sl, r3
 800dbf0:	e7d1      	b.n	800db96 <__sfvwrite_r+0x11a>
 800dbf2:	465a      	mov	r2, fp
 800dbf4:	6921      	ldr	r1, [r4, #16]
 800dbf6:	9001      	str	r0, [sp, #4]
 800dbf8:	f7fb fef8 	bl	80099ec <memcpy>
 800dbfc:	89a2      	ldrh	r2, [r4, #12]
 800dbfe:	9b01      	ldr	r3, [sp, #4]
 800dc00:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800dc04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800dc08:	81a2      	strh	r2, [r4, #12]
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	6165      	str	r5, [r4, #20]
 800dc0e:	445b      	add	r3, fp
 800dc10:	eba5 050b 	sub.w	r5, r5, fp
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	4652      	mov	r2, sl
 800dc18:	60a5      	str	r5, [r4, #8]
 800dc1a:	4552      	cmp	r2, sl
 800dc1c:	bf28      	it	cs
 800dc1e:	4652      	movcs	r2, sl
 800dc20:	6820      	ldr	r0, [r4, #0]
 800dc22:	9201      	str	r2, [sp, #4]
 800dc24:	4639      	mov	r1, r7
 800dc26:	f7fe ffe0 	bl	800cbea <memmove>
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	9a01      	ldr	r2, [sp, #4]
 800dc2e:	1a9b      	subs	r3, r3, r2
 800dc30:	60a3      	str	r3, [r4, #8]
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	4413      	add	r3, r2
 800dc36:	4655      	mov	r5, sl
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dc3e:	1b5b      	subs	r3, r3, r5
 800dc40:	442f      	add	r7, r5
 800dc42:	ebaa 0a05 	sub.w	sl, sl, r5
 800dc46:	f8c9 3008 	str.w	r3, [r9, #8]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1a3      	bne.n	800db96 <__sfvwrite_r+0x11a>
 800dc4e:	e71c      	b.n	800da8a <__sfvwrite_r+0xe>
 800dc50:	462a      	mov	r2, r5
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7ff f850 	bl	800ccf8 <_realloc_r>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	d1d5      	bne.n	800dc0a <__sfvwrite_r+0x18e>
 800dc5e:	6921      	ldr	r1, [r4, #16]
 800dc60:	4630      	mov	r0, r6
 800dc62:	f7fb ff37 	bl	8009ad4 <_free_r>
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	e7b6      	b.n	800dbde <__sfvwrite_r+0x162>
 800dc70:	6923      	ldr	r3, [r4, #16]
 800dc72:	4283      	cmp	r3, r0
 800dc74:	d302      	bcc.n	800dc7c <__sfvwrite_r+0x200>
 800dc76:	6961      	ldr	r1, [r4, #20]
 800dc78:	4551      	cmp	r1, sl
 800dc7a:	d915      	bls.n	800dca8 <__sfvwrite_r+0x22c>
 800dc7c:	4552      	cmp	r2, sl
 800dc7e:	bf28      	it	cs
 800dc80:	4652      	movcs	r2, sl
 800dc82:	4639      	mov	r1, r7
 800dc84:	4615      	mov	r5, r2
 800dc86:	f7fe ffb0 	bl	800cbea <memmove>
 800dc8a:	68a3      	ldr	r3, [r4, #8]
 800dc8c:	6822      	ldr	r2, [r4, #0]
 800dc8e:	1b5b      	subs	r3, r3, r5
 800dc90:	442a      	add	r2, r5
 800dc92:	60a3      	str	r3, [r4, #8]
 800dc94:	6022      	str	r2, [r4, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1cf      	bne.n	800dc3a <__sfvwrite_r+0x1be>
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f7fd fcdb 	bl	800b658 <_fflush_r>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d0c9      	beq.n	800dc3a <__sfvwrite_r+0x1be>
 800dca6:	e79c      	b.n	800dbe2 <__sfvwrite_r+0x166>
 800dca8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dcac:	4553      	cmp	r3, sl
 800dcae:	bf28      	it	cs
 800dcb0:	4653      	movcs	r3, sl
 800dcb2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800dcb4:	fb93 f3f1 	sdiv	r3, r3, r1
 800dcb8:	463a      	mov	r2, r7
 800dcba:	434b      	muls	r3, r1
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	69e1      	ldr	r1, [r4, #28]
 800dcc0:	47a8      	blx	r5
 800dcc2:	1e05      	subs	r5, r0, #0
 800dcc4:	dcb9      	bgt.n	800dc3a <__sfvwrite_r+0x1be>
 800dcc6:	e78c      	b.n	800dbe2 <__sfvwrite_r+0x166>
 800dcc8:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800dccc:	2000      	movs	r0, #0
 800dcce:	f108 0808 	add.w	r8, r8, #8
 800dcd2:	e6f2      	b.n	800daba <__sfvwrite_r+0x3e>
 800dcd4:	f10b 0701 	add.w	r7, fp, #1
 800dcd8:	e6ff      	b.n	800dada <__sfvwrite_r+0x5e>
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	dc08      	bgt.n	800dcf0 <__sfvwrite_r+0x274>
 800dcde:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800dce0:	69e1      	ldr	r1, [r4, #28]
 800dce2:	4652      	mov	r2, sl
 800dce4:	4630      	mov	r0, r6
 800dce6:	47a8      	blx	r5
 800dce8:	1e05      	subs	r5, r0, #0
 800dcea:	f73f af12 	bgt.w	800db12 <__sfvwrite_r+0x96>
 800dcee:	e778      	b.n	800dbe2 <__sfvwrite_r+0x166>
 800dcf0:	4651      	mov	r1, sl
 800dcf2:	9201      	str	r2, [sp, #4]
 800dcf4:	f7fe ff79 	bl	800cbea <memmove>
 800dcf8:	9a01      	ldr	r2, [sp, #4]
 800dcfa:	68a3      	ldr	r3, [r4, #8]
 800dcfc:	1a9b      	subs	r3, r3, r2
 800dcfe:	60a3      	str	r3, [r4, #8]
 800dd00:	6823      	ldr	r3, [r4, #0]
 800dd02:	4413      	add	r3, r2
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	4615      	mov	r5, r2
 800dd08:	e703      	b.n	800db12 <__sfvwrite_r+0x96>
 800dd0a:	2001      	movs	r0, #1
 800dd0c:	e70a      	b.n	800db24 <__sfvwrite_r+0xa8>
 800dd0e:	bf00      	nop
 800dd10:	7ffffc00 	.word	0x7ffffc00

0800dd14 <__swsetup_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4b29      	ldr	r3, [pc, #164]	@ (800ddbc <__swsetup_r+0xa8>)
 800dd18:	4605      	mov	r5, r0
 800dd1a:	6818      	ldr	r0, [r3, #0]
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	b118      	cbz	r0, 800dd28 <__swsetup_r+0x14>
 800dd20:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dd22:	b90b      	cbnz	r3, 800dd28 <__swsetup_r+0x14>
 800dd24:	f7fb fcd4 	bl	80096d0 <__sinit>
 800dd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2c:	0719      	lsls	r1, r3, #28
 800dd2e:	d422      	bmi.n	800dd76 <__swsetup_r+0x62>
 800dd30:	06da      	lsls	r2, r3, #27
 800dd32:	d407      	bmi.n	800dd44 <__swsetup_r+0x30>
 800dd34:	2209      	movs	r2, #9
 800dd36:	602a      	str	r2, [r5, #0]
 800dd38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd3c:	81a3      	strh	r3, [r4, #12]
 800dd3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd42:	e033      	b.n	800ddac <__swsetup_r+0x98>
 800dd44:	0758      	lsls	r0, r3, #29
 800dd46:	d512      	bpl.n	800dd6e <__swsetup_r+0x5a>
 800dd48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd4a:	b141      	cbz	r1, 800dd5e <__swsetup_r+0x4a>
 800dd4c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800dd50:	4299      	cmp	r1, r3
 800dd52:	d002      	beq.n	800dd5a <__swsetup_r+0x46>
 800dd54:	4628      	mov	r0, r5
 800dd56:	f7fb febd 	bl	8009ad4 <_free_r>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	2300      	movs	r3, #0
 800dd68:	6063      	str	r3, [r4, #4]
 800dd6a:	6923      	ldr	r3, [r4, #16]
 800dd6c:	6023      	str	r3, [r4, #0]
 800dd6e:	89a3      	ldrh	r3, [r4, #12]
 800dd70:	f043 0308 	orr.w	r3, r3, #8
 800dd74:	81a3      	strh	r3, [r4, #12]
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	b94b      	cbnz	r3, 800dd8e <__swsetup_r+0x7a>
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd84:	d003      	beq.n	800dd8e <__swsetup_r+0x7a>
 800dd86:	4621      	mov	r1, r4
 800dd88:	4628      	mov	r0, r5
 800dd8a:	f000 f8c9 	bl	800df20 <__smakebuf_r>
 800dd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd92:	f013 0201 	ands.w	r2, r3, #1
 800dd96:	d00a      	beq.n	800ddae <__swsetup_r+0x9a>
 800dd98:	2200      	movs	r2, #0
 800dd9a:	60a2      	str	r2, [r4, #8]
 800dd9c:	6962      	ldr	r2, [r4, #20]
 800dd9e:	4252      	negs	r2, r2
 800dda0:	61a2      	str	r2, [r4, #24]
 800dda2:	6922      	ldr	r2, [r4, #16]
 800dda4:	b942      	cbnz	r2, 800ddb8 <__swsetup_r+0xa4>
 800dda6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ddaa:	d1c5      	bne.n	800dd38 <__swsetup_r+0x24>
 800ddac:	bd38      	pop	{r3, r4, r5, pc}
 800ddae:	0799      	lsls	r1, r3, #30
 800ddb0:	bf58      	it	pl
 800ddb2:	6962      	ldrpl	r2, [r4, #20]
 800ddb4:	60a2      	str	r2, [r4, #8]
 800ddb6:	e7f4      	b.n	800dda2 <__swsetup_r+0x8e>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	e7f7      	b.n	800ddac <__swsetup_r+0x98>
 800ddbc:	20000018 	.word	0x20000018

0800ddc0 <__fputwc>:
 800ddc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ddc4:	4680      	mov	r8, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	4614      	mov	r4, r2
 800ddca:	f7fe ff29 	bl	800cc20 <__locale_mb_cur_max>
 800ddce:	2801      	cmp	r0, #1
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	d11b      	bne.n	800de0c <__fputwc+0x4c>
 800ddd4:	1e7b      	subs	r3, r7, #1
 800ddd6:	2bfe      	cmp	r3, #254	@ 0xfe
 800ddd8:	d818      	bhi.n	800de0c <__fputwc+0x4c>
 800ddda:	f88d 7004 	strb.w	r7, [sp, #4]
 800ddde:	2600      	movs	r6, #0
 800dde0:	f10d 0904 	add.w	r9, sp, #4
 800dde4:	42ae      	cmp	r6, r5
 800dde6:	d021      	beq.n	800de2c <__fputwc+0x6c>
 800dde8:	68a3      	ldr	r3, [r4, #8]
 800ddea:	f816 1009 	ldrb.w	r1, [r6, r9]
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	60a3      	str	r3, [r4, #8]
 800ddf4:	da04      	bge.n	800de00 <__fputwc+0x40>
 800ddf6:	69a2      	ldr	r2, [r4, #24]
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	db1b      	blt.n	800de34 <__fputwc+0x74>
 800ddfc:	290a      	cmp	r1, #10
 800ddfe:	d019      	beq.n	800de34 <__fputwc+0x74>
 800de00:	6823      	ldr	r3, [r4, #0]
 800de02:	1c5a      	adds	r2, r3, #1
 800de04:	6022      	str	r2, [r4, #0]
 800de06:	7019      	strb	r1, [r3, #0]
 800de08:	3601      	adds	r6, #1
 800de0a:	e7eb      	b.n	800dde4 <__fputwc+0x24>
 800de0c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800de10:	463a      	mov	r2, r7
 800de12:	a901      	add	r1, sp, #4
 800de14:	4640      	mov	r0, r8
 800de16:	f000 f845 	bl	800dea4 <_wcrtomb_r>
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	4605      	mov	r5, r0
 800de1e:	d1de      	bne.n	800ddde <__fputwc+0x1e>
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800de2c:	4638      	mov	r0, r7
 800de2e:	b003      	add	sp, #12
 800de30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de34:	4622      	mov	r2, r4
 800de36:	4640      	mov	r0, r8
 800de38:	f000 f8ae 	bl	800df98 <__swbuf_r>
 800de3c:	3001      	adds	r0, #1
 800de3e:	d1e3      	bne.n	800de08 <__fputwc+0x48>
 800de40:	e7f2      	b.n	800de28 <__fputwc+0x68>

0800de42 <_fputwc_r>:
 800de42:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800de44:	07db      	lsls	r3, r3, #31
 800de46:	b570      	push	{r4, r5, r6, lr}
 800de48:	4605      	mov	r5, r0
 800de4a:	460e      	mov	r6, r1
 800de4c:	4614      	mov	r4, r2
 800de4e:	d405      	bmi.n	800de5c <_fputwc_r+0x1a>
 800de50:	8993      	ldrh	r3, [r2, #12]
 800de52:	0598      	lsls	r0, r3, #22
 800de54:	d402      	bmi.n	800de5c <_fputwc_r+0x1a>
 800de56:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800de58:	f7fb fdc6 	bl	80099e8 <__retarget_lock_acquire_recursive>
 800de5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de60:	0499      	lsls	r1, r3, #18
 800de62:	d406      	bmi.n	800de72 <_fputwc_r+0x30>
 800de64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800de68:	81a3      	strh	r3, [r4, #12]
 800de6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800de70:	6663      	str	r3, [r4, #100]	@ 0x64
 800de72:	4622      	mov	r2, r4
 800de74:	4628      	mov	r0, r5
 800de76:	4631      	mov	r1, r6
 800de78:	f7ff ffa2 	bl	800ddc0 <__fputwc>
 800de7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de7e:	07da      	lsls	r2, r3, #31
 800de80:	4605      	mov	r5, r0
 800de82:	d405      	bmi.n	800de90 <_fputwc_r+0x4e>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	059b      	lsls	r3, r3, #22
 800de88:	d402      	bmi.n	800de90 <_fputwc_r+0x4e>
 800de8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de8c:	f7fb fdad 	bl	80099ea <__retarget_lock_release_recursive>
 800de90:	4628      	mov	r0, r5
 800de92:	bd70      	pop	{r4, r5, r6, pc}

0800de94 <abort>:
 800de94:	b508      	push	{r3, lr}
 800de96:	2006      	movs	r0, #6
 800de98:	f000 f8f0 	bl	800e07c <raise>
 800de9c:	2001      	movs	r0, #1
 800de9e:	f7f4 fff5 	bl	8002e8c <_exit>
	...

0800dea4 <_wcrtomb_r>:
 800dea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea6:	4c09      	ldr	r4, [pc, #36]	@ (800decc <_wcrtomb_r+0x28>)
 800dea8:	b085      	sub	sp, #20
 800deaa:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800deae:	4605      	mov	r5, r0
 800deb0:	461e      	mov	r6, r3
 800deb2:	b909      	cbnz	r1, 800deb8 <_wcrtomb_r+0x14>
 800deb4:	460a      	mov	r2, r1
 800deb6:	a901      	add	r1, sp, #4
 800deb8:	47b8      	blx	r7
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	bf01      	itttt	eq
 800debe:	2300      	moveq	r3, #0
 800dec0:	6033      	streq	r3, [r6, #0]
 800dec2:	238a      	moveq	r3, #138	@ 0x8a
 800dec4:	602b      	streq	r3, [r5, #0]
 800dec6:	b005      	add	sp, #20
 800dec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deca:	bf00      	nop
 800decc:	20000554 	.word	0x20000554

0800ded0 <__swhatbuf_r>:
 800ded0:	b570      	push	{r4, r5, r6, lr}
 800ded2:	460c      	mov	r4, r1
 800ded4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded8:	2900      	cmp	r1, #0
 800deda:	b096      	sub	sp, #88	@ 0x58
 800dedc:	4615      	mov	r5, r2
 800dede:	461e      	mov	r6, r3
 800dee0:	da07      	bge.n	800def2 <__swhatbuf_r+0x22>
 800dee2:	89a1      	ldrh	r1, [r4, #12]
 800dee4:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800dee8:	d117      	bne.n	800df1a <__swhatbuf_r+0x4a>
 800deea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800deee:	4608      	mov	r0, r1
 800def0:	e00f      	b.n	800df12 <__swhatbuf_r+0x42>
 800def2:	466a      	mov	r2, sp
 800def4:	f000 f8ca 	bl	800e08c <_fstat_r>
 800def8:	2800      	cmp	r0, #0
 800defa:	dbf2      	blt.n	800dee2 <__swhatbuf_r+0x12>
 800defc:	9901      	ldr	r1, [sp, #4]
 800defe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df06:	4259      	negs	r1, r3
 800df08:	4159      	adcs	r1, r3
 800df0a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800df0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df12:	6031      	str	r1, [r6, #0]
 800df14:	602b      	str	r3, [r5, #0]
 800df16:	b016      	add	sp, #88	@ 0x58
 800df18:	bd70      	pop	{r4, r5, r6, pc}
 800df1a:	2100      	movs	r1, #0
 800df1c:	2340      	movs	r3, #64	@ 0x40
 800df1e:	e7e6      	b.n	800deee <__swhatbuf_r+0x1e>

0800df20 <__smakebuf_r>:
 800df20:	898b      	ldrh	r3, [r1, #12]
 800df22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df24:	079d      	lsls	r5, r3, #30
 800df26:	4606      	mov	r6, r0
 800df28:	460c      	mov	r4, r1
 800df2a:	d507      	bpl.n	800df3c <__smakebuf_r+0x1c>
 800df2c:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	6123      	str	r3, [r4, #16]
 800df34:	2301      	movs	r3, #1
 800df36:	6163      	str	r3, [r4, #20]
 800df38:	b003      	add	sp, #12
 800df3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3c:	ab01      	add	r3, sp, #4
 800df3e:	466a      	mov	r2, sp
 800df40:	f7ff ffc6 	bl	800ded0 <__swhatbuf_r>
 800df44:	9f00      	ldr	r7, [sp, #0]
 800df46:	4605      	mov	r5, r0
 800df48:	4639      	mov	r1, r7
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7fb fe82 	bl	8009c54 <_malloc_r>
 800df50:	b948      	cbnz	r0, 800df66 <__smakebuf_r+0x46>
 800df52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df56:	059a      	lsls	r2, r3, #22
 800df58:	d4ee      	bmi.n	800df38 <__smakebuf_r+0x18>
 800df5a:	f023 0303 	bic.w	r3, r3, #3
 800df5e:	f043 0302 	orr.w	r3, r3, #2
 800df62:	81a3      	strh	r3, [r4, #12]
 800df64:	e7e2      	b.n	800df2c <__smakebuf_r+0xc>
 800df66:	89a3      	ldrh	r3, [r4, #12]
 800df68:	6020      	str	r0, [r4, #0]
 800df6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df6e:	81a3      	strh	r3, [r4, #12]
 800df70:	9b01      	ldr	r3, [sp, #4]
 800df72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df76:	b15b      	cbz	r3, 800df90 <__smakebuf_r+0x70>
 800df78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df7c:	4630      	mov	r0, r6
 800df7e:	f000 f897 	bl	800e0b0 <_isatty_r>
 800df82:	b128      	cbz	r0, 800df90 <__smakebuf_r+0x70>
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	f023 0303 	bic.w	r3, r3, #3
 800df8a:	f043 0301 	orr.w	r3, r3, #1
 800df8e:	81a3      	strh	r3, [r4, #12]
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	431d      	orrs	r5, r3
 800df94:	81a5      	strh	r5, [r4, #12]
 800df96:	e7cf      	b.n	800df38 <__smakebuf_r+0x18>

0800df98 <__swbuf_r>:
 800df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9a:	460e      	mov	r6, r1
 800df9c:	4614      	mov	r4, r2
 800df9e:	4605      	mov	r5, r0
 800dfa0:	b118      	cbz	r0, 800dfaa <__swbuf_r+0x12>
 800dfa2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dfa4:	b90b      	cbnz	r3, 800dfaa <__swbuf_r+0x12>
 800dfa6:	f7fb fb93 	bl	80096d0 <__sinit>
 800dfaa:	69a3      	ldr	r3, [r4, #24]
 800dfac:	60a3      	str	r3, [r4, #8]
 800dfae:	89a3      	ldrh	r3, [r4, #12]
 800dfb0:	0719      	lsls	r1, r3, #28
 800dfb2:	d501      	bpl.n	800dfb8 <__swbuf_r+0x20>
 800dfb4:	6923      	ldr	r3, [r4, #16]
 800dfb6:	b943      	cbnz	r3, 800dfca <__swbuf_r+0x32>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f7ff feaa 	bl	800dd14 <__swsetup_r>
 800dfc0:	b118      	cbz	r0, 800dfca <__swbuf_r+0x32>
 800dfc2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfce:	b2f6      	uxtb	r6, r6
 800dfd0:	049a      	lsls	r2, r3, #18
 800dfd2:	4637      	mov	r7, r6
 800dfd4:	d406      	bmi.n	800dfe4 <__swbuf_r+0x4c>
 800dfd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dfde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dfe2:	6663      	str	r3, [r4, #100]	@ 0x64
 800dfe4:	6823      	ldr	r3, [r4, #0]
 800dfe6:	6922      	ldr	r2, [r4, #16]
 800dfe8:	1a98      	subs	r0, r3, r2
 800dfea:	6963      	ldr	r3, [r4, #20]
 800dfec:	4283      	cmp	r3, r0
 800dfee:	dc05      	bgt.n	800dffc <__swbuf_r+0x64>
 800dff0:	4621      	mov	r1, r4
 800dff2:	4628      	mov	r0, r5
 800dff4:	f7fd fb30 	bl	800b658 <_fflush_r>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d1e2      	bne.n	800dfc2 <__swbuf_r+0x2a>
 800dffc:	68a3      	ldr	r3, [r4, #8]
 800dffe:	3b01      	subs	r3, #1
 800e000:	60a3      	str	r3, [r4, #8]
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	1c5a      	adds	r2, r3, #1
 800e006:	6022      	str	r2, [r4, #0]
 800e008:	701e      	strb	r6, [r3, #0]
 800e00a:	6962      	ldr	r2, [r4, #20]
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	429a      	cmp	r2, r3
 800e010:	d004      	beq.n	800e01c <__swbuf_r+0x84>
 800e012:	89a3      	ldrh	r3, [r4, #12]
 800e014:	07db      	lsls	r3, r3, #31
 800e016:	d5d6      	bpl.n	800dfc6 <__swbuf_r+0x2e>
 800e018:	2e0a      	cmp	r6, #10
 800e01a:	d1d4      	bne.n	800dfc6 <__swbuf_r+0x2e>
 800e01c:	4621      	mov	r1, r4
 800e01e:	4628      	mov	r0, r5
 800e020:	f7fd fb1a 	bl	800b658 <_fflush_r>
 800e024:	2800      	cmp	r0, #0
 800e026:	d0ce      	beq.n	800dfc6 <__swbuf_r+0x2e>
 800e028:	e7cb      	b.n	800dfc2 <__swbuf_r+0x2a>

0800e02a <_raise_r>:
 800e02a:	291f      	cmp	r1, #31
 800e02c:	b538      	push	{r3, r4, r5, lr}
 800e02e:	4605      	mov	r5, r0
 800e030:	460c      	mov	r4, r1
 800e032:	d904      	bls.n	800e03e <_raise_r+0x14>
 800e034:	2316      	movs	r3, #22
 800e036:	6003      	str	r3, [r0, #0]
 800e038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e03c:	bd38      	pop	{r3, r4, r5, pc}
 800e03e:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800e042:	b112      	cbz	r2, 800e04a <_raise_r+0x20>
 800e044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e048:	b94b      	cbnz	r3, 800e05e <_raise_r+0x34>
 800e04a:	4628      	mov	r0, r5
 800e04c:	f000 f852 	bl	800e0f4 <_getpid_r>
 800e050:	4622      	mov	r2, r4
 800e052:	4601      	mov	r1, r0
 800e054:	4628      	mov	r0, r5
 800e056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e05a:	f000 b839 	b.w	800e0d0 <_kill_r>
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d00a      	beq.n	800e078 <_raise_r+0x4e>
 800e062:	1c59      	adds	r1, r3, #1
 800e064:	d103      	bne.n	800e06e <_raise_r+0x44>
 800e066:	2316      	movs	r3, #22
 800e068:	6003      	str	r3, [r0, #0]
 800e06a:	2001      	movs	r0, #1
 800e06c:	e7e6      	b.n	800e03c <_raise_r+0x12>
 800e06e:	2100      	movs	r1, #0
 800e070:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e074:	4620      	mov	r0, r4
 800e076:	4798      	blx	r3
 800e078:	2000      	movs	r0, #0
 800e07a:	e7df      	b.n	800e03c <_raise_r+0x12>

0800e07c <raise>:
 800e07c:	4b02      	ldr	r3, [pc, #8]	@ (800e088 <raise+0xc>)
 800e07e:	4601      	mov	r1, r0
 800e080:	6818      	ldr	r0, [r3, #0]
 800e082:	f7ff bfd2 	b.w	800e02a <_raise_r>
 800e086:	bf00      	nop
 800e088:	20000018 	.word	0x20000018

0800e08c <_fstat_r>:
 800e08c:	b538      	push	{r3, r4, r5, lr}
 800e08e:	4d07      	ldr	r5, [pc, #28]	@ (800e0ac <_fstat_r+0x20>)
 800e090:	2300      	movs	r3, #0
 800e092:	4604      	mov	r4, r0
 800e094:	4608      	mov	r0, r1
 800e096:	4611      	mov	r1, r2
 800e098:	602b      	str	r3, [r5, #0]
 800e09a:	f7f4 ff2b 	bl	8002ef4 <_fstat>
 800e09e:	1c43      	adds	r3, r0, #1
 800e0a0:	d102      	bne.n	800e0a8 <_fstat_r+0x1c>
 800e0a2:	682b      	ldr	r3, [r5, #0]
 800e0a4:	b103      	cbz	r3, 800e0a8 <_fstat_r+0x1c>
 800e0a6:	6023      	str	r3, [r4, #0]
 800e0a8:	bd38      	pop	{r3, r4, r5, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20004bcc 	.word	0x20004bcc

0800e0b0 <_isatty_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4d06      	ldr	r5, [pc, #24]	@ (800e0cc <_isatty_r+0x1c>)
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	4608      	mov	r0, r1
 800e0ba:	602b      	str	r3, [r5, #0]
 800e0bc:	f7f4 ff2a 	bl	8002f14 <_isatty>
 800e0c0:	1c43      	adds	r3, r0, #1
 800e0c2:	d102      	bne.n	800e0ca <_isatty_r+0x1a>
 800e0c4:	682b      	ldr	r3, [r5, #0]
 800e0c6:	b103      	cbz	r3, 800e0ca <_isatty_r+0x1a>
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	bd38      	pop	{r3, r4, r5, pc}
 800e0cc:	20004bcc 	.word	0x20004bcc

0800e0d0 <_kill_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d07      	ldr	r5, [pc, #28]	@ (800e0f0 <_kill_r+0x20>)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	4608      	mov	r0, r1
 800e0da:	4611      	mov	r1, r2
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	f7f4 fec5 	bl	8002e6c <_kill>
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	d102      	bne.n	800e0ec <_kill_r+0x1c>
 800e0e6:	682b      	ldr	r3, [r5, #0]
 800e0e8:	b103      	cbz	r3, 800e0ec <_kill_r+0x1c>
 800e0ea:	6023      	str	r3, [r4, #0]
 800e0ec:	bd38      	pop	{r3, r4, r5, pc}
 800e0ee:	bf00      	nop
 800e0f0:	20004bcc 	.word	0x20004bcc

0800e0f4 <_getpid_r>:
 800e0f4:	f7f4 beb2 	b.w	8002e5c <_getpid>

0800e0f8 <_init>:
 800e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fa:	bf00      	nop
 800e0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0fe:	bc08      	pop	{r3}
 800e100:	469e      	mov	lr, r3
 800e102:	4770      	bx	lr

0800e104 <_fini>:
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e106:	bf00      	nop
 800e108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10a:	bc08      	pop	{r3}
 800e10c:	469e      	mov	lr, r3
 800e10e:	4770      	bx	lr
