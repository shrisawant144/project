
bme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000481c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080049ac  080049ac  000059ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a84  08004a84  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a8c  08004a8c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a90  08004a90  00005a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a94  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000208  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a47d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001706  00000000  00000000  00010509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  00011c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000770  00000000  00000000  00012588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020689  00000000  00000000  00012cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bab6  00000000  00000000  00033381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c55a4  00000000  00000000  0003ee37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001043db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cfc  00000000  00000000  00104420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0010711c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004994 	.word	0x08004994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004994 	.word	0x08004994

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800029e:	f000 b9b5 	b.w	800060c <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <bmp280_init_default_params>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void bmp280_init_default_params(bmp280_params_t *params) {
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2203      	movs	r2, #3
 800061c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2203      	movs	r2, #3
 8000628:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2203      	movs	r2, #3
 800062e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2203      	movs	r2, #3
 8000634:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2203      	movs	r2, #3
 800063a:	715a      	strb	r2, [r3, #5]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af04      	add	r7, sp, #16
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	460b      	mov	r3, r1
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(&hi2c1, tx_buff, addr, 1, rx_buff, 2, 5000)
 800065e:	7afb      	ldrb	r3, [r7, #11]
 8000660:	b29a      	uxth	r2, r3
 8000662:	8af9      	ldrh	r1, [r7, #22]
 8000664:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2302      	movs	r3, #2
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2301      	movs	r3, #1
 8000676:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <read_register16+0x5c>)
 8000678:	f001 fe4e 	bl	8002318 <HAL_I2C_Mem_Read>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10b      	bne.n	800069a <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000682:	7d7b      	ldrb	r3, [r7, #21]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b21a      	sxth	r2, r3
 8000688:	7d3b      	ldrb	r3, [r7, #20]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21b      	sxth	r3, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	801a      	strh	r2, [r3, #0]
		return true;
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <read_register16+0x54>
	} else
		return false;
 800069a:	2300      	movs	r3, #0

}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000078 	.word	0x20000078

080006a8 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af04      	add	r7, sp, #16
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	461a      	mov	r2, r3
 80006b4:	460b      	mov	r3, r1
 80006b6:	72fb      	strb	r3, [r7, #11]
 80006b8:	4613      	mov	r3, r2
 80006ba:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(&hi2c1, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	7abb      	ldrb	r3, [r7, #10]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	8af9      	ldrh	r1, [r7, #22]
 80006ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80006d2:	9002      	str	r0, [sp, #8]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2301      	movs	r3, #1
 80006dc:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <read_data+0x50>)
 80006de:	f001 fe1b 	bl	8002318 <HAL_I2C_Mem_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <read_data+0x44>
		return 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e000      	b.n	80006ee <read_data+0x46>
	else
		return 1;
 80006ec:	2301      	movs	r3, #1

}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000078 	.word	0x20000078

080006fc <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	461a      	mov	r2, r3
 8000708:	2188      	movs	r1, #136	@ 0x88
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff9c 	bl	8000648 <read_register16>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d06f      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3302      	adds	r3, #2
 800071a:	461a      	mov	r2, r3
 800071c:	218a      	movs	r1, #138	@ 0x8a
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff92 	bl	8000648 <read_register16>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d065      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3304      	adds	r3, #4
 800072e:	461a      	mov	r2, r3
 8000730:	218c      	movs	r1, #140	@ 0x8c
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ff88 	bl	8000648 <read_register16>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d05b      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3306      	adds	r3, #6
 8000742:	461a      	mov	r2, r3
 8000744:	218e      	movs	r1, #142	@ 0x8e
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ff7e 	bl	8000648 <read_register16>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d051      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3308      	adds	r3, #8
 8000756:	461a      	mov	r2, r3
 8000758:	2190      	movs	r1, #144	@ 0x90
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff74 	bl	8000648 <read_register16>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d047      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	330a      	adds	r3, #10
 800076a:	461a      	mov	r2, r3
 800076c:	2192      	movs	r1, #146	@ 0x92
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff6a 	bl	8000648 <read_register16>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d03d      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	330c      	adds	r3, #12
 800077e:	461a      	mov	r2, r3
 8000780:	2194      	movs	r1, #148	@ 0x94
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff60 	bl	8000648 <read_register16>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d033      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	330e      	adds	r3, #14
 8000792:	461a      	mov	r2, r3
 8000794:	2196      	movs	r1, #150	@ 0x96
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff56 	bl	8000648 <read_register16>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d029      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3310      	adds	r3, #16
 80007a6:	461a      	mov	r2, r3
 80007a8:	2198      	movs	r1, #152	@ 0x98
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff4c 	bl	8000648 <read_register16>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01f      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3312      	adds	r3, #18
 80007ba:	461a      	mov	r2, r3
 80007bc:	219a      	movs	r1, #154	@ 0x9a
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff42 	bl	8000648 <read_register16>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d015      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3314      	adds	r3, #20
 80007ce:	461a      	mov	r2, r3
 80007d0:	219c      	movs	r1, #156	@ 0x9c
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff38 	bl	8000648 <read_register16>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00b      	beq.n	80007f6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80007e2:	461a      	mov	r2, r3
 80007e4:	219e      	movs	r1, #158	@ 0x9e
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff2e 	bl	8000648 <read_register16>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <read_calibration_data+0xfa>

		return true;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e000      	b.n	80007f8 <read_calibration_data+0xfc>
	}

	return false;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f103 0218 	add.w	r2, r3, #24
 800080e:	2301      	movs	r3, #1
 8000810:	21a1      	movs	r1, #161	@ 0xa1
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ff48 	bl	80006a8 <read_data>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d14b      	bne.n	80008b6 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	331a      	adds	r3, #26
 8000822:	461a      	mov	r2, r3
 8000824:	21e1      	movs	r1, #225	@ 0xe1
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ff0e 	bl	8000648 <read_register16>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d041      	beq.n	80008b6 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 021c 	add.w	r2, r3, #28
 8000838:	2301      	movs	r3, #1
 800083a:	21e3      	movs	r1, #227	@ 0xe3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff33 	bl	80006a8 <read_data>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d136      	bne.n	80008b6 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000848:	f107 030e 	add.w	r3, r7, #14
 800084c:	461a      	mov	r2, r3
 800084e:	21e4      	movs	r1, #228	@ 0xe4
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff fef9 	bl	8000648 <read_register16>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d02c      	beq.n	80008b6 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	461a      	mov	r2, r3
 8000862:	21e5      	movs	r1, #229	@ 0xe5
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff feef 	bl	8000648 <read_register16>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d022      	beq.n	80008b6 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8000876:	2301      	movs	r3, #1
 8000878:	21e7      	movs	r1, #231	@ 0xe7
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff14 	bl	80006a8 <read_data>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d117      	bne.n	80008b6 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	b21b      	sxth	r3, r3
 800088c:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8000890:	b21a      	sxth	r2, r3
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	121b      	asrs	r3, r3, #8
 8000896:	b21b      	sxth	r3, r3
 8000898:	f003 030f 	and.w	r3, r3, #15
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80008a6:	89bb      	ldrh	r3, [r7, #12]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	841a      	strh	r2, [r3, #32]

		return true;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e000      	b.n	80008b8 <read_hum_calibration_data+0xb8>
	}

	return false;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
 80008cc:	4613      	mov	r3, r2
 80008ce:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(&hi2c1, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	89f9      	ldrh	r1, [r7, #14]
 80008de:	f242 7310 	movw	r3, #10000	@ 0x2710
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	2301      	movs	r3, #1
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	1cbb      	adds	r3, r7, #2
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2301      	movs	r3, #1
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <write_register8+0x48>)
 80008f0:	f001 fc18 	bl	8002124 <HAL_I2C_Mem_Write>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <write_register8+0x3e>
		return false;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e000      	b.n	8000900 <write_register8+0x40>
	else
		return true;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000078 	.word	0x20000078

0800090c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800091a:	2b76      	cmp	r3, #118	@ 0x76
 800091c:	d005      	beq.n	800092a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000922:	2b77      	cmp	r3, #119	@ 0x77
 8000924:	d001      	beq.n	800092a <bmp280_init+0x1e>

		return false;
 8000926:	2300      	movs	r3, #0
 8000928:	e099      	b.n	8000a5e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000930:	2301      	movs	r3, #1
 8000932:	21d0      	movs	r1, #208	@ 0xd0
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff feb7 	bl	80006a8 <read_data>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <bmp280_init+0x38>
		return false;
 8000940:	2300      	movs	r3, #0
 8000942:	e08c      	b.n	8000a5e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800094a:	2b58      	cmp	r3, #88	@ 0x58
 800094c:	d006      	beq.n	800095c <bmp280_init+0x50>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000954:	2b60      	cmp	r3, #96	@ 0x60
 8000956:	d001      	beq.n	800095c <bmp280_init+0x50>

		return false;
 8000958:	2300      	movs	r3, #0
 800095a:	e080      	b.n	8000a5e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800095c:	22b6      	movs	r2, #182	@ 0xb6
 800095e:	21e0      	movs	r1, #224	@ 0xe0
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ffad 	bl	80008c0 <write_register8>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <bmp280_init+0x64>
		return false;
 800096c:	2300      	movs	r3, #0
 800096e:	e076      	b.n	8000a5e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000970:	f107 020c 	add.w	r2, r7, #12
 8000974:	2301      	movs	r3, #1
 8000976:	21f3      	movs	r1, #243	@ 0xf3
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fe95 	bl	80006a8 <read_data>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f5      	bne.n	8000970 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f0      	bne.n	8000970 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff feb4 	bl	80006fc <read_calibration_data>
 8000994:	4603      	mov	r3, r0
 8000996:	f083 0301 	eor.w	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d100      	bne.n	80009a2 <bmp280_init+0x96>
 80009a0:	e001      	b.n	80009a6 <bmp280_init+0x9a>
		return false;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e05b      	b.n	8000a5e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80009ac:	2b60      	cmp	r3, #96	@ 0x60
 80009ae:	d10a      	bne.n	80009c6 <bmp280_init+0xba>
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff25 	bl	8000800 <read_hum_calibration_data>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f083 0301 	eor.w	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <bmp280_init+0xba>
		return false;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e04b      	b.n	8000a5e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	795b      	ldrb	r3, [r3, #5]
 80009ca:	015b      	lsls	r3, r3, #5
 80009cc:	b25a      	sxtb	r2, r3
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	785b      	ldrb	r3, [r3, #1]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b25b      	sxtb	r3, r3
 80009da:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	461a      	mov	r2, r3
 80009e0:	21f5      	movs	r1, #245	@ 0xf5
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ff6c 	bl	80008c0 <write_register8>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <bmp280_init+0xe6>
		return false;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e035      	b.n	8000a5e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d102      	bne.n	8000a00 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000a06:	b25a      	sxtb	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b25a      	sxtb	r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000a1e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8000a26:	2b60      	cmp	r3, #96	@ 0x60
 8000a28:	d10d      	bne.n	8000a46 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000a30:	7b7b      	ldrb	r3, [r7, #13]
 8000a32:	461a      	mov	r2, r3
 8000a34:	21f2      	movs	r1, #242	@ 0xf2
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ff42 	bl	80008c0 <write_register8>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <bmp280_init+0x13a>
			return false;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e00b      	b.n	8000a5e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	21f4      	movs	r1, #244	@ 0xf4
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff37 	bl	80008c0 <write_register8>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <bmp280_init+0x150>
		return false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e000      	b.n	8000a5e <bmp280_init+0x152>
	}

	return true;
 8000a5c:	2301      	movs	r3, #1
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 8000a6e:	f107 020f 	add.w	r2, r7, #15
 8000a72:	2301      	movs	r3, #1
 8000a74:	21f4      	movs	r1, #244	@ 0xf4
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fe16 	bl	80006a8 <read_data>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <bmp280_force_measurement+0x20>
		return false;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e015      	b.n	8000ab2 <bmp280_force_measurement+0x4c>
	ctrl &= ~0b11;  // clear two lower bits
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f023 0303 	bic.w	r3, r3, #3
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	73fb      	strb	r3, [r7, #15]
	ctrl |= BMP280_MODE_FORCED;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	21f4      	movs	r1, #244	@ 0xf4
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff0d 	bl	80008c0 <write_register8>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <bmp280_force_measurement+0x4a>
		return false;
 8000aac:	2300      	movs	r3, #0
 8000aae:	e000      	b.n	8000ab2 <bmp280_force_measurement+0x4c>
	}
	return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b084      	sub	sp, #16
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8000ac2:	f107 020f 	add.w	r2, r7, #15
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	21f3      	movs	r1, #243	@ 0xf3
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdec 	bl	80006a8 <read_data>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <bmp280_is_measuring+0x20>
		return false;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e007      	b.n	8000aea <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <bmp280_is_measuring+0x2e>
		return true;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e000      	b.n	8000aea <bmp280_is_measuring+0x30>
	}
	return false;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000af2:	b480      	push	{r7}
 8000af4:	b087      	sub	sp, #28
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	10da      	asrs	r2, r3, #3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000b14:	12db      	asrs	r3, r3, #11
 8000b16:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	111b      	asrs	r3, r3, #4
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	8812      	ldrh	r2, [r2, #0]
 8000b20:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	1112      	asrs	r2, r2, #4
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	8809      	ldrh	r1, [r1, #0]
 8000b2a:	1a52      	subs	r2, r2, r1
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000b38:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000b3c:	139b      	asrs	r3, r3, #14
 8000b3e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	441a      	add	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	3380      	adds	r3, #128	@ 0x80
 8000b56:	121b      	asrs	r3, r3, #8
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b68:	b0cc      	sub	sp, #304	@ 0x130
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8000b70:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8000b74:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000b7c:	17da      	asrs	r2, r3, #31
 8000b7e:	461c      	mov	r4, r3
 8000b80:	4615      	mov	r5, r2
 8000b82:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000b86:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000b8a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000b8e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b96:	fb03 f102 	mul.w	r1, r3, r2
 8000b9a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	18ca      	adds	r2, r1, r3
 8000ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000bac:	fba3 8903 	umull	r8, r9, r3, r3
 8000bb0:	eb02 0309 	add.w	r3, r2, r9
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	17da      	asrs	r2, r3, #31
 8000bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000bc6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000bca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000bce:	4603      	mov	r3, r0
 8000bd0:	fb03 f209 	mul.w	r2, r3, r9
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	fb08 f303 	mul.w	r3, r8, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	4602      	mov	r2, r0
 8000bde:	fba8 1202 	umull	r1, r2, r8, r2
 8000be2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000be6:	460a      	mov	r2, r1
 8000be8:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000bec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000bf6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000bfa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8000bfe:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	17da      	asrs	r2, r3, #31
 8000c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c12:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c1a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000c1e:	462a      	mov	r2, r5
 8000c20:	fb02 f203 	mul.w	r2, r2, r3
 8000c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c28:	4621      	mov	r1, r4
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	441a      	add	r2, r3
 8000c30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000c34:	4621      	mov	r1, r4
 8000c36:	fba3 1301 	umull	r1, r3, r3, r1
 8000c3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c3e:	460b      	mov	r3, r1
 8000c40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	f04f 0100 	mov.w	r1, #0
 8000c56:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c5a:	462b      	mov	r3, r5
 8000c5c:	0459      	lsls	r1, r3, #17
 8000c5e:	4623      	mov	r3, r4
 8000c60:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000c64:	4623      	mov	r3, r4
 8000c66:	0458      	lsls	r0, r3, #17
 8000c68:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c6c:	1814      	adds	r4, r2, r0
 8000c6e:	643c      	str	r4, [r7, #64]	@ 0x40
 8000c70:	414b      	adcs	r3, r1
 8000c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c74:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000c78:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	17da      	asrs	r2, r3, #31
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	f04f 0100 	mov.w	r1, #0
 8000c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c9c:	00d9      	lsls	r1, r3, #3
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ca4:	1814      	adds	r4, r2, r0
 8000ca6:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000ca8:	414b      	adcs	r3, r1
 8000caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cac:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000cb0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000cb4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000cbc:	fb03 f102 	mul.w	r1, r3, r2
 8000cc0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000cc8:	fb02 f303 	mul.w	r3, r2, r3
 8000ccc:	18ca      	adds	r2, r1, r3
 8000cce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000cd2:	fba3 1303 	umull	r1, r3, r3, r3
 8000cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cda:	460b      	mov	r3, r1
 8000cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	17da      	asrs	r2, r3, #31
 8000cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000cfe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000d02:	462b      	mov	r3, r5
 8000d04:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000d08:	4642      	mov	r2, r8
 8000d0a:	fb02 f203 	mul.w	r2, r2, r3
 8000d0e:	464b      	mov	r3, r9
 8000d10:	4621      	mov	r1, r4
 8000d12:	fb01 f303 	mul.w	r3, r1, r3
 8000d16:	4413      	add	r3, r2
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4641      	mov	r1, r8
 8000d1c:	fba2 1201 	umull	r1, r2, r2, r1
 8000d20:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000d24:	460a      	mov	r2, r1
 8000d26:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000d2a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d2e:	4413      	add	r3, r2
 8000d30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000d34:	f04f 0000 	mov.w	r0, #0
 8000d38:	f04f 0100 	mov.w	r1, #0
 8000d3c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000d40:	4623      	mov	r3, r4
 8000d42:	0a18      	lsrs	r0, r3, #8
 8000d44:	462b      	mov	r3, r5
 8000d46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d4a:	462b      	mov	r3, r5
 8000d4c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	17da      	asrs	r2, r3, #31
 8000d5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000d5e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d66:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	fb02 f203 	mul.w	r2, r2, r3
 8000d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d74:	4644      	mov	r4, r8
 8000d76:	fb04 f303 	mul.w	r3, r4, r3
 8000d7a:	441a      	add	r2, r3
 8000d7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d80:	4644      	mov	r4, r8
 8000d82:	fba3 4304 	umull	r4, r3, r3, r4
 8000d86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000d90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000da6:	464c      	mov	r4, r9
 8000da8:	0323      	lsls	r3, r4, #12
 8000daa:	4644      	mov	r4, r8
 8000dac:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000db0:	4644      	mov	r4, r8
 8000db2:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000db4:	1884      	adds	r4, r0, r2
 8000db6:	633c      	str	r4, [r7, #48]	@ 0x30
 8000db8:	eb41 0303 	adc.w	r3, r1, r3
 8000dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dbe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000dc2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000dc6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000dca:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000dce:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000dd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dda:	88db      	ldrh	r3, [r3, #6]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000de4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000de8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000dec:	462b      	mov	r3, r5
 8000dee:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000df2:	4642      	mov	r2, r8
 8000df4:	fb02 f203 	mul.w	r2, r2, r3
 8000df8:	464b      	mov	r3, r9
 8000dfa:	4621      	mov	r1, r4
 8000dfc:	fb01 f303 	mul.w	r3, r1, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	4622      	mov	r2, r4
 8000e04:	4641      	mov	r1, r8
 8000e06:	fba2 1201 	umull	r1, r2, r2, r1
 8000e0a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000e0e:	460a      	mov	r2, r1
 8000e10:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000e14:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e18:	4413      	add	r3, r2
 8000e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	104a      	asrs	r2, r1, #1
 8000e2e:	4629      	mov	r1, r5
 8000e30:	17cb      	asrs	r3, r1, #31
 8000e32:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8000e36:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e148      	b.n	80010d4 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8000e42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e46:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000e4a:	17da      	asrs	r2, r3, #31
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000e50:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e54:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8000e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e5c:	105b      	asrs	r3, r3, #1
 8000e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000e62:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e66:	07db      	lsls	r3, r3, #31
 8000e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000e6c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e70:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000e74:	4621      	mov	r1, r4
 8000e76:	1a89      	subs	r1, r1, r2
 8000e78:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	eb61 0303 	sbc.w	r3, r1, r3
 8000e80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000e86:	4622      	mov	r2, r4
 8000e88:	462b      	mov	r3, r5
 8000e8a:	1891      	adds	r1, r2, r2
 8000e8c:	6239      	str	r1, [r7, #32]
 8000e8e:	415b      	adcs	r3, r3
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e96:	4621      	mov	r1, r4
 8000e98:	1851      	adds	r1, r2, r1
 8000e9a:	61b9      	str	r1, [r7, #24]
 8000e9c:	4629      	mov	r1, r5
 8000e9e:	414b      	adcs	r3, r1
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000eae:	4649      	mov	r1, r9
 8000eb0:	018b      	lsls	r3, r1, #6
 8000eb2:	4641      	mov	r1, r8
 8000eb4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000eb8:	4641      	mov	r1, r8
 8000eba:	018a      	lsls	r2, r1, #6
 8000ebc:	4641      	mov	r1, r8
 8000ebe:	1889      	adds	r1, r1, r2
 8000ec0:	6139      	str	r1, [r7, #16]
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	eb43 0101 	adc.w	r1, r3, r1
 8000ec8:	6179      	str	r1, [r7, #20]
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	008b      	lsls	r3, r1, #2
 8000eda:	4641      	mov	r1, r8
 8000edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000ee0:	4641      	mov	r1, r8
 8000ee2:	008a      	lsls	r2, r1, #2
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4622      	mov	r2, r4
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	462a      	mov	r2, r5
 8000ef4:	eb42 0303 	adc.w	r3, r2, r3
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000f06:	4649      	mov	r1, r9
 8000f08:	008b      	lsls	r3, r1, #2
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f10:	4641      	mov	r1, r8
 8000f12:	008a      	lsls	r2, r1, #2
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	189b      	adds	r3, r3, r2
 8000f1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f20:	462b      	mov	r3, r5
 8000f22:	460a      	mov	r2, r1
 8000f24:	eb42 0303 	adc.w	r3, r2, r3
 8000f28:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f2a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000f2e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000f32:	f7ff f9a5 	bl	8000280 <__aeabi_ldivmod>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f42:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	17da      	asrs	r2, r3, #31
 8000f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f4c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f4e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	f04f 0100 	mov.w	r1, #0
 8000f5a:	0b50      	lsrs	r0, r2, #13
 8000f5c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f60:	1359      	asrs	r1, r3, #13
 8000f62:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f66:	462b      	mov	r3, r5
 8000f68:	fb00 f203 	mul.w	r2, r0, r3
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	fb03 f301 	mul.w	r3, r3, r1
 8000f72:	4413      	add	r3, r2
 8000f74:	4622      	mov	r2, r4
 8000f76:	fba2 1200 	umull	r1, r2, r2, r0
 8000f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000f7e:	460a      	mov	r2, r1
 8000f80:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000f84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000f88:	4413      	add	r3, r2
 8000f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000f8e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	0b50      	lsrs	r0, r2, #13
 8000f9c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000fa0:	1359      	asrs	r1, r3, #13
 8000fa2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000fa6:	462b      	mov	r3, r5
 8000fa8:	fb00 f203 	mul.w	r2, r0, r3
 8000fac:	4623      	mov	r3, r4
 8000fae:	fb03 f301 	mul.w	r3, r3, r1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	fba2 1200 	umull	r1, r2, r2, r0
 8000fba:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000fbe:	460a      	mov	r2, r1
 8000fc0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000fc4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000fc8:	4413      	add	r3, r2
 8000fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000fda:	4621      	mov	r1, r4
 8000fdc:	0e4a      	lsrs	r2, r1, #25
 8000fde:	4629      	mov	r1, r5
 8000fe0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	164b      	asrs	r3, r1, #25
 8000fe8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ff0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	17da      	asrs	r2, r3, #31
 8000ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8000ffa:	667a      	str	r2, [r7, #100]	@ 0x64
 8000ffc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001000:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001004:	462a      	mov	r2, r5
 8001006:	fb02 f203 	mul.w	r2, r2, r3
 800100a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800100e:	4621      	mov	r1, r4
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	4413      	add	r3, r2
 8001016:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800101a:	4621      	mov	r1, r4
 800101c:	fba2 1201 	umull	r1, r2, r2, r1
 8001020:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001024:	460a      	mov	r2, r1
 8001026:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800102a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800102e:	4413      	add	r3, r2
 8001030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001040:	4621      	mov	r1, r4
 8001042:	0cca      	lsrs	r2, r1, #19
 8001044:	4629      	mov	r1, r5
 8001046:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800104a:	4629      	mov	r1, r5
 800104c:	14cb      	asrs	r3, r1, #19
 800104e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001052:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001056:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800105a:	1884      	adds	r4, r0, r2
 800105c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800105e:	eb41 0303 	adc.w	r3, r1, r3
 8001062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001064:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001068:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800106c:	4621      	mov	r1, r4
 800106e:	1889      	adds	r1, r1, r2
 8001070:	6539      	str	r1, [r7, #80]	@ 0x50
 8001072:	4629      	mov	r1, r5
 8001074:	eb43 0101 	adc.w	r1, r3, r1
 8001078:	6579      	str	r1, [r7, #84]	@ 0x54
 800107a:	f04f 0000 	mov.w	r0, #0
 800107e:	f04f 0100 	mov.w	r1, #0
 8001082:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001086:	4623      	mov	r3, r4
 8001088:	0a18      	lsrs	r0, r3, #8
 800108a:	462b      	mov	r3, r5
 800108c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001090:	462b      	mov	r3, r5
 8001092:	1219      	asrs	r1, r3, #8
 8001094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001098:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800109c:	b21b      	sxth	r3, r3
 800109e:	17da      	asrs	r2, r3, #31
 80010a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80010b0:	464c      	mov	r4, r9
 80010b2:	0123      	lsls	r3, r4, #4
 80010b4:	4644      	mov	r4, r8
 80010b6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80010ba:	4644      	mov	r4, r8
 80010bc:	0122      	lsls	r2, r4, #4
 80010be:	1884      	adds	r4, r0, r2
 80010c0:	603c      	str	r4, [r7, #0]
 80010c2:	eb41 0303 	adc.w	r3, r1, r3
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80010d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80010da:	46bd      	mov	sp, r7
 80010dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080010e0 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80010f2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	039a      	lsls	r2, r3, #14
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80010fe:	051b      	lsls	r3, r3, #20
 8001100:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001108:	4619      	mov	r1, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fb01 f303 	mul.w	r3, r1, r3
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001116:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800111e:	4611      	mov	r1, r2
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	fb01 f202 	mul.w	r2, r1, r2
 8001126:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	7f09      	ldrb	r1, [r1, #28]
 800112c:	4608      	mov	r0, r1
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	fb00 f101 	mul.w	r1, r0, r1
 8001134:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001136:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800113a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800113e:	1292      	asrs	r2, r2, #10
 8001140:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001144:	68f9      	ldr	r1, [r7, #12]
 8001146:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800114a:	fb01 f202 	mul.w	r2, r1, r2
 800114e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001152:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	13db      	asrs	r3, r3, #15
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	13d2      	asrs	r2, r2, #15
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	7e12      	ldrb	r2, [r2, #24]
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800117e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001186:	bfa8      	it	ge
 8001188:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800118c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	131b      	asrs	r3, r3, #12
}
 8001192:	4618      	mov	r0, r3
 8001194:	371c      	adds	r7, #28
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800119e:	b580      	push	{r7, lr}
 80011a0:	b08c      	sub	sp, #48	@ 0x30
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80011b2:	2b60      	cmp	r3, #96	@ 0x60
 80011b4:	d007      	beq.n	80011c6 <bmp280_read_fixed+0x28>
		if (humidity)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <bmp280_read_fixed+0x32>
 80011cc:	2308      	movs	r3, #8
 80011ce:	e000      	b.n	80011d2 <bmp280_read_fixed+0x34>
 80011d0:	2306      	movs	r3, #6
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80011d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f107 0218 	add.w	r2, r7, #24
 80011dc:	21f7      	movs	r1, #247	@ 0xf7
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff fa62 	bl	80006a8 <read_data>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <bmp280_read_fixed+0x50>
		return false;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e038      	b.n	8001260 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80011ee:	7e3b      	ldrb	r3, [r7, #24]
 80011f0:	031a      	lsls	r2, r3, #12
 80011f2:	7e7b      	ldrb	r3, [r7, #25]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4313      	orrs	r3, r2
 80011f8:	7eba      	ldrb	r2, [r7, #26]
 80011fa:	0912      	lsrs	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	4313      	orrs	r3, r2
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001202:	7efb      	ldrb	r3, [r7, #27]
 8001204:	031a      	lsls	r2, r3, #12
 8001206:	7f3b      	ldrb	r3, [r7, #28]
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4313      	orrs	r3, r2
 800120c:	7f7a      	ldrb	r2, [r7, #29]
 800120e:	0912      	lsrs	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	4313      	orrs	r3, r2
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	461a      	mov	r2, r3
 800121c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff fc67 	bl	8000af2 <compensate_temperature>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	461a      	mov	r2, r3
 800122e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f7ff fc97 	bl	8000b64 <compensate_pressure>
 8001236:	4602      	mov	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00d      	beq.n	800125e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001242:	7fbb      	ldrb	r3, [r7, #30]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	7ffa      	ldrb	r2, [r7, #31]
 8001248:	4313      	orrs	r3, r2
 800124a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	461a      	mov	r2, r3
 8001250:	6a39      	ldr	r1, [r7, #32]
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff ff44 	bl	80010e0 <compensate_humidity>
 8001258:	4602      	mov	r2, r0
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]
	}

	return true;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3730      	adds	r7, #48	@ 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <send_uart>:
/* USER CODE BEGIN 0 */
int _write(int file, char *data, int len) {
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 100);
    return len;
}
void send_uart(const char *message) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7fe ffad 	bl	80001d0 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <send_uart+0x28>)
 8001282:	f002 fb17 	bl	80038b4 <HAL_UART_Transmit>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000cc 	.word	0x200000cc

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b0a1      	sub	sp, #132	@ 0x84
 8001298:	af02      	add	r7, sp, #8
	 HAL_Init();
 800129a:	f000 fae7 	bl	800186c <HAL_Init>
	    SystemClock_Config();
 800129e:	f000 f89b 	bl	80013d8 <SystemClock_Config>
	    MX_GPIO_Init();
 80012a2:	f000 f95b 	bl	800155c <MX_GPIO_Init>
	    MX_USART2_UART_Init();
 80012a6:	f000 f92f 	bl	8001508 <MX_USART2_UART_Init>
	    MX_I2C1_Init();
 80012aa:	f000 f8ff 	bl	80014ac <MX_I2C1_Init>

	    bmp280_params_t params;
	    bmp280_init_default_params(&params);
 80012ae:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f9ac 	bl	8000610 <bmp280_init_default_params>

	    BMP280_HandleTypedef bmp280;
	    bmp280.addr = BMP280_I2C_ADDRESS_0;
 80012b8:	2376      	movs	r3, #118	@ 0x76
 80012ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	    if (!bmp280_init(&bmp280, &params)) {
 80012be:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80012c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fb1f 	bl	800090c <bmp280_init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f083 0301 	eor.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <main+0x50>
	        send_uart("BMP280 initialization failed\r\n");
 80012da:	4839      	ldr	r0, [pc, #228]	@ (80013c0 <main+0x12c>)
 80012dc:	f7ff ffc4 	bl	8001268 <send_uart>
	        while (1);
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <main+0x4c>
	    int32_t temperature;
	    uint32_t pressure, humidity;
	    char buffer[50];

	    while (1) {
	        bmp280_force_measurement(&bmp280);
 80012e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fbbc 	bl	8000a66 <bmp280_force_measurement>
	        HAL_Delay(100);
 80012ee:	2064      	movs	r0, #100	@ 0x64
 80012f0:	f000 fb2e 	bl	8001950 <HAL_Delay>

	        if (!bmp280_is_measuring(&bmp280)) {
 80012f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fbde 	bl	8000aba <bmp280_is_measuring>
 80012fe:	4603      	mov	r3, r0
 8001300:	f083 0301 	eor.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d054      	beq.n	80013b4 <main+0x120>
	            if (bmp280_read_fixed(&bmp280, &temperature, &pressure, &humidity)) {
 800130a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800130e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001312:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001316:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800131a:	f7ff ff40 	bl	800119e <bmp280_read_fixed>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d044      	beq.n	80013ae <main+0x11a>
	                snprintf(buffer, sizeof(buffer), "Temperature: %ld.%02ld C\r\n", temperature / 100, temperature % 100);
 8001324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001326:	4a27      	ldr	r2, [pc, #156]	@ (80013c4 <main+0x130>)
 8001328:	fb82 1203 	smull	r1, r2, r2, r3
 800132c:	1152      	asrs	r2, r2, #5
 800132e:	17db      	asrs	r3, r3, #31
 8001330:	1ad4      	subs	r4, r2, r3
 8001332:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <main+0x130>)
 8001336:	fb83 1302 	smull	r1, r3, r3, r2
 800133a:	1159      	asrs	r1, r3, #5
 800133c:	17d3      	asrs	r3, r2, #31
 800133e:	1acb      	subs	r3, r1, r3
 8001340:	2164      	movs	r1, #100	@ 0x64
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	4638      	mov	r0, r7
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4623      	mov	r3, r4
 800134e:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <main+0x134>)
 8001350:	2132      	movs	r1, #50	@ 0x32
 8001352:	f002 fe6b 	bl	800402c <sniprintf>
	                send_uart(buffer);
 8001356:	463b      	mov	r3, r7
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff85 	bl	8001268 <send_uart>
	                snprintf(buffer, sizeof(buffer), "Pressure: %ld.%02ld Pa\r\n", pressure / 256, (pressure % 256) * 100 / 256);
 800135e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001360:	0a1a      	lsrs	r2, r3, #8
 8001362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2164      	movs	r1, #100	@ 0x64
 8001368:	fb01 f303 	mul.w	r3, r1, r3
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	4638      	mov	r0, r7
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4613      	mov	r3, r2
 8001374:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <main+0x138>)
 8001376:	2132      	movs	r1, #50	@ 0x32
 8001378:	f002 fe58 	bl	800402c <sniprintf>
	                send_uart(buffer);
 800137c:	463b      	mov	r3, r7
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff72 	bl	8001268 <send_uart>
	                snprintf(buffer, sizeof(buffer), "Humidity: %ld.%02ld %%\r\n", humidity / 1024, (humidity % 1024) * 100 / 1024);
 8001384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001386:	0a9a      	lsrs	r2, r3, #10
 8001388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800138e:	2164      	movs	r1, #100	@ 0x64
 8001390:	fb01 f303 	mul.w	r3, r1, r3
 8001394:	0a9b      	lsrs	r3, r3, #10
 8001396:	4638      	mov	r0, r7
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4613      	mov	r3, r2
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <main+0x13c>)
 800139e:	2132      	movs	r1, #50	@ 0x32
 80013a0:	f002 fe44 	bl	800402c <sniprintf>
	                send_uart(buffer);
 80013a4:	463b      	mov	r3, r7
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff5e 	bl	8001268 <send_uart>
 80013ac:	e002      	b.n	80013b4 <main+0x120>
	            } else {
	                send_uart("Failed to read values\r\n");
 80013ae:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <main+0x140>)
 80013b0:	f7ff ff5a 	bl	8001268 <send_uart>
	            }
	        }
	        HAL_Delay(1000);
 80013b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b8:	f000 faca 	bl	8001950 <HAL_Delay>
	        bmp280_force_measurement(&bmp280);
 80013bc:	e792      	b.n	80012e4 <main+0x50>
 80013be:	bf00      	nop
 80013c0:	080049ac 	.word	0x080049ac
 80013c4:	51eb851f 	.word	0x51eb851f
 80013c8:	080049cc 	.word	0x080049cc
 80013cc:	080049e8 	.word	0x080049e8
 80013d0:	08004a04 	.word	0x08004a04
 80013d4:	08004a20 	.word	0x08004a20

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	@ 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	@ 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fe54 	bl	8004094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <SystemClock_Config+0xcc>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a27      	ldr	r2, [pc, #156]	@ (80014a4 <SystemClock_Config+0xcc>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
 800140c:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <SystemClock_Config+0xcc>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <SystemClock_Config+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <SystemClock_Config+0xd0>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <SystemClock_Config+0xd0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001448:	2308      	movs	r3, #8
 800144a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800144c:	2332      	movs	r3, #50	@ 0x32
 800144e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001450:	2304      	movs	r3, #4
 8001452:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001454:	2307      	movs	r3, #7
 8001456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fd41 	bl	8002ee4 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001468:	f000 f8a0 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001478:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001482:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f001 ffa2 	bl	80033d4 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001496:	f000 f889 	bl	80015ac <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3750      	adds	r7, #80	@ 0x50
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014b2:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <MX_I2C1_Init+0x54>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014b8:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <MX_I2C1_Init+0x58>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_I2C1_Init+0x50>)
 80014ea:	f000 fcd7 	bl	8001e9c <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 f85a 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000078 	.word	0x20000078
 8001500:	40005400 	.word	0x40005400
 8001504:	000186a0 	.word	0x000186a0

08001508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <MX_USART2_UART_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 8001514:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_USART2_UART_Init+0x4c>)
 8001540:	f002 f968 	bl	8003814 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800154a:	f000 f82f 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000cc 	.word	0x200000cc
 8001558:	40004400 	.word	0x40004400

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <MX_GPIO_Init+0x4c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a0f      	ldr	r2, [pc, #60]	@ (80015a8 <MX_GPIO_Init+0x4c>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <MX_GPIO_Init+0x4c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_GPIO_Init+0x4c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <MX_GPIO_Init+0x4c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_GPIO_Init+0x4c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <Error_Handler+0x8>

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <HAL_MspInit+0x4c>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_MspInit+0x4c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015f6:	2007      	movs	r0, #7
 80015f8:	f000 fa80 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_I2C_MspInit+0x84>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12b      	bne.n	8001682 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001646:	23c0      	movs	r3, #192	@ 0xc0
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001656:	2304      	movs	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	@ (8001694 <HAL_I2C_MspInit+0x8c>)
 8001662:	f000 fa7f 	bl	8001b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	@ 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40005400 	.word	0x40005400
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	@ (800171c <HAL_UART_MspInit+0x84>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d12b      	bne.n	8001712 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f2:	230c      	movs	r3, #12
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001702:	2307      	movs	r3, #7
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <HAL_UART_MspInit+0x8c>)
 800170e:	f000 fa29 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40004400 	.word	0x40004400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <NMI_Handler+0x4>

08001730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <MemManage_Handler+0x4>

08001740 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <UsageFault_Handler+0x4>

08001750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177e:	f000 f8c7 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f002 fc74 	bl	80040a4 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20020000 	.word	0x20020000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	20000114 	.word	0x20000114
 80017f0:	20000268 	.word	0x20000268

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001850 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	@ (8001858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	@ (800185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	@ (8001864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001846:	f002 fc33 	bl	80040b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fd23 	bl	8001294 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800185c:	08004a94 	.word	0x08004a94
  ldr r2, =_sbss
 8001860:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001864:	20000264 	.word	0x20000264

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f931 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fe8a 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f93b 	bl	8001b4a <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018ec:	f000 f911 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000
 8001908:	20000008 	.word	0x20000008
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	20000118 	.word	0x20000118

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000118 	.word	0x20000118

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000008 	.word	0x20000008

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	@ (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	@ (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff47 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff5c 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffb0 	bl	8001ab8 <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e16b      	b.n	8001e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 815a 	bne.w	8001e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80b4 	beq.w	8001e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b60      	ldr	r3, [pc, #384]	@ (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a5b      	ldr	r2, [pc, #364]	@ (8001e74 <HAL_GPIO_Init+0x310>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_GPIO_Init+0x314>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02b      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a51      	ldr	r2, [pc, #324]	@ (8001e7c <HAL_GPIO_Init+0x318>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x222>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a50      	ldr	r2, [pc, #320]	@ (8001e80 <HAL_GPIO_Init+0x31c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x21e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4f      	ldr	r2, [pc, #316]	@ (8001e84 <HAL_GPIO_Init+0x320>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e88 <HAL_GPIO_Init+0x324>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4d      	ldr	r2, [pc, #308]	@ (8001e8c <HAL_GPIO_Init+0x328>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e90 <HAL_GPIO_Init+0x32c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4b      	ldr	r2, [pc, #300]	@ (8001e94 <HAL_GPIO_Init+0x330>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00e      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d6e:	2308      	movs	r3, #8
 8001d70:	e00c      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d72:	2306      	movs	r3, #6
 8001d74:	e00a      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e008      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	f002 0203 	and.w	r2, r2, #3
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9c:	4935      	ldr	r1, [pc, #212]	@ (8001e74 <HAL_GPIO_Init+0x310>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001daa:	4b3b      	ldr	r3, [pc, #236]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dce:	4a32      	ldr	r2, [pc, #200]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd4:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df8:	4a27      	ldr	r2, [pc, #156]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e22:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e4c:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <HAL_GPIO_Init+0x334>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	f67f ae90 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40021400 	.word	0x40021400
 8001e90:	40021800 	.word	0x40021800
 8001e94:	40021c00 	.word	0x40021c00
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e12b      	b.n	8002106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fba0 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2224      	movs	r2, #36	@ 0x24
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f00:	f001 fc60 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a81      	ldr	r2, [pc, #516]	@ (8002110 <HAL_I2C_Init+0x274>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d807      	bhi.n	8001f20 <HAL_I2C_Init+0x84>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a80      	ldr	r2, [pc, #512]	@ (8002114 <HAL_I2C_Init+0x278>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	bf94      	ite	ls
 8001f18:	2301      	movls	r3, #1
 8001f1a:	2300      	movhi	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e006      	b.n	8001f2e <HAL_I2C_Init+0x92>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a7d      	ldr	r2, [pc, #500]	@ (8002118 <HAL_I2C_Init+0x27c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bf94      	ite	ls
 8001f28:	2301      	movls	r3, #1
 8001f2a:	2300      	movhi	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e7      	b.n	8002106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a78      	ldr	r2, [pc, #480]	@ (800211c <HAL_I2C_Init+0x280>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a6a      	ldr	r2, [pc, #424]	@ (8002110 <HAL_I2C_Init+0x274>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d802      	bhi.n	8001f70 <HAL_I2C_Init+0xd4>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	e009      	b.n	8001f84 <HAL_I2C_Init+0xe8>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a69      	ldr	r2, [pc, #420]	@ (8002120 <HAL_I2C_Init+0x284>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	3301      	adds	r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	495c      	ldr	r1, [pc, #368]	@ (8002110 <HAL_I2C_Init+0x274>)
 8001fa0:	428b      	cmp	r3, r1
 8001fa2:	d819      	bhi.n	8001fd8 <HAL_I2C_Init+0x13c>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e59      	subs	r1, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fb8:	400b      	ands	r3, r1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_I2C_Init+0x138>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e59      	subs	r1, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd2:	e051      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e04f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d111      	bne.n	8002004 <HAL_I2C_Init+0x168>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1e58      	subs	r0, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	440b      	add	r3, r1
 8001fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e012      	b.n	800202a <HAL_I2C_Init+0x18e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Init+0x196>
 800202e:	2301      	movs	r3, #1
 8002030:	e022      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_I2C_Init+0x1bc>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e58      	subs	r0, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6859      	ldr	r1, [r3, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	440b      	add	r3, r1
 8002048:	fbb0 f3f3 	udiv	r3, r0, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002056:	e00f      	b.n	8002078 <HAL_I2C_Init+0x1dc>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	0099      	lsls	r1, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	6809      	ldr	r1, [r1, #0]
 800207c:	4313      	orrs	r3, r2
 800207e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6911      	ldr	r1, [r2, #16]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	000186a0 	.word	0x000186a0
 8002114:	001e847f 	.word	0x001e847f
 8002118:	003d08ff 	.word	0x003d08ff
 800211c:	431bde83 	.word	0x431bde83
 8002120:	10624dd3 	.word	0x10624dd3

08002124 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4603      	mov	r3, r0
 8002134:	817b      	strh	r3, [r7, #10]
 8002136:	460b      	mov	r3, r1
 8002138:	813b      	strh	r3, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213e:	f7ff fbfb 	bl	8001938 <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b20      	cmp	r3, #32
 800214e:	f040 80d9 	bne.w	8002304 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2319      	movs	r3, #25
 8002158:	2201      	movs	r2, #1
 800215a:	496d      	ldr	r1, [pc, #436]	@ (8002310 <HAL_I2C_Mem_Write+0x1ec>)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fc8b 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	e0cc      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_I2C_Mem_Write+0x56>
 8002176:	2302      	movs	r3, #2
 8002178:	e0c5      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d007      	beq.n	80021a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2221      	movs	r2, #33	@ 0x21
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a3a      	ldr	r2, [r7, #32]
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a4d      	ldr	r2, [pc, #308]	@ (8002314 <HAL_I2C_Mem_Write+0x1f0>)
 80021e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e2:	88f8      	ldrh	r0, [r7, #6]
 80021e4:	893a      	ldrh	r2, [r7, #8]
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4603      	mov	r3, r0
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fac2 	bl	800277c <I2C_RequestMemoryWrite>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d052      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e081      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fd50 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b04      	cmp	r3, #4
 8002218:	d107      	bne.n	800222a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002228:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06b      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_I2C_Mem_Write+0x180>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d017      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1aa      	bne.n	8002202 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fd43 	bl	8002d3c <I2C_WaitOnBTFFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d107      	bne.n	80022d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e016      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	00100002 	.word	0x00100002
 8002314:	ffff0000 	.word	0xffff0000

08002318 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	@ 0x30
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4603      	mov	r3, r0
 8002328:	817b      	strh	r3, [r7, #10]
 800232a:	460b      	mov	r3, r1
 800232c:	813b      	strh	r3, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002332:	f7ff fb01 	bl	8001938 <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b20      	cmp	r3, #32
 8002342:	f040 8214 	bne.w	800276e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2319      	movs	r3, #25
 800234c:	2201      	movs	r2, #1
 800234e:	497b      	ldr	r1, [pc, #492]	@ (800253c <HAL_I2C_Mem_Read+0x224>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fb91 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	e207      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_I2C_Mem_Read+0x56>
 800236a:	2302      	movs	r3, #2
 800236c:	e200      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d007      	beq.n	8002394 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2222      	movs	r2, #34	@ 0x22
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	@ 0x40
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002540 <HAL_I2C_Mem_Read+0x228>)
 80023d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d6:	88f8      	ldrh	r0, [r7, #6]
 80023d8:	893a      	ldrh	r2, [r7, #8]
 80023da:	8979      	ldrh	r1, [r7, #10]
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4603      	mov	r3, r0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fa5e 	bl	80028a8 <I2C_RequestMemoryRead>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1bc      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e190      	b.n	8002748 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	2b01      	cmp	r3, #1
 800242c:	d11b      	bne.n	8002466 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e170      	b.n	8002748 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	2b02      	cmp	r3, #2
 800246c:	d11b      	bne.n	80024a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800247c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800248c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	e150      	b.n	8002748 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024bc:	e144      	b.n	8002748 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	f200 80f1 	bhi.w	80026aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d123      	bne.n	8002518 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fc79 	bl	8002dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e145      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002516:	e117      	b.n	8002748 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251c:	2b02      	cmp	r3, #2
 800251e:	d14e      	bne.n	80025be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002526:	2200      	movs	r2, #0
 8002528:	4906      	ldr	r1, [pc, #24]	@ (8002544 <HAL_I2C_Mem_Read+0x22c>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 faa4 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e11a      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
 800253a:	bf00      	nop
 800253c:	00100002 	.word	0x00100002
 8002540:	ffff0000 	.word	0xffff0000
 8002544:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025bc:	e0c4      	b.n	8002748 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c4:	2200      	movs	r2, #0
 80025c6:	496c      	ldr	r1, [pc, #432]	@ (8002778 <HAL_I2C_Mem_Read+0x460>)
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa55 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0cb      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	2200      	movs	r2, #0
 8002622:	4955      	ldr	r1, [pc, #340]	@ (8002778 <HAL_I2C_Mem_Read+0x460>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fa27 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e09d      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026a8:	e04e      	b.n	8002748 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fb8c 	bl	8002dcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e058      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d124      	bne.n	8002748 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	2b03      	cmp	r3, #3
 8002704:	d107      	bne.n	8002716 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002714:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f aeb6 	bne.w	80024be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800276e:	2302      	movs	r3, #2
  }
}
 8002770:	4618      	mov	r0, r3
 8002772:	3728      	adds	r7, #40	@ 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	00010004 	.word	0x00010004

0800277c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	4608      	mov	r0, r1
 8002786:	4611      	mov	r1, r2
 8002788:	461a      	mov	r2, r3
 800278a:	4603      	mov	r3, r0
 800278c:	817b      	strh	r3, [r7, #10]
 800278e:	460b      	mov	r3, r1
 8002790:	813b      	strh	r3, [r7, #8]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f960 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027cc:	d103      	bne.n	80027d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e05f      	b.n	800289a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	492d      	ldr	r1, [pc, #180]	@ (80028a4 <I2C_RequestMemoryWrite+0x128>)
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f9bb 	bl	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e04c      	b.n	800289a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fa46 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	2b04      	cmp	r3, #4
 800282c:	d107      	bne.n	800283e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e02b      	b.n	800289a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002848:	893b      	ldrh	r3, [r7, #8]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e021      	b.n	8002898 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002854:	893b      	ldrh	r3, [r7, #8]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	b29b      	uxth	r3, r3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002864:	6a39      	ldr	r1, [r7, #32]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fa20 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	2b04      	cmp	r3, #4
 8002878:	d107      	bne.n	800288a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002888:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e005      	b.n	800289a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800288e:	893b      	ldrh	r3, [r7, #8]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	00010002 	.word	0x00010002

080028a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f8c2 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002908:	d103      	bne.n	8002912 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0aa      	b.n	8002a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002924:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	4952      	ldr	r1, [pc, #328]	@ (8002a74 <I2C_RequestMemoryRead+0x1cc>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f91d 	bl	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e097      	b.n	8002a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f9a8 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	2b04      	cmp	r3, #4
 8002968:	d107      	bne.n	800297a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002978:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e076      	b.n	8002a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d105      	bne.n	8002990 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002984:	893b      	ldrh	r3, [r7, #8]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	611a      	str	r2, [r3, #16]
 800298e:	e021      	b.n	80029d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002990:	893b      	ldrh	r3, [r7, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29b      	uxth	r3, r3
 8002996:	b2da      	uxtb	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f982 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e050      	b.n	8002a6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ca:	893b      	ldrh	r3, [r7, #8]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d6:	6a39      	ldr	r1, [r7, #32]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f967 	bl	8002cac <I2C_WaitOnTXEFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d107      	bne.n	80029fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e035      	b.n	8002a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f82b 	bl	8002a78 <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a36:	d103      	bne.n	8002a40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e013      	b.n	8002a6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a44:	897b      	ldrh	r3, [r7, #10]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	6a3a      	ldr	r2, [r7, #32]
 8002a58:	4906      	ldr	r1, [pc, #24]	@ (8002a74 <I2C_RequestMemoryRead+0x1cc>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f886 	bl	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010002 	.word	0x00010002

08002a78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a88:	e048      	b.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a90:	d044      	beq.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe ff51 	bl	8001938 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d139      	bne.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	0c1b      	lsrs	r3, r3, #16
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d10d      	bne.n	8002ace <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4013      	ands	r3, r2
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	e00c      	b.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	43da      	mvns	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d116      	bne.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e023      	b.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d093      	beq.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b7a:	e071      	b.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8a:	d123      	bne.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e067      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bda:	d041      	beq.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bdc:	f7fe feac 	bl	8001938 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d302      	bcc.n	8002bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d136      	bne.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d10c      	bne.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e00b      	b.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d016      	beq.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e021      	b.n	8002ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10c      	bne.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e00b      	b.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f af6d 	bne.w	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb8:	e034      	b.n	8002d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f8e3 	bl	8002e86 <I2C_IsAcknowledgeFailed>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e034      	b.n	8002d34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cd0:	d028      	beq.n	8002d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe fe31 	bl	8001938 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11d      	bne.n	8002d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf2:	2b80      	cmp	r3, #128	@ 0x80
 8002cf4:	d016      	beq.n	8002d24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e007      	b.n	8002d34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2e:	2b80      	cmp	r3, #128	@ 0x80
 8002d30:	d1c3      	bne.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d48:	e034      	b.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f89b 	bl	8002e86 <I2C_IsAcknowledgeFailed>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e034      	b.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d60:	d028      	beq.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7fe fde9 	bl	8001938 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d11d      	bne.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d016      	beq.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e007      	b.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d1c3      	bne.n	8002d4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dd8:	e049      	b.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d119      	bne.n	8002e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0210 	mvn.w	r2, #16
 8002df0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e030      	b.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	f7fe fd8c 	bl	8001938 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d302      	bcc.n	8002e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11d      	bne.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3c:	2b40      	cmp	r3, #64	@ 0x40
 8002e3e:	d016      	beq.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d1ae      	bne.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9c:	d11b      	bne.n	8002ed6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ea6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f043 0204 	orr.w	r2, r3, #4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e267      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d075      	beq.n	8002fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d00c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0e:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d112      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05b      	beq.n	8002fec <HAL_RCC_OscConfig+0x108>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d157      	bne.n	8002fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e242      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_OscConfig+0x74>
 8002f4a:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xb0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x98>
 8002f62:	4b70      	ldr	r3, [pc, #448]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6f      	ldr	r2, [pc, #444]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6c      	ldr	r2, [pc, #432]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xb0>
 8002f7c:	4b69      	ldr	r3, [pc, #420]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a68      	ldr	r2, [pc, #416]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b66      	ldr	r3, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fccc 	bl	8001938 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fcc8 	bl	8001938 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e207      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xc0>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fcb8 	bl	8001938 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fe fcb4 	bl	8001938 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1f3      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b51      	ldr	r3, [pc, #324]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0xe8>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b44      	ldr	r3, [pc, #272]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b41      	ldr	r3, [pc, #260]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x152>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1c7      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <HAL_RCC_OscConfig+0x244>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fc6d 	bl	8001938 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fc69 	bl	8001938 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1a8      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4925      	ldr	r1, [pc, #148]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_RCC_OscConfig+0x244>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fc4c 	bl	8001938 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe fc48 	bl	8001938 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e187      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d036      	beq.n	800313c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <HAL_RCC_OscConfig+0x248>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fc2c 	bl	8001938 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe fc28 	bl	8001938 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e167      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_OscConfig+0x240>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x200>
 8003102:	e01b      	b.n	800313c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_OscConfig+0x248>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310a:	f7fe fc15 	bl	8001938 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	e00e      	b.n	8003130 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003112:	f7fe fc11 	bl	8001938 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d907      	bls.n	8003130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e150      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
 8003124:	40023800 	.word	0x40023800
 8003128:	42470000 	.word	0x42470000
 800312c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b88      	ldr	r3, [pc, #544]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ea      	bne.n	8003112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8097 	beq.w	8003278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b81      	ldr	r3, [pc, #516]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b7d      	ldr	r3, [pc, #500]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a7c      	ldr	r2, [pc, #496]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b7a      	ldr	r3, [pc, #488]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b77      	ldr	r3, [pc, #476]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b74      	ldr	r3, [pc, #464]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a73      	ldr	r2, [pc, #460]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe fbd1 	bl	8001938 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fe fbcd 	bl	8001938 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e10c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003358 <HAL_RCC_OscConfig+0x474>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x2ea>
 80031c0:	4b64      	ldr	r3, [pc, #400]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a63      	ldr	r2, [pc, #396]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x324>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x30c>
 80031d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a5e      	ldr	r2, [pc, #376]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0x324>
 80031f0:	4b58      	ldr	r3, [pc, #352]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	4b55      	ldr	r3, [pc, #340]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a54      	ldr	r2, [pc, #336]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003202:	f023 0304 	bic.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fb92 	bl	8001938 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe fb8e 	bl	8001938 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0cb      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	4b49      	ldr	r3, [pc, #292]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ee      	beq.n	8003218 <HAL_RCC_OscConfig+0x334>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323c:	f7fe fb7c 	bl	8001938 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe fb78 	bl	8001938 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0b5      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ee      	bne.n	8003244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b39      	ldr	r3, [pc, #228]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	4a38      	ldr	r2, [pc, #224]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a1 	beq.w	80033c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003282:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b08      	cmp	r3, #8
 800328c:	d05c      	beq.n	8003348 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d141      	bne.n	800331a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b31      	ldr	r3, [pc, #196]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fb4c 	bl	8001938 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe fb48 	bl	8001938 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e087      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	491b      	ldr	r1, [pc, #108]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fb21 	bl	8001938 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fb1d 	bl	8001938 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e05c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330c:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x416>
 8003318:	e054      	b.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_OscConfig+0x478>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fb0a 	bl	8001938 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe fb06 	bl	8001938 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e045      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_RCC_OscConfig+0x470>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x444>
 8003346:	e03d      	b.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e038      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000
 800335c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003360:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <HAL_RCC_OscConfig+0x4ec>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d028      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d121      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11a      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003398:	4293      	cmp	r3, r2
 800339a:	d111      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0cc      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b68      	ldr	r3, [pc, #416]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d90c      	bls.n	8003410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b65      	ldr	r3, [pc, #404]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b63      	ldr	r3, [pc, #396]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0b8      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003428:	4b59      	ldr	r3, [pc, #356]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a58      	ldr	r2, [pc, #352]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003440:	4b53      	ldr	r3, [pc, #332]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a52      	ldr	r2, [pc, #328]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800344a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b50      	ldr	r3, [pc, #320]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	494d      	ldr	r1, [pc, #308]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d044      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b47      	ldr	r3, [pc, #284]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e07f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d003      	beq.n	8003492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348e:	2b03      	cmp	r3, #3
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e067      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b37      	ldr	r3, [pc, #220]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4934      	ldr	r1, [pc, #208]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fe fa38 	bl	8001938 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fe fa34 	bl	8001938 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e04f      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b25      	ldr	r3, [pc, #148]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d20c      	bcs.n	800351c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b22      	ldr	r3, [pc, #136]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e032      	b.n	8003582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4916      	ldr	r1, [pc, #88]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003546:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	490e      	ldr	r1, [pc, #56]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800355a:	f000 f821 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800355e:	4602      	mov	r2, r0
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	490a      	ldr	r1, [pc, #40]	@ (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	5ccb      	ldrb	r3, [r1, r3]
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003576:	4b09      	ldr	r3, [pc, #36]	@ (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe f998 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023c00 	.word	0x40023c00
 8003590:	40023800 	.word	0x40023800
 8003594:	08004a38 	.word	0x08004a38
 8003598:	20000000 	.word	0x20000000
 800359c:	20000004 	.word	0x20000004

080035a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a4:	b094      	sub	sp, #80	@ 0x50
 80035a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ac:	2300      	movs	r3, #0
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b8:	4b79      	ldr	r3, [pc, #484]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d00d      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x40>
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	f200 80e1 	bhi.w	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x3a>
 80035d2:	e0db      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b73      	ldr	r3, [pc, #460]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80035d8:	e0db      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035da:	4b73      	ldr	r3, [pc, #460]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80035dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035de:	e0d8      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b6f      	ldr	r3, [pc, #444]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ea:	4b6d      	ldr	r3, [pc, #436]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b6a      	ldr	r3, [pc, #424]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	2200      	movs	r2, #0
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34
 800360e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	f04f 0000 	mov.w	r0, #0
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	0159      	lsls	r1, r3, #5
 8003620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003624:	0150      	lsls	r0, r2, #5
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4621      	mov	r1, r4
 800362c:	1a51      	subs	r1, r2, r1
 800362e:	6139      	str	r1, [r7, #16]
 8003630:	4629      	mov	r1, r5
 8003632:	eb63 0301 	sbc.w	r3, r3, r1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003644:	4659      	mov	r1, fp
 8003646:	018b      	lsls	r3, r1, #6
 8003648:	4651      	mov	r1, sl
 800364a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364e:	4651      	mov	r1, sl
 8003650:	018a      	lsls	r2, r1, #6
 8003652:	4651      	mov	r1, sl
 8003654:	ebb2 0801 	subs.w	r8, r2, r1
 8003658:	4659      	mov	r1, fp
 800365a:	eb63 0901 	sbc.w	r9, r3, r1
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003672:	4690      	mov	r8, r2
 8003674:	4699      	mov	r9, r3
 8003676:	4623      	mov	r3, r4
 8003678:	eb18 0303 	adds.w	r3, r8, r3
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	462b      	mov	r3, r5
 8003680:	eb49 0303 	adc.w	r3, r9, r3
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003692:	4629      	mov	r1, r5
 8003694:	024b      	lsls	r3, r1, #9
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369c:	4621      	mov	r1, r4
 800369e:	024a      	lsls	r2, r1, #9
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a6:	2200      	movs	r2, #0
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036b0:	f7fc fe36 	bl	8000320 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036bc:	e058      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b38      	ldr	r3, [pc, #224]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	4611      	mov	r1, r2
 80036ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	f04f 0000 	mov.w	r0, #0
 80036e0:	f04f 0100 	mov.w	r1, #0
 80036e4:	0159      	lsls	r1, r3, #5
 80036e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ea:	0150      	lsls	r0, r2, #5
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4641      	mov	r1, r8
 80036f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036f6:	4649      	mov	r1, r9
 80036f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800370c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003710:	ebb2 040a 	subs.w	r4, r2, sl
 8003714:	eb63 050b 	sbc.w	r5, r3, fp
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	00eb      	lsls	r3, r5, #3
 8003722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003726:	00e2      	lsls	r2, r4, #3
 8003728:	4614      	mov	r4, r2
 800372a:	461d      	mov	r5, r3
 800372c:	4643      	mov	r3, r8
 800372e:	18e3      	adds	r3, r4, r3
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	464b      	mov	r3, r9
 8003734:	eb45 0303 	adc.w	r3, r5, r3
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003746:	4629      	mov	r1, r5
 8003748:	028b      	lsls	r3, r1, #10
 800374a:	4621      	mov	r1, r4
 800374c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003750:	4621      	mov	r1, r4
 8003752:	028a      	lsls	r2, r1, #10
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375a:	2200      	movs	r2, #0
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	61fa      	str	r2, [r7, #28]
 8003760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003764:	f7fc fddc 	bl	8000320 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003794:	4618      	mov	r0, r3
 8003796:	3750      	adds	r7, #80	@ 0x50
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000000 	.word	0x20000000

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff0 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4903      	ldr	r1, [pc, #12]	@ (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08004a48 	.word	0x08004a48

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f0:	f7ff ffdc 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	@ (800380c <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	@ (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	08004a48 	.word	0x08004a48

08003814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e042      	b.n	80038ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd ff2c 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	@ 0x24
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f973 	bl	8003b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800386c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800387c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800388c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	@ 0x28
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d175      	bne.n	80039c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_UART_Transmit+0x2c>
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e06e      	b.n	80039c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2221      	movs	r2, #33	@ 0x21
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f2:	f7fe f821 	bl	8001938 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390c:	d108      	bne.n	8003920 <HAL_UART_Transmit+0x6c>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e003      	b.n	8003928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003928:	e02e      	b.n	8003988 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2200      	movs	r2, #0
 8003932:	2180      	movs	r1, #128	@ 0x80
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f848 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e03a      	b.n	80039c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3302      	adds	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e007      	b.n	800397a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3301      	adds	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1cb      	bne.n	800392a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2140      	movs	r1, #64	@ 0x40
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f814 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e006      	b.n	80039c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	e03b      	b.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e2:	d037      	beq.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fd ffa8 	bl	8001938 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	6a3a      	ldr	r2, [r7, #32]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <UART_WaitOnFlagUntilTimeout+0x30>
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e03a      	b.n	8003a74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d023      	beq.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b80      	cmp	r3, #128	@ 0x80
 8003a10:	d020      	beq.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b40      	cmp	r3, #64	@ 0x40
 8003a16:	d01d      	beq.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d116      	bne.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f81d 	bl	8003a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2208      	movs	r2, #8
 8003a46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e00f      	b.n	8003a74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d0b4      	beq.n	80039dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b095      	sub	sp, #84	@ 0x54
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aa4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e5      	bne.n	8003a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3314      	adds	r3, #20
 8003abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e5      	bne.n	8003ab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d119      	bne.n	8003b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 0310 	bic.w	r3, r3, #16
 8003b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b14:	61ba      	str	r2, [r7, #24]
 8003b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	613b      	str	r3, [r7, #16]
   return(result);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e5      	bne.n	8003af4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b36:	bf00      	nop
 8003b38:	3754      	adds	r7, #84	@ 0x54
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b48:	b0c0      	sub	sp, #256	@ 0x100
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b60:	68d9      	ldr	r1, [r3, #12]
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	ea40 0301 	orr.w	r3, r0, r1
 8003b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b9c:	f021 010c 	bic.w	r1, r1, #12
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003baa:	430b      	orrs	r3, r1
 8003bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbe:	6999      	ldr	r1, [r3, #24]
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	ea40 0301 	orr.w	r3, r0, r1
 8003bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e10 <UART_SetConfig+0x2cc>)
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d005      	beq.n	8003be4 <UART_SetConfig+0xa0>
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b8d      	ldr	r3, [pc, #564]	@ (8003e14 <UART_SetConfig+0x2d0>)
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d104      	bne.n	8003bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003be4:	f7ff fe02 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8003be8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bec:	e003      	b.n	8003bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bee:	f7ff fde9 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8003bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c00:	f040 810c 	bne.w	8003e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	1891      	adds	r1, r2, r2
 8003c1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c1e:	415b      	adcs	r3, r3
 8003c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c26:	4621      	mov	r1, r4
 8003c28:	eb12 0801 	adds.w	r8, r2, r1
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	eb43 0901 	adc.w	r9, r3, r1
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c46:	4690      	mov	r8, r2
 8003c48:	4699      	mov	r9, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	eb18 0303 	adds.w	r3, r8, r3
 8003c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c54:	462b      	mov	r3, r5
 8003c56:	eb49 0303 	adc.w	r3, r9, r3
 8003c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c72:	460b      	mov	r3, r1
 8003c74:	18db      	adds	r3, r3, r3
 8003c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c78:	4613      	mov	r3, r2
 8003c7a:	eb42 0303 	adc.w	r3, r2, r3
 8003c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c88:	f7fc fb4a 	bl	8000320 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4b61      	ldr	r3, [pc, #388]	@ (8003e18 <UART_SetConfig+0x2d4>)
 8003c92:	fba3 2302 	umull	r2, r3, r3, r2
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	011c      	lsls	r4, r3, #4
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	1891      	adds	r1, r2, r2
 8003cb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003cc2:	4649      	mov	r1, r9
 8003cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cdc:	4692      	mov	sl, r2
 8003cde:	469b      	mov	fp, r3
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cea:	464b      	mov	r3, r9
 8003cec:	eb4b 0303 	adc.w	r3, fp, r3
 8003cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	18db      	adds	r3, r3, r3
 8003d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d0e:	4613      	mov	r3, r2
 8003d10:	eb42 0303 	adc.w	r3, r2, r3
 8003d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d1e:	f7fc faff 	bl	8000320 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	4b3b      	ldr	r3, [pc, #236]	@ (8003e18 <UART_SetConfig+0x2d4>)
 8003d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2264      	movs	r2, #100	@ 0x64
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	1acb      	subs	r3, r1, r3
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d3e:	4b36      	ldr	r3, [pc, #216]	@ (8003e18 <UART_SetConfig+0x2d4>)
 8003d40:	fba3 2302 	umull	r2, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d4c:	441c      	add	r4, r3
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d70:	4641      	mov	r1, r8
 8003d72:	1851      	adds	r1, r2, r1
 8003d74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d76:	4649      	mov	r1, r9
 8003d78:	414b      	adcs	r3, r1
 8003d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d88:	4659      	mov	r1, fp
 8003d8a:	00cb      	lsls	r3, r1, #3
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d92:	4651      	mov	r1, sl
 8003d94:	00ca      	lsls	r2, r1, #3
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003da4:	464b      	mov	r3, r9
 8003da6:	460a      	mov	r2, r1
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	18db      	adds	r3, r3, r3
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dca:	4613      	mov	r3, r2
 8003dcc:	eb42 0303 	adc.w	r3, r2, r3
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dda:	f7fc faa1 	bl	8000320 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e18 <UART_SetConfig+0x2d4>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	@ 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3332      	adds	r3, #50	@ 0x32
 8003df6:	4a08      	ldr	r2, [pc, #32]	@ (8003e18 <UART_SetConfig+0x2d4>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 0207 	and.w	r2, r3, #7
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4422      	add	r2, r4
 8003e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e0c:	e106      	b.n	800401c <UART_SetConfig+0x4d8>
 8003e0e:	bf00      	nop
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e2e:	4642      	mov	r2, r8
 8003e30:	464b      	mov	r3, r9
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	6239      	str	r1, [r7, #32]
 8003e36:	415b      	adcs	r3, r3
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e3e:	4641      	mov	r1, r8
 8003e40:	1854      	adds	r4, r2, r1
 8003e42:	4649      	mov	r1, r9
 8003e44:	eb43 0501 	adc.w	r5, r3, r1
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	00eb      	lsls	r3, r5, #3
 8003e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e56:	00e2      	lsls	r2, r4, #3
 8003e58:	4614      	mov	r4, r2
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	4643      	mov	r3, r8
 8003e5e:	18e3      	adds	r3, r4, r3
 8003e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e64:	464b      	mov	r3, r9
 8003e66:	eb45 0303 	adc.w	r3, r5, r3
 8003e6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	008b      	lsls	r3, r1, #2
 8003e8e:	4621      	mov	r1, r4
 8003e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e94:	4621      	mov	r1, r4
 8003e96:	008a      	lsls	r2, r1, #2
 8003e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e9c:	f7fc fa40 	bl	8000320 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4b60      	ldr	r3, [pc, #384]	@ (8004028 <UART_SetConfig+0x4e4>)
 8003ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	011c      	lsls	r4, r3, #4
 8003eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003eb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	1891      	adds	r1, r2, r2
 8003ec6:	61b9      	str	r1, [r7, #24]
 8003ec8:	415b      	adcs	r3, r3
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	1851      	adds	r1, r2, r1
 8003ed4:	6139      	str	r1, [r7, #16]
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	414b      	adcs	r3, r1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee8:	4659      	mov	r1, fp
 8003eea:	00cb      	lsls	r3, r1, #3
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	00ca      	lsls	r2, r1, #3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4642      	mov	r2, r8
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f28:	4649      	mov	r1, r9
 8003f2a:	008b      	lsls	r3, r1, #2
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f32:	4641      	mov	r1, r8
 8003f34:	008a      	lsls	r2, r1, #2
 8003f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f3a:	f7fc f9f1 	bl	8000320 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	4b38      	ldr	r3, [pc, #224]	@ (8004028 <UART_SetConfig+0x4e4>)
 8003f46:	fba3 2301 	umull	r2, r3, r3, r1
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2264      	movs	r2, #100	@ 0x64
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	1acb      	subs	r3, r1, r3
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	3332      	adds	r3, #50	@ 0x32
 8003f58:	4a33      	ldr	r2, [pc, #204]	@ (8004028 <UART_SetConfig+0x4e4>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f64:	441c      	add	r4, r3
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	1891      	adds	r1, r2, r2
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	415b      	adcs	r3, r3
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f84:	4641      	mov	r1, r8
 8003f86:	1851      	adds	r1, r2, r1
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	414b      	adcs	r3, r1
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	00cb      	lsls	r3, r1, #3
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	00ca      	lsls	r2, r1, #3
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	460a      	mov	r2, r1
 8003fba:	eb42 0303 	adc.w	r3, r2, r3
 8003fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fca:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fd8:	4649      	mov	r1, r9
 8003fda:	008b      	lsls	r3, r1, #2
 8003fdc:	4641      	mov	r1, r8
 8003fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe2:	4641      	mov	r1, r8
 8003fe4:	008a      	lsls	r2, r1, #2
 8003fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fea:	f7fc f999 	bl	8000320 <__aeabi_uldivmod>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <UART_SetConfig+0x4e4>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	@ 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	3332      	adds	r3, #50	@ 0x32
 8004006:	4a08      	ldr	r2, [pc, #32]	@ (8004028 <UART_SetConfig+0x4e4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4422      	add	r2, r4
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	bf00      	nop
 800401e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004022:	46bd      	mov	sp, r7
 8004024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004028:	51eb851f 	.word	0x51eb851f

0800402c <sniprintf>:
 800402c:	b40c      	push	{r2, r3}
 800402e:	b530      	push	{r4, r5, lr}
 8004030:	4b17      	ldr	r3, [pc, #92]	@ (8004090 <sniprintf+0x64>)
 8004032:	1e0c      	subs	r4, r1, #0
 8004034:	681d      	ldr	r5, [r3, #0]
 8004036:	b09d      	sub	sp, #116	@ 0x74
 8004038:	da08      	bge.n	800404c <sniprintf+0x20>
 800403a:	238b      	movs	r3, #139	@ 0x8b
 800403c:	602b      	str	r3, [r5, #0]
 800403e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004042:	b01d      	add	sp, #116	@ 0x74
 8004044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004048:	b002      	add	sp, #8
 800404a:	4770      	bx	lr
 800404c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004050:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004054:	bf14      	ite	ne
 8004056:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800405a:	4623      	moveq	r3, r4
 800405c:	9304      	str	r3, [sp, #16]
 800405e:	9307      	str	r3, [sp, #28]
 8004060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004064:	9002      	str	r0, [sp, #8]
 8004066:	9006      	str	r0, [sp, #24]
 8004068:	f8ad 3016 	strh.w	r3, [sp, #22]
 800406c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800406e:	ab21      	add	r3, sp, #132	@ 0x84
 8004070:	a902      	add	r1, sp, #8
 8004072:	4628      	mov	r0, r5
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	f000 f995 	bl	80043a4 <_svfiprintf_r>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	bfbc      	itt	lt
 800407e:	238b      	movlt	r3, #139	@ 0x8b
 8004080:	602b      	strlt	r3, [r5, #0]
 8004082:	2c00      	cmp	r4, #0
 8004084:	d0dd      	beq.n	8004042 <sniprintf+0x16>
 8004086:	9b02      	ldr	r3, [sp, #8]
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e7d9      	b.n	8004042 <sniprintf+0x16>
 800408e:	bf00      	nop
 8004090:	2000000c 	.word	0x2000000c

08004094 <memset>:
 8004094:	4402      	add	r2, r0
 8004096:	4603      	mov	r3, r0
 8004098:	4293      	cmp	r3, r2
 800409a:	d100      	bne.n	800409e <memset+0xa>
 800409c:	4770      	bx	lr
 800409e:	f803 1b01 	strb.w	r1, [r3], #1
 80040a2:	e7f9      	b.n	8004098 <memset+0x4>

080040a4 <__errno>:
 80040a4:	4b01      	ldr	r3, [pc, #4]	@ (80040ac <__errno+0x8>)
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <__libc_init_array>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	4d0d      	ldr	r5, [pc, #52]	@ (80040e8 <__libc_init_array+0x38>)
 80040b4:	4c0d      	ldr	r4, [pc, #52]	@ (80040ec <__libc_init_array+0x3c>)
 80040b6:	1b64      	subs	r4, r4, r5
 80040b8:	10a4      	asrs	r4, r4, #2
 80040ba:	2600      	movs	r6, #0
 80040bc:	42a6      	cmp	r6, r4
 80040be:	d109      	bne.n	80040d4 <__libc_init_array+0x24>
 80040c0:	4d0b      	ldr	r5, [pc, #44]	@ (80040f0 <__libc_init_array+0x40>)
 80040c2:	4c0c      	ldr	r4, [pc, #48]	@ (80040f4 <__libc_init_array+0x44>)
 80040c4:	f000 fc66 	bl	8004994 <_init>
 80040c8:	1b64      	subs	r4, r4, r5
 80040ca:	10a4      	asrs	r4, r4, #2
 80040cc:	2600      	movs	r6, #0
 80040ce:	42a6      	cmp	r6, r4
 80040d0:	d105      	bne.n	80040de <__libc_init_array+0x2e>
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
 80040d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d8:	4798      	blx	r3
 80040da:	3601      	adds	r6, #1
 80040dc:	e7ee      	b.n	80040bc <__libc_init_array+0xc>
 80040de:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e2:	4798      	blx	r3
 80040e4:	3601      	adds	r6, #1
 80040e6:	e7f2      	b.n	80040ce <__libc_init_array+0x1e>
 80040e8:	08004a8c 	.word	0x08004a8c
 80040ec:	08004a8c 	.word	0x08004a8c
 80040f0:	08004a8c 	.word	0x08004a8c
 80040f4:	08004a90 	.word	0x08004a90

080040f8 <__retarget_lock_acquire_recursive>:
 80040f8:	4770      	bx	lr

080040fa <__retarget_lock_release_recursive>:
 80040fa:	4770      	bx	lr

080040fc <_free_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4605      	mov	r5, r0
 8004100:	2900      	cmp	r1, #0
 8004102:	d041      	beq.n	8004188 <_free_r+0x8c>
 8004104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004108:	1f0c      	subs	r4, r1, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfb8      	it	lt
 800410e:	18e4      	addlt	r4, r4, r3
 8004110:	f000 f8e0 	bl	80042d4 <__malloc_lock>
 8004114:	4a1d      	ldr	r2, [pc, #116]	@ (800418c <_free_r+0x90>)
 8004116:	6813      	ldr	r3, [r2, #0]
 8004118:	b933      	cbnz	r3, 8004128 <_free_r+0x2c>
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	6014      	str	r4, [r2, #0]
 800411e:	4628      	mov	r0, r5
 8004120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004124:	f000 b8dc 	b.w	80042e0 <__malloc_unlock>
 8004128:	42a3      	cmp	r3, r4
 800412a:	d908      	bls.n	800413e <_free_r+0x42>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	1821      	adds	r1, r4, r0
 8004130:	428b      	cmp	r3, r1
 8004132:	bf01      	itttt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	1809      	addeq	r1, r1, r0
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	e7ed      	b.n	800411a <_free_r+0x1e>
 800413e:	461a      	mov	r2, r3
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	b10b      	cbz	r3, 8004148 <_free_r+0x4c>
 8004144:	42a3      	cmp	r3, r4
 8004146:	d9fa      	bls.n	800413e <_free_r+0x42>
 8004148:	6811      	ldr	r1, [r2, #0]
 800414a:	1850      	adds	r0, r2, r1
 800414c:	42a0      	cmp	r0, r4
 800414e:	d10b      	bne.n	8004168 <_free_r+0x6c>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	4401      	add	r1, r0
 8004154:	1850      	adds	r0, r2, r1
 8004156:	4283      	cmp	r3, r0
 8004158:	6011      	str	r1, [r2, #0]
 800415a:	d1e0      	bne.n	800411e <_free_r+0x22>
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	6053      	str	r3, [r2, #4]
 8004162:	4408      	add	r0, r1
 8004164:	6010      	str	r0, [r2, #0]
 8004166:	e7da      	b.n	800411e <_free_r+0x22>
 8004168:	d902      	bls.n	8004170 <_free_r+0x74>
 800416a:	230c      	movs	r3, #12
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	e7d6      	b.n	800411e <_free_r+0x22>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	1821      	adds	r1, r4, r0
 8004174:	428b      	cmp	r3, r1
 8004176:	bf04      	itt	eq
 8004178:	6819      	ldreq	r1, [r3, #0]
 800417a:	685b      	ldreq	r3, [r3, #4]
 800417c:	6063      	str	r3, [r4, #4]
 800417e:	bf04      	itt	eq
 8004180:	1809      	addeq	r1, r1, r0
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	6054      	str	r4, [r2, #4]
 8004186:	e7ca      	b.n	800411e <_free_r+0x22>
 8004188:	bd38      	pop	{r3, r4, r5, pc}
 800418a:	bf00      	nop
 800418c:	20000260 	.word	0x20000260

08004190 <sbrk_aligned>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	4e0f      	ldr	r6, [pc, #60]	@ (80041d0 <sbrk_aligned+0x40>)
 8004194:	460c      	mov	r4, r1
 8004196:	6831      	ldr	r1, [r6, #0]
 8004198:	4605      	mov	r5, r0
 800419a:	b911      	cbnz	r1, 80041a2 <sbrk_aligned+0x12>
 800419c:	f000 fba6 	bl	80048ec <_sbrk_r>
 80041a0:	6030      	str	r0, [r6, #0]
 80041a2:	4621      	mov	r1, r4
 80041a4:	4628      	mov	r0, r5
 80041a6:	f000 fba1 	bl	80048ec <_sbrk_r>
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	d103      	bne.n	80041b6 <sbrk_aligned+0x26>
 80041ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80041b2:	4620      	mov	r0, r4
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	1cc4      	adds	r4, r0, #3
 80041b8:	f024 0403 	bic.w	r4, r4, #3
 80041bc:	42a0      	cmp	r0, r4
 80041be:	d0f8      	beq.n	80041b2 <sbrk_aligned+0x22>
 80041c0:	1a21      	subs	r1, r4, r0
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 fb92 	bl	80048ec <_sbrk_r>
 80041c8:	3001      	adds	r0, #1
 80041ca:	d1f2      	bne.n	80041b2 <sbrk_aligned+0x22>
 80041cc:	e7ef      	b.n	80041ae <sbrk_aligned+0x1e>
 80041ce:	bf00      	nop
 80041d0:	2000025c 	.word	0x2000025c

080041d4 <_malloc_r>:
 80041d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d8:	1ccd      	adds	r5, r1, #3
 80041da:	f025 0503 	bic.w	r5, r5, #3
 80041de:	3508      	adds	r5, #8
 80041e0:	2d0c      	cmp	r5, #12
 80041e2:	bf38      	it	cc
 80041e4:	250c      	movcc	r5, #12
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	4606      	mov	r6, r0
 80041ea:	db01      	blt.n	80041f0 <_malloc_r+0x1c>
 80041ec:	42a9      	cmp	r1, r5
 80041ee:	d904      	bls.n	80041fa <_malloc_r+0x26>
 80041f0:	230c      	movs	r3, #12
 80041f2:	6033      	str	r3, [r6, #0]
 80041f4:	2000      	movs	r0, #0
 80041f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042d0 <_malloc_r+0xfc>
 80041fe:	f000 f869 	bl	80042d4 <__malloc_lock>
 8004202:	f8d8 3000 	ldr.w	r3, [r8]
 8004206:	461c      	mov	r4, r3
 8004208:	bb44      	cbnz	r4, 800425c <_malloc_r+0x88>
 800420a:	4629      	mov	r1, r5
 800420c:	4630      	mov	r0, r6
 800420e:	f7ff ffbf 	bl	8004190 <sbrk_aligned>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	4604      	mov	r4, r0
 8004216:	d158      	bne.n	80042ca <_malloc_r+0xf6>
 8004218:	f8d8 4000 	ldr.w	r4, [r8]
 800421c:	4627      	mov	r7, r4
 800421e:	2f00      	cmp	r7, #0
 8004220:	d143      	bne.n	80042aa <_malloc_r+0xd6>
 8004222:	2c00      	cmp	r4, #0
 8004224:	d04b      	beq.n	80042be <_malloc_r+0xea>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	4639      	mov	r1, r7
 800422a:	4630      	mov	r0, r6
 800422c:	eb04 0903 	add.w	r9, r4, r3
 8004230:	f000 fb5c 	bl	80048ec <_sbrk_r>
 8004234:	4581      	cmp	r9, r0
 8004236:	d142      	bne.n	80042be <_malloc_r+0xea>
 8004238:	6821      	ldr	r1, [r4, #0]
 800423a:	1a6d      	subs	r5, r5, r1
 800423c:	4629      	mov	r1, r5
 800423e:	4630      	mov	r0, r6
 8004240:	f7ff ffa6 	bl	8004190 <sbrk_aligned>
 8004244:	3001      	adds	r0, #1
 8004246:	d03a      	beq.n	80042be <_malloc_r+0xea>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	442b      	add	r3, r5
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	f8d8 3000 	ldr.w	r3, [r8]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	bb62      	cbnz	r2, 80042b0 <_malloc_r+0xdc>
 8004256:	f8c8 7000 	str.w	r7, [r8]
 800425a:	e00f      	b.n	800427c <_malloc_r+0xa8>
 800425c:	6822      	ldr	r2, [r4, #0]
 800425e:	1b52      	subs	r2, r2, r5
 8004260:	d420      	bmi.n	80042a4 <_malloc_r+0xd0>
 8004262:	2a0b      	cmp	r2, #11
 8004264:	d917      	bls.n	8004296 <_malloc_r+0xc2>
 8004266:	1961      	adds	r1, r4, r5
 8004268:	42a3      	cmp	r3, r4
 800426a:	6025      	str	r5, [r4, #0]
 800426c:	bf18      	it	ne
 800426e:	6059      	strne	r1, [r3, #4]
 8004270:	6863      	ldr	r3, [r4, #4]
 8004272:	bf08      	it	eq
 8004274:	f8c8 1000 	streq.w	r1, [r8]
 8004278:	5162      	str	r2, [r4, r5]
 800427a:	604b      	str	r3, [r1, #4]
 800427c:	4630      	mov	r0, r6
 800427e:	f000 f82f 	bl	80042e0 <__malloc_unlock>
 8004282:	f104 000b 	add.w	r0, r4, #11
 8004286:	1d23      	adds	r3, r4, #4
 8004288:	f020 0007 	bic.w	r0, r0, #7
 800428c:	1ac2      	subs	r2, r0, r3
 800428e:	bf1c      	itt	ne
 8004290:	1a1b      	subne	r3, r3, r0
 8004292:	50a3      	strne	r3, [r4, r2]
 8004294:	e7af      	b.n	80041f6 <_malloc_r+0x22>
 8004296:	6862      	ldr	r2, [r4, #4]
 8004298:	42a3      	cmp	r3, r4
 800429a:	bf0c      	ite	eq
 800429c:	f8c8 2000 	streq.w	r2, [r8]
 80042a0:	605a      	strne	r2, [r3, #4]
 80042a2:	e7eb      	b.n	800427c <_malloc_r+0xa8>
 80042a4:	4623      	mov	r3, r4
 80042a6:	6864      	ldr	r4, [r4, #4]
 80042a8:	e7ae      	b.n	8004208 <_malloc_r+0x34>
 80042aa:	463c      	mov	r4, r7
 80042ac:	687f      	ldr	r7, [r7, #4]
 80042ae:	e7b6      	b.n	800421e <_malloc_r+0x4a>
 80042b0:	461a      	mov	r2, r3
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	42a3      	cmp	r3, r4
 80042b6:	d1fb      	bne.n	80042b0 <_malloc_r+0xdc>
 80042b8:	2300      	movs	r3, #0
 80042ba:	6053      	str	r3, [r2, #4]
 80042bc:	e7de      	b.n	800427c <_malloc_r+0xa8>
 80042be:	230c      	movs	r3, #12
 80042c0:	6033      	str	r3, [r6, #0]
 80042c2:	4630      	mov	r0, r6
 80042c4:	f000 f80c 	bl	80042e0 <__malloc_unlock>
 80042c8:	e794      	b.n	80041f4 <_malloc_r+0x20>
 80042ca:	6005      	str	r5, [r0, #0]
 80042cc:	e7d6      	b.n	800427c <_malloc_r+0xa8>
 80042ce:	bf00      	nop
 80042d0:	20000260 	.word	0x20000260

080042d4 <__malloc_lock>:
 80042d4:	4801      	ldr	r0, [pc, #4]	@ (80042dc <__malloc_lock+0x8>)
 80042d6:	f7ff bf0f 	b.w	80040f8 <__retarget_lock_acquire_recursive>
 80042da:	bf00      	nop
 80042dc:	20000258 	.word	0x20000258

080042e0 <__malloc_unlock>:
 80042e0:	4801      	ldr	r0, [pc, #4]	@ (80042e8 <__malloc_unlock+0x8>)
 80042e2:	f7ff bf0a 	b.w	80040fa <__retarget_lock_release_recursive>
 80042e6:	bf00      	nop
 80042e8:	20000258 	.word	0x20000258

080042ec <__ssputs_r>:
 80042ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	688e      	ldr	r6, [r1, #8]
 80042f2:	461f      	mov	r7, r3
 80042f4:	42be      	cmp	r6, r7
 80042f6:	680b      	ldr	r3, [r1, #0]
 80042f8:	4682      	mov	sl, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	4690      	mov	r8, r2
 80042fe:	d82d      	bhi.n	800435c <__ssputs_r+0x70>
 8004300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004304:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004308:	d026      	beq.n	8004358 <__ssputs_r+0x6c>
 800430a:	6965      	ldr	r5, [r4, #20]
 800430c:	6909      	ldr	r1, [r1, #16]
 800430e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004312:	eba3 0901 	sub.w	r9, r3, r1
 8004316:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800431a:	1c7b      	adds	r3, r7, #1
 800431c:	444b      	add	r3, r9
 800431e:	106d      	asrs	r5, r5, #1
 8004320:	429d      	cmp	r5, r3
 8004322:	bf38      	it	cc
 8004324:	461d      	movcc	r5, r3
 8004326:	0553      	lsls	r3, r2, #21
 8004328:	d527      	bpl.n	800437a <__ssputs_r+0x8e>
 800432a:	4629      	mov	r1, r5
 800432c:	f7ff ff52 	bl	80041d4 <_malloc_r>
 8004330:	4606      	mov	r6, r0
 8004332:	b360      	cbz	r0, 800438e <__ssputs_r+0xa2>
 8004334:	6921      	ldr	r1, [r4, #16]
 8004336:	464a      	mov	r2, r9
 8004338:	f000 fae8 	bl	800490c <memcpy>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	6126      	str	r6, [r4, #16]
 800434a:	6165      	str	r5, [r4, #20]
 800434c:	444e      	add	r6, r9
 800434e:	eba5 0509 	sub.w	r5, r5, r9
 8004352:	6026      	str	r6, [r4, #0]
 8004354:	60a5      	str	r5, [r4, #8]
 8004356:	463e      	mov	r6, r7
 8004358:	42be      	cmp	r6, r7
 800435a:	d900      	bls.n	800435e <__ssputs_r+0x72>
 800435c:	463e      	mov	r6, r7
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	4632      	mov	r2, r6
 8004362:	4641      	mov	r1, r8
 8004364:	f000 faa8 	bl	80048b8 <memmove>
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	1b9b      	subs	r3, r3, r6
 800436c:	60a3      	str	r3, [r4, #8]
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	4433      	add	r3, r6
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	2000      	movs	r0, #0
 8004376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437a:	462a      	mov	r2, r5
 800437c:	f000 fad4 	bl	8004928 <_realloc_r>
 8004380:	4606      	mov	r6, r0
 8004382:	2800      	cmp	r0, #0
 8004384:	d1e0      	bne.n	8004348 <__ssputs_r+0x5c>
 8004386:	6921      	ldr	r1, [r4, #16]
 8004388:	4650      	mov	r0, sl
 800438a:	f7ff feb7 	bl	80040fc <_free_r>
 800438e:	230c      	movs	r3, #12
 8004390:	f8ca 3000 	str.w	r3, [sl]
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800439a:	81a3      	strh	r3, [r4, #12]
 800439c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043a0:	e7e9      	b.n	8004376 <__ssputs_r+0x8a>
	...

080043a4 <_svfiprintf_r>:
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	4698      	mov	r8, r3
 80043aa:	898b      	ldrh	r3, [r1, #12]
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	b09d      	sub	sp, #116	@ 0x74
 80043b0:	4607      	mov	r7, r0
 80043b2:	460d      	mov	r5, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	d510      	bpl.n	80043da <_svfiprintf_r+0x36>
 80043b8:	690b      	ldr	r3, [r1, #16]
 80043ba:	b973      	cbnz	r3, 80043da <_svfiprintf_r+0x36>
 80043bc:	2140      	movs	r1, #64	@ 0x40
 80043be:	f7ff ff09 	bl	80041d4 <_malloc_r>
 80043c2:	6028      	str	r0, [r5, #0]
 80043c4:	6128      	str	r0, [r5, #16]
 80043c6:	b930      	cbnz	r0, 80043d6 <_svfiprintf_r+0x32>
 80043c8:	230c      	movs	r3, #12
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043d0:	b01d      	add	sp, #116	@ 0x74
 80043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d6:	2340      	movs	r3, #64	@ 0x40
 80043d8:	616b      	str	r3, [r5, #20]
 80043da:	2300      	movs	r3, #0
 80043dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80043de:	2320      	movs	r3, #32
 80043e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80043e8:	2330      	movs	r3, #48	@ 0x30
 80043ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004588 <_svfiprintf_r+0x1e4>
 80043ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043f2:	f04f 0901 	mov.w	r9, #1
 80043f6:	4623      	mov	r3, r4
 80043f8:	469a      	mov	sl, r3
 80043fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043fe:	b10a      	cbz	r2, 8004404 <_svfiprintf_r+0x60>
 8004400:	2a25      	cmp	r2, #37	@ 0x25
 8004402:	d1f9      	bne.n	80043f8 <_svfiprintf_r+0x54>
 8004404:	ebba 0b04 	subs.w	fp, sl, r4
 8004408:	d00b      	beq.n	8004422 <_svfiprintf_r+0x7e>
 800440a:	465b      	mov	r3, fp
 800440c:	4622      	mov	r2, r4
 800440e:	4629      	mov	r1, r5
 8004410:	4638      	mov	r0, r7
 8004412:	f7ff ff6b 	bl	80042ec <__ssputs_r>
 8004416:	3001      	adds	r0, #1
 8004418:	f000 80a7 	beq.w	800456a <_svfiprintf_r+0x1c6>
 800441c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800441e:	445a      	add	r2, fp
 8004420:	9209      	str	r2, [sp, #36]	@ 0x24
 8004422:	f89a 3000 	ldrb.w	r3, [sl]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 809f 	beq.w	800456a <_svfiprintf_r+0x1c6>
 800442c:	2300      	movs	r3, #0
 800442e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004436:	f10a 0a01 	add.w	sl, sl, #1
 800443a:	9304      	str	r3, [sp, #16]
 800443c:	9307      	str	r3, [sp, #28]
 800443e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004442:	931a      	str	r3, [sp, #104]	@ 0x68
 8004444:	4654      	mov	r4, sl
 8004446:	2205      	movs	r2, #5
 8004448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800444c:	484e      	ldr	r0, [pc, #312]	@ (8004588 <_svfiprintf_r+0x1e4>)
 800444e:	f7fb fec7 	bl	80001e0 <memchr>
 8004452:	9a04      	ldr	r2, [sp, #16]
 8004454:	b9d8      	cbnz	r0, 800448e <_svfiprintf_r+0xea>
 8004456:	06d0      	lsls	r0, r2, #27
 8004458:	bf44      	itt	mi
 800445a:	2320      	movmi	r3, #32
 800445c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004460:	0711      	lsls	r1, r2, #28
 8004462:	bf44      	itt	mi
 8004464:	232b      	movmi	r3, #43	@ 0x2b
 8004466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800446a:	f89a 3000 	ldrb.w	r3, [sl]
 800446e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004470:	d015      	beq.n	800449e <_svfiprintf_r+0xfa>
 8004472:	9a07      	ldr	r2, [sp, #28]
 8004474:	4654      	mov	r4, sl
 8004476:	2000      	movs	r0, #0
 8004478:	f04f 0c0a 	mov.w	ip, #10
 800447c:	4621      	mov	r1, r4
 800447e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004482:	3b30      	subs	r3, #48	@ 0x30
 8004484:	2b09      	cmp	r3, #9
 8004486:	d94b      	bls.n	8004520 <_svfiprintf_r+0x17c>
 8004488:	b1b0      	cbz	r0, 80044b8 <_svfiprintf_r+0x114>
 800448a:	9207      	str	r2, [sp, #28]
 800448c:	e014      	b.n	80044b8 <_svfiprintf_r+0x114>
 800448e:	eba0 0308 	sub.w	r3, r0, r8
 8004492:	fa09 f303 	lsl.w	r3, r9, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	9304      	str	r3, [sp, #16]
 800449a:	46a2      	mov	sl, r4
 800449c:	e7d2      	b.n	8004444 <_svfiprintf_r+0xa0>
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	1d19      	adds	r1, r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	9103      	str	r1, [sp, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfbb      	ittet	lt
 80044aa:	425b      	neglt	r3, r3
 80044ac:	f042 0202 	orrlt.w	r2, r2, #2
 80044b0:	9307      	strge	r3, [sp, #28]
 80044b2:	9307      	strlt	r3, [sp, #28]
 80044b4:	bfb8      	it	lt
 80044b6:	9204      	strlt	r2, [sp, #16]
 80044b8:	7823      	ldrb	r3, [r4, #0]
 80044ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80044bc:	d10a      	bne.n	80044d4 <_svfiprintf_r+0x130>
 80044be:	7863      	ldrb	r3, [r4, #1]
 80044c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80044c2:	d132      	bne.n	800452a <_svfiprintf_r+0x186>
 80044c4:	9b03      	ldr	r3, [sp, #12]
 80044c6:	1d1a      	adds	r2, r3, #4
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	9203      	str	r2, [sp, #12]
 80044cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044d0:	3402      	adds	r4, #2
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004598 <_svfiprintf_r+0x1f4>
 80044d8:	7821      	ldrb	r1, [r4, #0]
 80044da:	2203      	movs	r2, #3
 80044dc:	4650      	mov	r0, sl
 80044de:	f7fb fe7f 	bl	80001e0 <memchr>
 80044e2:	b138      	cbz	r0, 80044f4 <_svfiprintf_r+0x150>
 80044e4:	9b04      	ldr	r3, [sp, #16]
 80044e6:	eba0 000a 	sub.w	r0, r0, sl
 80044ea:	2240      	movs	r2, #64	@ 0x40
 80044ec:	4082      	lsls	r2, r0
 80044ee:	4313      	orrs	r3, r2
 80044f0:	3401      	adds	r4, #1
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f8:	4824      	ldr	r0, [pc, #144]	@ (800458c <_svfiprintf_r+0x1e8>)
 80044fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044fe:	2206      	movs	r2, #6
 8004500:	f7fb fe6e 	bl	80001e0 <memchr>
 8004504:	2800      	cmp	r0, #0
 8004506:	d036      	beq.n	8004576 <_svfiprintf_r+0x1d2>
 8004508:	4b21      	ldr	r3, [pc, #132]	@ (8004590 <_svfiprintf_r+0x1ec>)
 800450a:	bb1b      	cbnz	r3, 8004554 <_svfiprintf_r+0x1b0>
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	3307      	adds	r3, #7
 8004510:	f023 0307 	bic.w	r3, r3, #7
 8004514:	3308      	adds	r3, #8
 8004516:	9303      	str	r3, [sp, #12]
 8004518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800451a:	4433      	add	r3, r6
 800451c:	9309      	str	r3, [sp, #36]	@ 0x24
 800451e:	e76a      	b.n	80043f6 <_svfiprintf_r+0x52>
 8004520:	fb0c 3202 	mla	r2, ip, r2, r3
 8004524:	460c      	mov	r4, r1
 8004526:	2001      	movs	r0, #1
 8004528:	e7a8      	b.n	800447c <_svfiprintf_r+0xd8>
 800452a:	2300      	movs	r3, #0
 800452c:	3401      	adds	r4, #1
 800452e:	9305      	str	r3, [sp, #20]
 8004530:	4619      	mov	r1, r3
 8004532:	f04f 0c0a 	mov.w	ip, #10
 8004536:	4620      	mov	r0, r4
 8004538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800453c:	3a30      	subs	r2, #48	@ 0x30
 800453e:	2a09      	cmp	r2, #9
 8004540:	d903      	bls.n	800454a <_svfiprintf_r+0x1a6>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0c6      	beq.n	80044d4 <_svfiprintf_r+0x130>
 8004546:	9105      	str	r1, [sp, #20]
 8004548:	e7c4      	b.n	80044d4 <_svfiprintf_r+0x130>
 800454a:	fb0c 2101 	mla	r1, ip, r1, r2
 800454e:	4604      	mov	r4, r0
 8004550:	2301      	movs	r3, #1
 8004552:	e7f0      	b.n	8004536 <_svfiprintf_r+0x192>
 8004554:	ab03      	add	r3, sp, #12
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	462a      	mov	r2, r5
 800455a:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <_svfiprintf_r+0x1f0>)
 800455c:	a904      	add	r1, sp, #16
 800455e:	4638      	mov	r0, r7
 8004560:	f3af 8000 	nop.w
 8004564:	1c42      	adds	r2, r0, #1
 8004566:	4606      	mov	r6, r0
 8004568:	d1d6      	bne.n	8004518 <_svfiprintf_r+0x174>
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	065b      	lsls	r3, r3, #25
 800456e:	f53f af2d 	bmi.w	80043cc <_svfiprintf_r+0x28>
 8004572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004574:	e72c      	b.n	80043d0 <_svfiprintf_r+0x2c>
 8004576:	ab03      	add	r3, sp, #12
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	462a      	mov	r2, r5
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <_svfiprintf_r+0x1f0>)
 800457e:	a904      	add	r1, sp, #16
 8004580:	4638      	mov	r0, r7
 8004582:	f000 f879 	bl	8004678 <_printf_i>
 8004586:	e7ed      	b.n	8004564 <_svfiprintf_r+0x1c0>
 8004588:	08004a50 	.word	0x08004a50
 800458c:	08004a5a 	.word	0x08004a5a
 8004590:	00000000 	.word	0x00000000
 8004594:	080042ed 	.word	0x080042ed
 8004598:	08004a56 	.word	0x08004a56

0800459c <_printf_common>:
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	4616      	mov	r6, r2
 80045a2:	4698      	mov	r8, r3
 80045a4:	688a      	ldr	r2, [r1, #8]
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bfb8      	it	lt
 80045b0:	4613      	movlt	r3, r2
 80045b2:	6033      	str	r3, [r6, #0]
 80045b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045b8:	4607      	mov	r7, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	b10a      	cbz	r2, 80045c2 <_printf_common+0x26>
 80045be:	3301      	adds	r3, #1
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	6833      	ldrmi	r3, [r6, #0]
 80045ca:	3302      	addmi	r3, #2
 80045cc:	6033      	strmi	r3, [r6, #0]
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	f015 0506 	ands.w	r5, r5, #6
 80045d4:	d106      	bne.n	80045e4 <_printf_common+0x48>
 80045d6:	f104 0a19 	add.w	sl, r4, #25
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	6832      	ldr	r2, [r6, #0]
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	dc26      	bgt.n	8004632 <_printf_common+0x96>
 80045e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	3b00      	subs	r3, #0
 80045ec:	bf18      	it	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	0692      	lsls	r2, r2, #26
 80045f2:	d42b      	bmi.n	800464c <_printf_common+0xb0>
 80045f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045f8:	4641      	mov	r1, r8
 80045fa:	4638      	mov	r0, r7
 80045fc:	47c8      	blx	r9
 80045fe:	3001      	adds	r0, #1
 8004600:	d01e      	beq.n	8004640 <_printf_common+0xa4>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	6922      	ldr	r2, [r4, #16]
 8004606:	f003 0306 	and.w	r3, r3, #6
 800460a:	2b04      	cmp	r3, #4
 800460c:	bf02      	ittt	eq
 800460e:	68e5      	ldreq	r5, [r4, #12]
 8004610:	6833      	ldreq	r3, [r6, #0]
 8004612:	1aed      	subeq	r5, r5, r3
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	bf0c      	ite	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	2500      	movne	r5, #0
 800461e:	4293      	cmp	r3, r2
 8004620:	bfc4      	itt	gt
 8004622:	1a9b      	subgt	r3, r3, r2
 8004624:	18ed      	addgt	r5, r5, r3
 8004626:	2600      	movs	r6, #0
 8004628:	341a      	adds	r4, #26
 800462a:	42b5      	cmp	r5, r6
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xc8>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xa8>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4641      	mov	r1, r8
 8004638:	4638      	mov	r0, r7
 800463a:	47c8      	blx	r9
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xac>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c6      	b.n	80045da <_printf_common+0x3e>
 800464c:	18e1      	adds	r1, r4, r3
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	2030      	movs	r0, #48	@ 0x30
 8004652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004656:	4422      	add	r2, r4
 8004658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800465c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004660:	3302      	adds	r3, #2
 8004662:	e7c7      	b.n	80045f4 <_printf_common+0x58>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4641      	mov	r1, r8
 800466a:	4638      	mov	r0, r7
 800466c:	47c8      	blx	r9
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xa4>
 8004672:	3601      	adds	r6, #1
 8004674:	e7d9      	b.n	800462a <_printf_common+0x8e>
	...

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	7e0f      	ldrb	r7, [r1, #24]
 800467e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004680:	2f78      	cmp	r7, #120	@ 0x78
 8004682:	4691      	mov	r9, r2
 8004684:	4680      	mov	r8, r0
 8004686:	460c      	mov	r4, r1
 8004688:	469a      	mov	sl, r3
 800468a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	@ 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d2 	beq.w	800483e <_printf_i+0x1c6>
 800469a:	2f58      	cmp	r7, #88	@ 0x58
 800469c:	f000 80b9 	beq.w	8004812 <_printf_i+0x19a>
 80046a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a101      	add	r1, pc, #4	@ (adr r1, 80046b8 <_printf_i+0x40>)
 80046b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004825 	.word	0x08004825
 80046e8:	0800474f 	.word	0x0800474f
 80046ec:	080047df 	.word	0x080047df
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004847 	.word	0x08004847
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	0800474f 	.word	0x0800474f
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	080047e7 	.word	0x080047e7
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6032      	str	r2, [r6, #0]
 8004718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e09d      	b.n	8004860 <_printf_i+0x1e8>
 8004724:	6833      	ldr	r3, [r6, #0]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	1d19      	adds	r1, r3, #4
 800472a:	6031      	str	r1, [r6, #0]
 800472c:	0606      	lsls	r6, r0, #24
 800472e:	d501      	bpl.n	8004734 <_printf_i+0xbc>
 8004730:	681d      	ldr	r5, [r3, #0]
 8004732:	e003      	b.n	800473c <_printf_i+0xc4>
 8004734:	0645      	lsls	r5, r0, #25
 8004736:	d5fb      	bpl.n	8004730 <_printf_i+0xb8>
 8004738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800473c:	2d00      	cmp	r5, #0
 800473e:	da03      	bge.n	8004748 <_printf_i+0xd0>
 8004740:	232d      	movs	r3, #45	@ 0x2d
 8004742:	426d      	negs	r5, r5
 8004744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004748:	4859      	ldr	r0, [pc, #356]	@ (80048b0 <_printf_i+0x238>)
 800474a:	230a      	movs	r3, #10
 800474c:	e011      	b.n	8004772 <_printf_i+0xfa>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	0608      	lsls	r0, r1, #24
 8004754:	f853 5b04 	ldr.w	r5, [r3], #4
 8004758:	d402      	bmi.n	8004760 <_printf_i+0xe8>
 800475a:	0649      	lsls	r1, r1, #25
 800475c:	bf48      	it	mi
 800475e:	b2ad      	uxthmi	r5, r5
 8004760:	2f6f      	cmp	r7, #111	@ 0x6f
 8004762:	4853      	ldr	r0, [pc, #332]	@ (80048b0 <_printf_i+0x238>)
 8004764:	6033      	str	r3, [r6, #0]
 8004766:	bf14      	ite	ne
 8004768:	230a      	movne	r3, #10
 800476a:	2308      	moveq	r3, #8
 800476c:	2100      	movs	r1, #0
 800476e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004772:	6866      	ldr	r6, [r4, #4]
 8004774:	60a6      	str	r6, [r4, #8]
 8004776:	2e00      	cmp	r6, #0
 8004778:	bfa2      	ittt	ge
 800477a:	6821      	ldrge	r1, [r4, #0]
 800477c:	f021 0104 	bicge.w	r1, r1, #4
 8004780:	6021      	strge	r1, [r4, #0]
 8004782:	b90d      	cbnz	r5, 8004788 <_printf_i+0x110>
 8004784:	2e00      	cmp	r6, #0
 8004786:	d04b      	beq.n	8004820 <_printf_i+0x1a8>
 8004788:	4616      	mov	r6, r2
 800478a:	fbb5 f1f3 	udiv	r1, r5, r3
 800478e:	fb03 5711 	mls	r7, r3, r1, r5
 8004792:	5dc7      	ldrb	r7, [r0, r7]
 8004794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004798:	462f      	mov	r7, r5
 800479a:	42bb      	cmp	r3, r7
 800479c:	460d      	mov	r5, r1
 800479e:	d9f4      	bls.n	800478a <_printf_i+0x112>
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d10b      	bne.n	80047bc <_printf_i+0x144>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	07df      	lsls	r7, r3, #31
 80047a8:	d508      	bpl.n	80047bc <_printf_i+0x144>
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	6861      	ldr	r1, [r4, #4]
 80047ae:	4299      	cmp	r1, r3
 80047b0:	bfde      	ittt	le
 80047b2:	2330      	movle	r3, #48	@ 0x30
 80047b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80047bc:	1b92      	subs	r2, r2, r6
 80047be:	6122      	str	r2, [r4, #16]
 80047c0:	f8cd a000 	str.w	sl, [sp]
 80047c4:	464b      	mov	r3, r9
 80047c6:	aa03      	add	r2, sp, #12
 80047c8:	4621      	mov	r1, r4
 80047ca:	4640      	mov	r0, r8
 80047cc:	f7ff fee6 	bl	800459c <_printf_common>
 80047d0:	3001      	adds	r0, #1
 80047d2:	d14a      	bne.n	800486a <_printf_i+0x1f2>
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047d8:	b004      	add	sp, #16
 80047da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	f043 0320 	orr.w	r3, r3, #32
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	4833      	ldr	r0, [pc, #204]	@ (80048b4 <_printf_i+0x23c>)
 80047e8:	2778      	movs	r7, #120	@ 0x78
 80047ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	6831      	ldr	r1, [r6, #0]
 80047f2:	061f      	lsls	r7, r3, #24
 80047f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80047f8:	d402      	bmi.n	8004800 <_printf_i+0x188>
 80047fa:	065f      	lsls	r7, r3, #25
 80047fc:	bf48      	it	mi
 80047fe:	b2ad      	uxthmi	r5, r5
 8004800:	6031      	str	r1, [r6, #0]
 8004802:	07d9      	lsls	r1, r3, #31
 8004804:	bf44      	itt	mi
 8004806:	f043 0320 	orrmi.w	r3, r3, #32
 800480a:	6023      	strmi	r3, [r4, #0]
 800480c:	b11d      	cbz	r5, 8004816 <_printf_i+0x19e>
 800480e:	2310      	movs	r3, #16
 8004810:	e7ac      	b.n	800476c <_printf_i+0xf4>
 8004812:	4827      	ldr	r0, [pc, #156]	@ (80048b0 <_printf_i+0x238>)
 8004814:	e7e9      	b.n	80047ea <_printf_i+0x172>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f023 0320 	bic.w	r3, r3, #32
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	e7f6      	b.n	800480e <_printf_i+0x196>
 8004820:	4616      	mov	r6, r2
 8004822:	e7bd      	b.n	80047a0 <_printf_i+0x128>
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	6825      	ldr	r5, [r4, #0]
 8004828:	6961      	ldr	r1, [r4, #20]
 800482a:	1d18      	adds	r0, r3, #4
 800482c:	6030      	str	r0, [r6, #0]
 800482e:	062e      	lsls	r6, r5, #24
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	d501      	bpl.n	8004838 <_printf_i+0x1c0>
 8004834:	6019      	str	r1, [r3, #0]
 8004836:	e002      	b.n	800483e <_printf_i+0x1c6>
 8004838:	0668      	lsls	r0, r5, #25
 800483a:	d5fb      	bpl.n	8004834 <_printf_i+0x1bc>
 800483c:	8019      	strh	r1, [r3, #0]
 800483e:	2300      	movs	r3, #0
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	4616      	mov	r6, r2
 8004844:	e7bc      	b.n	80047c0 <_printf_i+0x148>
 8004846:	6833      	ldr	r3, [r6, #0]
 8004848:	1d1a      	adds	r2, r3, #4
 800484a:	6032      	str	r2, [r6, #0]
 800484c:	681e      	ldr	r6, [r3, #0]
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	2100      	movs	r1, #0
 8004852:	4630      	mov	r0, r6
 8004854:	f7fb fcc4 	bl	80001e0 <memchr>
 8004858:	b108      	cbz	r0, 800485e <_printf_i+0x1e6>
 800485a:	1b80      	subs	r0, r0, r6
 800485c:	6060      	str	r0, [r4, #4]
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	2300      	movs	r3, #0
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004868:	e7aa      	b.n	80047c0 <_printf_i+0x148>
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	4632      	mov	r2, r6
 800486e:	4649      	mov	r1, r9
 8004870:	4640      	mov	r0, r8
 8004872:	47d0      	blx	sl
 8004874:	3001      	adds	r0, #1
 8004876:	d0ad      	beq.n	80047d4 <_printf_i+0x15c>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	079b      	lsls	r3, r3, #30
 800487c:	d413      	bmi.n	80048a6 <_printf_i+0x22e>
 800487e:	68e0      	ldr	r0, [r4, #12]
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	4298      	cmp	r0, r3
 8004884:	bfb8      	it	lt
 8004886:	4618      	movlt	r0, r3
 8004888:	e7a6      	b.n	80047d8 <_printf_i+0x160>
 800488a:	2301      	movs	r3, #1
 800488c:	4632      	mov	r2, r6
 800488e:	4649      	mov	r1, r9
 8004890:	4640      	mov	r0, r8
 8004892:	47d0      	blx	sl
 8004894:	3001      	adds	r0, #1
 8004896:	d09d      	beq.n	80047d4 <_printf_i+0x15c>
 8004898:	3501      	adds	r5, #1
 800489a:	68e3      	ldr	r3, [r4, #12]
 800489c:	9903      	ldr	r1, [sp, #12]
 800489e:	1a5b      	subs	r3, r3, r1
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	dcf2      	bgt.n	800488a <_printf_i+0x212>
 80048a4:	e7eb      	b.n	800487e <_printf_i+0x206>
 80048a6:	2500      	movs	r5, #0
 80048a8:	f104 0619 	add.w	r6, r4, #25
 80048ac:	e7f5      	b.n	800489a <_printf_i+0x222>
 80048ae:	bf00      	nop
 80048b0:	08004a61 	.word	0x08004a61
 80048b4:	08004a72 	.word	0x08004a72

080048b8 <memmove>:
 80048b8:	4288      	cmp	r0, r1
 80048ba:	b510      	push	{r4, lr}
 80048bc:	eb01 0402 	add.w	r4, r1, r2
 80048c0:	d902      	bls.n	80048c8 <memmove+0x10>
 80048c2:	4284      	cmp	r4, r0
 80048c4:	4623      	mov	r3, r4
 80048c6:	d807      	bhi.n	80048d8 <memmove+0x20>
 80048c8:	1e43      	subs	r3, r0, #1
 80048ca:	42a1      	cmp	r1, r4
 80048cc:	d008      	beq.n	80048e0 <memmove+0x28>
 80048ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d6:	e7f8      	b.n	80048ca <memmove+0x12>
 80048d8:	4402      	add	r2, r0
 80048da:	4601      	mov	r1, r0
 80048dc:	428a      	cmp	r2, r1
 80048de:	d100      	bne.n	80048e2 <memmove+0x2a>
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048ea:	e7f7      	b.n	80048dc <memmove+0x24>

080048ec <_sbrk_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d06      	ldr	r5, [pc, #24]	@ (8004908 <_sbrk_r+0x1c>)
 80048f0:	2300      	movs	r3, #0
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	f7fc ff46 	bl	8001788 <_sbrk>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_sbrk_r+0x1a>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_sbrk_r+0x1a>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	20000254 	.word	0x20000254

0800490c <memcpy>:
 800490c:	440a      	add	r2, r1
 800490e:	4291      	cmp	r1, r2
 8004910:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004914:	d100      	bne.n	8004918 <memcpy+0xc>
 8004916:	4770      	bx	lr
 8004918:	b510      	push	{r4, lr}
 800491a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800491e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004922:	4291      	cmp	r1, r2
 8004924:	d1f9      	bne.n	800491a <memcpy+0xe>
 8004926:	bd10      	pop	{r4, pc}

08004928 <_realloc_r>:
 8004928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492c:	4680      	mov	r8, r0
 800492e:	4615      	mov	r5, r2
 8004930:	460c      	mov	r4, r1
 8004932:	b921      	cbnz	r1, 800493e <_realloc_r+0x16>
 8004934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004938:	4611      	mov	r1, r2
 800493a:	f7ff bc4b 	b.w	80041d4 <_malloc_r>
 800493e:	b92a      	cbnz	r2, 800494c <_realloc_r+0x24>
 8004940:	f7ff fbdc 	bl	80040fc <_free_r>
 8004944:	2400      	movs	r4, #0
 8004946:	4620      	mov	r0, r4
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	f000 f81a 	bl	8004984 <_malloc_usable_size_r>
 8004950:	4285      	cmp	r5, r0
 8004952:	4606      	mov	r6, r0
 8004954:	d802      	bhi.n	800495c <_realloc_r+0x34>
 8004956:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800495a:	d8f4      	bhi.n	8004946 <_realloc_r+0x1e>
 800495c:	4629      	mov	r1, r5
 800495e:	4640      	mov	r0, r8
 8004960:	f7ff fc38 	bl	80041d4 <_malloc_r>
 8004964:	4607      	mov	r7, r0
 8004966:	2800      	cmp	r0, #0
 8004968:	d0ec      	beq.n	8004944 <_realloc_r+0x1c>
 800496a:	42b5      	cmp	r5, r6
 800496c:	462a      	mov	r2, r5
 800496e:	4621      	mov	r1, r4
 8004970:	bf28      	it	cs
 8004972:	4632      	movcs	r2, r6
 8004974:	f7ff ffca 	bl	800490c <memcpy>
 8004978:	4621      	mov	r1, r4
 800497a:	4640      	mov	r0, r8
 800497c:	f7ff fbbe 	bl	80040fc <_free_r>
 8004980:	463c      	mov	r4, r7
 8004982:	e7e0      	b.n	8004946 <_realloc_r+0x1e>

08004984 <_malloc_usable_size_r>:
 8004984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004988:	1f18      	subs	r0, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	bfbc      	itt	lt
 800498e:	580b      	ldrlt	r3, [r1, r0]
 8004990:	18c0      	addlt	r0, r0, r3
 8004992:	4770      	bx	lr

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
